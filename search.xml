<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Build and Deploy Your Personal Blog Using Hexo, NexT, and GitHub</title>
    <url>/2019/12/01/Build-and-Deploy-Your-Personal-Blog-Using-Hexo-NexT-and-GitHub/</url>
    <content><![CDATA[<html><head></head><body><p>A personal blog is a useful tool that could help us to record and share our ideas, research work, coding experiences, learning notes, and so on. Nowadays, there are many open source frameworks and online platforms that provide blog service, which could help people build and deploy personal blog easily and quickly either free or not. In this article, I will introduce a popular method to build and deploy our personal blog using <a href="https://hexo.io/">Hexo</a>, <a href="https://theme-next.org/">NexT</a>, and <a href="https://github.com/hexojs/hexo">GitHub</a> step by step. If you follow the succeeding instructions step by step, you will build a well-designed personal blog and deploy it on the Internet as well. Let's start right now. <span id="more"></span> ## Build Your Using Hexo <a href="https://hexo.io/">Hexo</a> is a fast and powerful static blog generating framework, it is based on <a href="https://nodejs.org/en/">Node.js</a>. By using Hexo, we can write articles easily using with Markdown. Besides the grammer of Markdown, Hexo also provide <a href="https://hexo.io/docs/tag-plugins">tag plugins</a> that we can use to further customize the format of article content. Please visit the <a href="https://hexo.io">official website</a> for more information. ### Installation Installing Hexo is quite easy and only requires the following beforehand: * <a href="https://nodejs.org/en/">Node.js</a> * <a href="https://git-scm.com/">Git</a></p>
<h4 id="install-git">Install Git</h4>
<figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install git-core</span><br><span class="line">git <span class="comment">--version</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="install-pandoc">Install pandoc</h4>
<p>Use pandoc to make mathjax work. </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install pandoc </span><br></pre></td></tr></tbody></table></figure><p></p>
<p>If the git version is printed, it means that we have installed git successfully. Then we can go to next step. #### Install Node.js Node.js is an asynchronous event-driven JavaScript runtime that can build scalable network applications. We can install it from source. </p><figure class="highlight armasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">curl</span> -<span class="built_in">sL</span> https:<span class="comment">//deb.nodesource.com/setup_18.x | sudo -E bash -</span></span><br><span class="line"><span class="symbol">sudo</span> apt-<span class="meta">get</span> install -y nodejs</span><br></pre></td></tr></tbody></table></figure> The above two steps can install nodejs and npm. We can verify the installation by printing the version of nodejs and npm. <figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line">nodejs -v</span><br><span class="line"><span class="built_in">npm</span> -v</span><br></pre></td></tr></tbody></table></figure> If you come from China as me, you had better change the package source from the original one to the one maintained by taobao. <figure class="highlight stata"><table><tbody><tr><td class="code"><pre><span class="line">sudo npm install -<span class="keyword">g</span> nrm</span><br><span class="line">nrm <span class="keyword">ls</span></span><br><span class="line">nrm <span class="keyword">use</span> taobao</span><br></pre></td></tr></tbody></table></figure> ##### Errors * Error If you use <em>nrm ls</em>, you may get the following error. The main reason of the error is that the nodejs version is too low, thus we just update nodejs to fix this error. <figure class="highlight roboconf"><table><tbody><tr><td class="code"><pre><span class="line">/usr/local/lib/node_modules/nrm/cli.js:138</span><br><span class="line">function config(attrArray, registry, index = 0) {</span><br><span class="line">                                           ^</span><br><span class="line"></span><br><span class="line"><span class="attribute">SyntaxError</span>: Unexpected token =</span><br><span class="line">    at exports<span class="variable">.runInThisContext</span> (vm<span class="variable">.js</span>:53:16)</span><br><span class="line">    at Module<span class="variable">._compile</span> (module<span class="variable">.js</span>:374:25)</span><br><span class="line">    at Object<span class="variable">.Module</span><span class="variable">._extensions</span>.<span class="variable">.js</span> (module<span class="variable">.js</span>:417:10)</span><br><span class="line">    at Module<span class="variable">.load</span> (module<span class="variable">.js</span>:344:32)</span><br><span class="line">    at Function<span class="variable">.Module</span><span class="variable">._load</span> (module<span class="variable">.js</span>:301:12)</span><br><span class="line">    at Function<span class="variable">.Module</span><span class="variable">.runMain</span> (module<span class="variable">.js</span>:442:10)</span><br><span class="line">    at startup (node<span class="variable">.js</span>:136:18)</span><br><span class="line">    at node<span class="variable">.js</span>:966:3</span><br></pre></td></tr></tbody></table></figure> * Solution <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">sudo npm cache clean -f</span><br><span class="line">sudo npm install -g n</span><br><span class="line">sudo n stable</span><br><span class="line">sudo ln -sf <span class="regexp">/usr/</span>local<span class="regexp">/n/</span>versions<span class="regexp">/node/</span><span class="number">12.13</span>.<span class="number">1</span><span class="regexp">/bin/</span>node <span class="regexp">/usr/</span>bin/nodejs</span><br><span class="line">node -v</span><br><span class="line">nrm ls</span><br></pre></td></tr></tbody></table></figure> ##### Warnings * deprecated fsevents@1.2.9: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2. <figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> upgrade fsevents</span><br></pre></td></tr></tbody></table></figure> * Warning: Accessing non-existent property 'lineno' of module exports inside circular dependency <figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install stylus</span><br><span class="line"><span class="built_in">npm</span> install lineno</span><br><span class="line"><span class="built_in">npm</span> install column</span><br><span class="line"><span class="built_in">npm</span> install filename</span><br><span class="line"><span class="built_in">npm</span> update</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="install-hexo">Install Hexo</h4>
<p>After Git and Node.js are installed, we can install Hexo right now. </p><figure class="highlight avrasm"><table><tbody><tr><td class="code"><pre><span class="line">sudo npm install hexo-<span class="keyword">cli</span> -g</span><br><span class="line">hexo -v</span><br></pre></td></tr></tbody></table></figure> If the Hexo version is printed, it means that we have installed Hexo successfully. Then we can go to next step to build our personal blog. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span>-cli: <span class="number">4</span>.<span class="number">3</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">os</span>: linux <span class="number">4</span>.<span class="number">15</span>.<span class="number">0</span>-<span class="number">200</span>-generic Ubuntu <span class="number">18</span>.<span class="number">04</span>.<span class="number">6</span> LTS (Bionic Beaver)</span><br><span class="line"><span class="attribute">node</span>: <span class="number">14</span>.<span class="number">21</span>.<span class="number">3</span></span><br><span class="line"><span class="attribute">v8</span>: <span class="number">8.4.371.23</span>-node.<span class="number">88</span></span><br><span class="line"><span class="attribute">uv</span>: <span class="number">1</span>.<span class="number">42</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">zlib</span>: <span class="number">1</span>.<span class="number">2</span>.<span class="number">11</span></span><br><span class="line"><span class="attribute">brotli</span>: <span class="number">1</span>.<span class="number">0</span>.<span class="number">9</span></span><br><span class="line"><span class="attribute">ares</span>: <span class="number">1</span>.<span class="number">18</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">modules</span>: <span class="number">83</span></span><br><span class="line"><span class="attribute">nghttp2</span>: <span class="number">1</span>.<span class="number">42</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">napi</span>: <span class="number">8</span></span><br><span class="line"><span class="attribute">llhttp</span>: <span class="number">2</span>.<span class="number">1</span>.<span class="number">6</span></span><br><span class="line"><span class="attribute">openssl</span>: <span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>t</span><br><span class="line"><span class="attribute">cldr</span>: <span class="number">40</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">icu</span>: <span class="number">70</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">tz</span>: <span class="number">2022</span>f</span><br><span class="line"><span class="attribute">unicode</span>: <span class="number">14</span>.<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure> ### Building Hexo allows us to maintain and write our blog in a directory, thus we first make a directory at any path as we like. <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br></pre></td></tr></tbody></table></figure> Then we initialize our blog, generate static blog webpage and serve it on our computer locally using just the following three steps. <figure class="highlight verilog"><table><tbody><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure> We can visit the blog we built by <a href="http://localhost:4000">http://localhost:4000</a>. ## Customization There are many plugins that could help us customize our blog easily, such as automatically build sitemap, rss, generate archives and categories. We install them before we go to further steps. <figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br><span class="line">npm install hexo-generator-archive <span class="comment">--save</span></span><br><span class="line">npm install hexo-generator-category <span class="comment">--save</span></span><br><span class="line">npm install hexo-generator-tag <span class="comment">--save</span></span><br><span class="line">npm install hexo-<span class="keyword">server</span> <span class="comment">--save</span></span><br><span class="line">npm install hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">npm install hexo-deployer-heroku <span class="comment">--save</span></span><br><span class="line">npm install hexo-deployer-rsync <span class="comment">--save</span></span><br><span class="line">npm install hexo-deployer-openshift <span class="comment">--save</span></span><br><span class="line">npm install hexo-renderer-marked <span class="comment">--save</span></span><br><span class="line">npm install hexo-renderer-stylus <span class="comment">--save</span></span><br><span class="line">npm install hexo-generator-feed <span class="comment">--save</span></span><br><span class="line">npm install hexo-generator-sitemap <span class="comment">--save</span></span><br><span class="line">npm install hexo-wordcount <span class="comment">--save</span></span><br><span class="line">npm install hexo-symbols-count-<span class="type">time</span> <span class="comment">--save</span></span><br><span class="line">npm install hexo-asset-image <span class="comment">--save</span></span><br><span class="line">npm install hexo-leancloud-counter-<span class="keyword">security</span> <span class="comment">--save</span></span><br><span class="line">npm install babel-runtime <span class="comment">--save</span></span><br><span class="line">npm install hexo-renderer-marked <span class="comment">--save</span></span><br><span class="line">npm install hexo-renderer-kramed <span class="comment">--save</span></span><br><span class="line">npm install hexo-renderer-pandoc <span class="comment">--save</span></span><br><span class="line">npm install hexo-renderer-markdown-it-plus <span class="comment">--save</span></span><br><span class="line">npm install hexo-generator-searchdb <span class="comment">--save</span></span><br><span class="line">npm install hexo-<span class="keyword">filter</span>-mermaid-diagrams <span class="comment">--save</span></span><br></pre></td></tr></tbody></table></figure> Note: 必须在blog目录下安装插件，否则不会生效。安装后应该在<strong>note_modules</strong>目录下找到<strong>hexo-filter-mermaid-diagrams</strong>。<p></p>
<ul>
<li>mermaid-diagrams可以支持用markdown语法画流程图</li>
<li>安装完插件后，需要在**_config.yml**中添加插件的配置 <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line">  <span class="comment"># Available themes: default | dark | forest | neutral</span></span><br><span class="line">  theme: forest</span><br><span class="line"></span><br><span class="line">  mermaid: <span class="regexp">//</span>cdnjs.cloudflare.com<span class="regexp">/ajax/</span>libs<span class="regexp">/mermaid/</span><span class="number">8.3</span>.<span class="number">0</span>/mermaid.min.js</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<p>Hexo provides an uniformed customization interface file named **_config.yml** in the root directory of our blog. We can customize our blog by modifying **_config.yml**. For more information, please visit the official <a href="https://hexo.io/docs/configuration">configuration</a> docs.</p>
<h3 id="add-pages">Add Pages</h3>
<p>When we initialize a hexo project, only the home page and archive page are added by default. It is recommended to add pages, such as tags, categories, and about, which could make the hierarchy of our blog more clear.</p>
<h4 id="add-tags-page">Add tags Page</h4>
<p>We can add tags to every post we write, and the added tags would help us or readers to quickly the posts that having same tags. The tags page will show the results. We can add tags page by creating a new page named tags with page layout. </p><figure class="highlight haxe"><table><tbody><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> tags</span><br></pre></td></tr></tbody></table></figure> We can specify its type and close comments by revising the <a href="https://hexo.io/docs/front-matter">front-matter</a> in tags.md <figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">data:</span> <span class="number">2019-12-02 16:49:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="add-categories-page">Add categories Page</h4>
<p>Similar with tags, categories allows us to maintain our posts using categories and we can add categories page using the same method. </p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">categories</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">data:</span> <span class="number">2019-12-02 16:50:07</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="add-about-page">Add about Page</h4>
<p>Usually, a well-designed blog has a page to introduce author and the page is called about page. </p><figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">page</span> <span class="string">about</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">data:</span> <span class="number">2019-12-02 16:55:02</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="add-post">Add Post</h3>
<p>After finishing the above steps, we can start to write posts.</p>
<h4 id="create-a-draft">Create a Draft</h4>
<p>Drafts are the same as posts. More specifically, drafts are just unpublished posts that we are still working on. Those are just files that contain the article of our future post in the Markdown format. </p><figure class="highlight actionscript"><table><tbody><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"Post Title"</span></span><br></pre></td></tr></tbody></table></figure> If the draft is finished, we can publish this draft as a post, then readers will see the post on the website. <figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span> publish <span class="string">"Post Title"</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="create-a-post">Create a Post</h4>
<p>Besides creating and publishing a draft, we can also create a post directly. </p><figure class="highlight haxe"><table><tbody><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">post</span> <span class="string">"Post Title"</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="use-next-theme">Use NexT theme</h3>
<p>There are many free themes that help us to customize our blog pages easily and quickly, even without worry about the front-end coding. NexT is a popular theme for hexo, which has beautiful layout. We can download the source code from github and put it in <strong>themes</strong> directory. </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></tbody></table></figure> Then we use NextT theme in our blog by modifying hexo's **_config.yml<strong>. Assign the theme keyword as next. <figure class="highlight vbnet"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">theme:</span> <span class="keyword">next</span></span><br></pre></td></tr></tbody></table></figure> Similar with Hexo, we can further customize the layout in NexT's </strong>_config.yml**. The <a href="https://theme-next.org/docs/">official docs</a> has detailed information about how to customize the NexT theme.<p></p>
<h2 id="deployment">Deployment</h2>
<p>We must deploy our blog on the Internet, thus others can visit our blog via Internet. GitHub offers a webpage service that we can used to deploy our blog. Thanks to GitHub, we can publish our posts for free. Hexo has a command that we can easily push our blogs to github account.</p>
<h3 id="github-webpage-service">GitHub Webpage Service</h3>
<p>The way to use github webpage service is to create a special repository named <strong>accountname.github.io</strong>. For example, if your github account name is JackMa, the repository name must be JackMa.github.io.</p>
<h3 id="deployment-configure-for-hexo">Deployment Configure for Hexo</h3>
<p>The configuration interface is in **_config.yml** with <strong>deploy</strong> keyword. </p><figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repository:</span> git@github.com:JackMa/JackMa.github.io.git</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></tbody></table></figure> Then we can push our static blog to the created repository. And the github webpage service will automatically show the pushed contents. <figure class="highlight verilog"><table><tbody><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo <span class="keyword">generate</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></tbody></table></figure> Congratulations, you have successfully build and deploy your blog. Now every body can visit your blog via <a href="http://JackMa.github.io">JackMa.github.io</a>. #### Errors ##### TypeError [ERR_INVALID_ARG_TYPE]: The "mode" argument must be of type number. Received an instance of Object You may meet the following error when deploy your blog to git using 'hexo deploy'. <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">FATAL Something's wrong. Maybe you can find the solution here: https:<span class="comment">//hexo.io/docs/troubleshooting.html</span></span><br><span class="line">TypeError <span class="literal">[ERR<span class="identifier">_INVALID_ARG_TYPE</span>]</span>: The <span class="string">"mode"</span> argument must be <span class="keyword">of</span> <span class="keyword">type</span> number. Received an instance <span class="keyword">of</span> Object</span><br><span class="line">    at copyFile (node:fs:<span class="number">2858</span>:<span class="number">10</span>)</span><br><span class="line">    at tryCatcher (/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at ret (eval at makeNodePromisifiedEval (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promisify.js:<span class="number">184</span>:<span class="number">12</span>), &lt;anonymous&gt;:<span class="number">13</span>:<span class="number">39</span>)</span><br><span class="line">    at /Users/zhaoyongsheng/Gits/blog-github/node_modules/hexo-fs/lib/fs.js:<span class="number">144</span>:<span class="number">39</span></span><br><span class="line">    at tryCatcher (/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromiseFromHandler</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">547</span>:<span class="number">31</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromise</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">604</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromise0</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">649</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromises</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">729</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_fulfill</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">673</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_resolveCallback</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">466</span>:<span class="number">57</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromiseFromHandler</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">559</span>:<span class="number">17</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromise</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">604</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromise0</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">649</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromises</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">729</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_fulfill</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">673</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_resolveCallback</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">466</span>:<span class="number">57</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromiseFromHandler</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">559</span>:<span class="number">17</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromise</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">604</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromise0</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">649</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_settlePromises</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">729</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="module-access"><span class="module"><span class="identifier">Promise</span>.</span><span class="module"><span class="identifier">_fulfill</span> </span></span>(/Users/zhaoyongsheng/Gits/blog-github/node_modules/bluebird/js/release/promise.js:<span class="number">673</span>:<span class="number">18</span>)</span><br></pre></td></tr></tbody></table></figure> * Solution The reason of this error is that the version of the installed hexo is not compatible with Node 14. We have to upgrade the hexo's version at least to 4.2.1. First, check the current version of Hexo using <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">hexo -v</span></span><br></pre></td></tr></tbody></table></figure> Second, if the current version of Hexo is lower than 4.2.1 then upgrade Hexo using <figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> upgrade hexo</span><br></pre></td></tr></tbody></table></figure> ##### Error: Cannot find module 'cheerio' After upgrade Hexo, we may meet the following error when using 'hexo generate'. <figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">Error: Cannot <span class="keyword">find</span> module <span class="string">'cheerio'</span></span><br><span class="line">Require stack:</span><br><span class="line">- <span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/themes/</span><span class="keyword">next</span><span class="regexp">/scripts/</span>filters/post.js</span><br><span class="line">    at Module._resolveFilename (node:internal<span class="regexp">/modules/</span>cjs/loader:<span class="number">1060</span>:<span class="number">15</span>)</span><br><span class="line">    at Module._load (node:internal<span class="regexp">/modules/</span>cjs/loader:<span class="number">905</span>:<span class="number">27</span>)</span><br><span class="line">    at Module.require (node:internal<span class="regexp">/modules/</span>cjs/loader:<span class="number">1127</span>:<span class="number">19</span>)</span><br><span class="line">    at require (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>hexo<span class="regexp">/lib/</span>hexo/index.js:<span class="number">280</span>:<span class="number">23</span>)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/themes/</span><span class="keyword">next</span><span class="regexp">/scripts/</span>filters/post.js:<span class="number">13</span>:<span class="number">19</span>)</span><br><span class="line">    at Hexo.tryCatcher (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at Hexo.&lt;anonymous&gt; (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/method.js:<span class="number">15</span>:<span class="number">34</span>)</span><br><span class="line">    at <span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>hexo<span class="regexp">/lib/</span>extend/filter.js:<span class="number">62</span>:<span class="number">52</span></span><br><span class="line">    at tryCatcher (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at Object.gotValue (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/reduce.js:<span class="number">166</span>:<span class="number">18</span>)</span><br><span class="line">    at Object.gotAccum (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/reduce.js:<span class="number">155</span>:<span class="number">25</span>)</span><br><span class="line">    at Object.tryCatcher (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at Promise._settlePromiseFromHandler (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/promise.js:<span class="number">547</span>:<span class="number">31</span>)</span><br><span class="line">    at Promise._settlePromise (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/promise.js:<span class="number">604</span>:<span class="number">18</span>)</span><br><span class="line">    at Promise._settlePromise0 (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/promise.js:<span class="number">649</span>:<span class="number">10</span>)</span><br><span class="line">    at Promise._settlePromises (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/promise.js:<span class="number">729</span>:<span class="number">18</span>)</span><br><span class="line">    at _drainQueueStep (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/async.js:<span class="number">93</span>:<span class="number">12</span>)</span><br><span class="line">    at _drainQueue (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/async.js:<span class="number">86</span>:<span class="number">9</span>)</span><br><span class="line">    at Async._drainQueues (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/async.js:<span class="number">102</span>:<span class="number">5</span>)</span><br><span class="line">    at Async.drainQueues [as _onImmediate] (<span class="regexp">/Users/</span>zhaoyongsheng<span class="regexp">/Gits/</span>blog-github<span class="regexp">/node_modules/</span>bluebird<span class="regexp">/js/</span>release/async.js:<span class="number">15</span>:<span class="number">14</span>)</span><br><span class="line">    at process.processImmediate (node:internal/timers:<span class="number">475</span>:<span class="number">21</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> * Solution This is because cheerio is removed from mode_module, we have to install it manually. <figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> cheerio</span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Concepts, Properties, and Usage of Homogeneous Coordinates</title>
    <url>/2019/12/02/Concepts-Usage-and-Advantages-of-Homogeneous-Coordinates/</url>
    <content><![CDATA[<html><head></head><body><p>In mathematics history, homogeneous coordinates or projective coordinates were first introduced by August Ferdinand Möbius in 1827. They are a common system of coordinates used in projective geometry, as Cartesian coordinates are used in Euclidean geometry. Nowadays, with the development of computer vision and computer graphics, projective geometry is widely used, and homogeneous coordinates is widely used in many algorithms. In this article, I will present you a brief introduction of homogeneous coordinates about its definitions, properties, usages, and advantages. <span id="more"></span> ## Motivation In projective geometry, a 3D Euclidean coordinates space can be projected into a 2D projective coordinates space. This is what happens when we take a photo using a RGB camera. The projection is a kind of space compression or transformation that compresses a geometry structure in 3D space alongside the projective direction into a 2D space. For example, all the points in a line in 3D Euclidean geometry can be projected to a single point in projective geometry if the projective direction is alongside the line. In the scenario, using 2D Euclidean coordinates to express the point in projective geometry is not appropriate. Because we can not tell whether it is a 2D point or 3D line, it will confusing us. Homogeneous coordinates were proposed to effectively address this issue.</p>
<p>For a finite 2D point <span class="math display">\[P = {\left[ {\begin{array}{*{20}{c}}x&amp;y\end{array}} \right]^T}\]</span> in projective geometry, there must exist an infinite set of 3D points in Euclidean geometry that can project at the point <span class="math display">\[P\]</span>. To be exact, all the 3D points in the line parallel to the projective direction and passing through the projected 2D point satisfy the above condition. Therefore, if we use a 2D coordinate <span class="math display">\[{\left[ {\begin{array}{*{20}{c}}x&amp;y\end{array}} \right]^T}\]</span> to represent a infinite set of 3D points, the information of the third dimension is compressed alongside the projection direction. From the point view of mathematics, 2D coordinates is not a suitable tool to describe the projection of 3D points in projection geometry. However, if we add an extra dimension to <span class="math display">\[P\]</span>, then no information is lost during projection. Maybe, this is the main motivation of homogeneous coordinates. ## Definition For a finite 2D point <span class="math display">\[P = {\left[ {\begin{array}{*{20}{c}}X&amp;Y\end{array}} \right]^T}\]</span>, its homogeneous coordinates is defined as <span class="math display">\[{\left[ {\begin{array}{*{20}{c}}{x}&amp;{y}&amp;{w}\end{array}} \right]^T}\]</span> that satisfies Eq. <span class="math inline">\(\eqref{eq1}\)</span> for any <span class="math display">\[w \ne 0\]</span>. Since <span class="math display">\[w\]</span> could be any none zero value in real space <span class="math display">\[R\]</span>, homogeneous coordinates keeps all the 3D information in Cartesian coordinates and can be used to describe the 3D-2D projection. <span class="math display">\[\begin{equation}
\left\{ {\begin{array}{*{20}{c}}
{X = \frac{x}{w}}\\
{Y = \frac{y}{w}}
\end{array}} \right.
\end{equation}\label{eq1}\]</span> According to the definition of homogeneous coordinates, we can get the homogeneous coordinates of a point <span class="math display">\[P={\left[ {\begin{array}{*{20}{c}}X&amp;Y\end{array}} \right]^T}\]</span> in projective geometry, as shown in Eq. <span class="math inline">\(\eqref{eq2}\)</span>. <span class="math display">\[\begin{equation}
{\left[ {\begin{array}{*{20}{c}}X&amp;Y\end{array}} \right]^T} \mapsto {w}\left[ {\begin{array}{*{20}{c}}
{X}&amp;{Y}&amp;1
\end{array}} \right]^T
\end{equation}\label{eq2}\]</span> Similarly, we can derive the definition of homogeneous coordinates of a 3D point in projective geometry as Eq. <span class="math inline">\(\eqref{eq3}\)</span>. <span class="math display">\[\begin{equation}
{\left[ {\begin{array}{*{20}{c}}X&amp;Y&amp;Z\end{array}} \right]^T} \mapsto {w}\left[ {\begin{array}{*{20}{c}}
{X}&amp;{Y}&amp;{Z}&amp;1
\end{array}} \right]^T
\end{equation}\label{eq3}\]</span> ## Properties and Usage ### Scale takes no effect in homogeneous coordinates According to Eq. <span class="math inline">\(\eqref{eq2}\)</span>, for a homogeneous coordinates <span class="math display">\[{w}\left[ {\begin{array}{*{20}{c}}{X}&amp;{Y}&amp;1\end{array}} \right]\]</span> when the <span class="math display">\[w\]</span> changes its value, the corresponding Cartesian coordinates keeps constant <span class="math display">\[{\left[ {\begin{array}{*{20}{c}}X&amp;Y\end{array}} \right]^T}\]</span>. That is to say, scale takes no effects in homogeneous coordinates. For simplicity, we can set <span class="math display">\[w = 1\]</span> and ignore it in the mathematical expression. Equation <span class="math inline">\(\eqref{eq2}\)</span> can be formulated as Eq. <span class="math inline">\(\eqref{eq4}\)</span>. <span class="math display">\[\begin{equation}
{\left[ {\begin{array}{*{20}{c}}X&amp;Y\end{array}} \right]^T} \mapsto \left[ {\begin{array}{*{20}{c}}
{X}&amp;{Y}&amp;1
\end{array}} \right]^T
\end{equation}\label{eq4}\]</span> Equation <span class="math inline">\(\eqref{eq3}\)</span> can be formulated as Eq. <span class="math inline">\(\eqref{eq5}\)</span>. <span class="math display">\[\begin{equation}
{\left[ {\begin{array}{*{20}{c}}X&amp;Y&amp;Z\end{array}} \right]^T} \mapsto \left[ {\begin{array}{*{20}{c}}
{X}&amp;{Y}&amp;{Z}&amp;1
\end{array}} \right]^T
\end{equation}\label{eq5}\]</span></p>
<h3 id="express-infinite-point-without-using-infty">Express infinite point without using <span class="math display">\[\infty\]</span></h3>
<p>In Cartesian coordinates, we use <span class="math display">\[\infty\]</span> to express a real value at infinity and use <span class="math display">\[{\left[ {\begin{array}{*{20}{c}}\infty&amp;\infty\end{array}} \right]^T}\]</span> to express a real 2D point at infinity. According to Eq. <span class="math inline">\(\eqref{eq1}\)</span>, when <span class="math display">\[w = 0\]</span>, <span class="math display">\[X\]</span> becomes <span class="math display">\[\infty\]</span> and <span class="math display">\[Y\]</span> also becomes <span class="math display">\[\infty\]</span>. That is to say, we can use <span class="math display">\[{\left[ {\begin{array}{*{20}{c}}{x}&amp;{y}&amp;{0}\end{array}} \right]^T}\]</span> to express a point at infinity in homogeneous coordinates. Noting that the original definition of homogeneous coordinates is <span class="math display">\[{\left[ {\begin{array}{*{20}{c}}{x}&amp;{y}&amp;{w}\end{array}} \right]^T}\]</span>.</p>
<p>Once a point reaches infinity, we immediately loss the direction information in Cartesian coordinates. It means that we don't know from what direction the point reaches infinity. However, the homogeneous coordinates keeps the direction information at infinity because we still know the values of <span class="math display">\[x\]</span> and <span class="math display">\[y\]</span>. In my opinion, this is the most magical property of homogeneous coordinates compared to Cartesian coordinates.</p>
<h3 id="a-homogeneous-coordinates-represents-a-line">A homogeneous coordinates represents a line</h3>
<p>Besides the magical property at infinity, another property is that a point and a line have a uniform mathematical expression in projective space, which is also different with Cartesian coordinates. An intuitive explanation is that there exists a scalable variable in the definition of homogeneous coordinates, which makes <strong>a homogeneous coordinates have the ability to express a infinite set of points</strong>. The infinite set of points are all in one line. We can easily verify the above property by mathematical derivation. Equation <span class="math inline">\(\eqref{eq6}\)</span> defines a line in 2D space. <span class="math display">\[\begin{equation}
ax+by+c=0
\end{equation}\label{eq6}\]</span></p>
<p>Define the coefficients of line <span class="math inline">\(\eqref{eq6}\)</span> as <span class="math display">\[l = {\left[ {\begin{array}{*{20}{c}}a&amp;b&amp;c\end{array}} \right]^T}\]</span>, then we can factorizing Eq. <span class="math inline">\(\eqref{eq6}\)</span> as: <span class="math display">\[\begin{equation}
{l^T}p = {p^T}l = 0
\end{equation}\label{eq7}\]</span> where <span class="math display">\[p = {\left[ {\begin{array}{*{20}{c}}x&amp;y&amp;1\end{array}} \right]^T}\]</span> denotes all the points passing through the line defined by <span class="math display">\[l\]</span>. Obviously, <span class="math display">\[p\]</span> is similar to the right part of Eq. <span class="math inline">\(\eqref{eq4}\)</span>, which is is a homogeneous coordinates. In other words, <strong>a homogeneous coordinates represents a infinite set of points in a line</strong>. Moreover, Eq. <span class="math inline">\(\eqref{eq7}\)</span> shows that the line <span class="math display">\[l\]</span> and the point <span class="math display">\[p\]</span> are in accord with commutative law, which means that <strong>a line and a homogeneous coordinates have uniform mathematical representation</strong>.</p>
<h3 id="line-can-be-computed-by-the-cross-product-of-homogeneous-coordinates-of-two-different-points-in-it">Line can be computed by the cross product of homogeneous coordinates of two different points in it</h3>
<p>According to the preceding conclusion and Eq. <span class="math inline">\(\eqref{eq2}\)</span>, we substitute two points <span class="math display">\[p_1 = {\left[ {\begin{array}{*{20}{c}}X_1&amp;Y_1&amp;s_1\end{array}} \right]^T}\]</span> and <span class="math display">\[p_2 = {\left[ {\begin{array}{*{20}{c}}X_2&amp;Y_2&amp;s_2\end{array}} \right]^T}\]</span> into Eq. <span class="math inline">\(\eqref{eq7}\)</span> and get Eq. <span class="math inline">\(\eqref{eq8}\)</span>. <span class="math display">\[\begin{equation}
\begin{array}{*{20}{c}}
{l^T{p_1} = {p_1}^Tl = 0}\\
{l^T{p_2} = {p_2}^Tl = 0}
\end{array}
\end{equation}\label{eq8}\]</span></p>
<p>We can easily obtain the solution of Eq. <span class="math inline">\(\eqref{eq8}\)</span> by computing the cross product of <span class="math display">\[p_1\]</span> and <span class="math display">\[p_2\]</span>. Note that both <span class="math display">\[p_1\]</span> and <span class="math display">\[p_2\]</span> are homogeneous coordinates of different 2D points. <span class="math display">\[\begin{equation}
l=p_1 \times p_2\
\end{equation}\label{eq9}\]</span></p>
<h3 id="homogeneous-coordinates-of-the-intersection-point-of-two-non-parallel-lines-also-can-be-computed-by-two-lines-cross-product">Homogeneous coordinates of the intersection point of two non-parallel lines also can be computed by two line's cross product</h3>
<p>Swap <span class="math display">\[l\]</span> and <span class="math display">\[p\]</span>, we can get Eq. <span class="math inline">\(\eqref{eq10}\)</span> from Eq. <span class="math inline">\(\eqref{eq9}\)</span>. <span class="math display">\[\begin{equation}
p=l_1 \times l_2\
\end{equation}\label{eq10}\]</span></p>
<p>Note that <span class="math display">\[p\]</span> is the homogeneous coordinates of the intersection point not the Cartesian coordinates.</p>
<h3 id="there-exists-intersection-point-between-parallel-lines">There exists intersection point between parallel lines</h3>
<p>As far as we know, there is no intersection point for two parallel lines in Cartesian coordinates. However, there exists a intersection point for two parallel lines in projective coordinates. Suppose the two parallel lines are <span class="math display">\[l_1 = {\left[ {\begin{array}{*{20}{c}}a&amp;b&amp;c_1\end{array}} \right]^T}\]</span> and <span class="math display">\[l_2 = {\left[ {\begin{array}{*{20}{c}}a&amp;b&amp;c_2\end{array}} \right]^T}\]</span>, <span class="math display">\[c_1 \neq c_2\]</span>, and there exist two points passing through the two parallel lines correspondingly. We define the two points as <span class="math display">\[p_1 = {\left[ {\begin{array}{*{20}{c}}X_1&amp;Y_1&amp;w_1\end{array}} \right]^T}\]</span> and <span class="math display">\[p_2 = {\left[ {\begin{array}{*{20}{c}}X_2&amp;Y_2&amp;w_2\end{array}} \right]^T}\]</span> according to the original definition of homogeneous coordinates. Then we can get: <span class="math display">\[\begin{equation}
\begin{array}{*{20}{c}}
{a{X_1} + b{Y_1} + {c_1}{w_1} = 0}\\
{a{X_2} + b{Y_2} + {c_2}{w_2} = 0}
\end{array}
\end{equation}\label{eq11}\]</span></p>
<p>If there exist an intersection point between <span class="math display">\[l_1\]</span> and <span class="math display">\[l_2\]</span>, it means that <span class="math display">\[{\left[ {\begin{array}{*{20}{c}}X_1&amp;Y_1&amp;w_1\end{array}} \right]^T} = {\left[ {\begin{array}{*{20}{c}}X_2&amp;Y_2&amp;w_2\end{array}} \right]^T}\]</span>. Substitute <span class="math display">\[w_1=0\]</span> and <span class="math display">\[w_2=0\]</span> into Eq. <span class="math inline">\(\eqref{eq11}\)</span>, and suppose <span class="math display">\[X_1 = X_2 =X\]</span> and <span class="math display">\[Y_1 = Y_2 = Y\]</span>, we can get: <span class="math display">\[\begin{equation}
\begin{array}{*{20}{c}}
{a{X} + b{Y} = 0}\\
{a{X} + b{Y} = 0}
\end{array}
\end{equation}\label{eq12}\]</span></p>
<p>The solution of Eq. <span class="math inline">\(\eqref{eq12}\)</span> is <span class="math display">\[X = b\]</span> and <span class="math display">\[Y = -a\]</span>, which indicates that <span class="math display">\[{\left[ {\begin{array}{*{20}{c}}b&amp;{ - a}&amp;0\end{array}} \right]^T}\]</span> is the solution of Eq. <span class="math inline">\(\eqref{eq11}\)</span>. That is to say, two parallel lines have an intersection point in projective coordinates and the intersection point is at infinity. Fig. 1 gives us an intuitive explanation regarding the intersection point of two parallel lines in projective coordinates. <img alt="Fig. 1 Railway to infinity" data-src="/2019/12/02/Concepts-Usage-and-Advantages-of-Homogeneous-Coordinates/train.png"></p>
</body></html>]]></content>
      <categories>
        <category>Mathematics</category>
        <category>Projective Geometry</category>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>Maths</tag>
        <tag>Homogeneous</tag>
      </tags>
  </entry>
  <entry>
    <title>Usage Experiences and Skills of Ubuntu</title>
    <url>/2019/12/04/Usage-Experiences-and-Skills-of-Ubuntu/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://ubuntu.com/">Ubuntu</a> is a popular version of <a href="https://www.linux.org/">Linux</a> with a desktop. It is easy to use and widely used in software and algorithm development. There are tens of thousands of open source softwares that support Ubuntu. As a researcher and algorithm engineer, I am using Ubuntu 16.04 and 18.04 to do research and development work. This post contains many useful experiences and skills in using Ubuntu that I want to share with you and make a documentation for myself at the same time. <span id="more"></span></p>
<h2 id="command-line">Command Line</h2>
<h3 id="command-line-history">Command Line History</h3>
<p><strong>history</strong> command is used to list the commands we used in the terminal. </p><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">history</span> #Show <span class="keyword">all</span> the <span class="keyword">history</span> commands</span><br><span class="line"><span class="keyword">history</span> | <span class="keyword">grep</span> <span class="string">"apt-get"</span> #Show <span class="keyword">all</span> the <span class="keyword">history</span> commands that contains apt-<span class="built_in">get</span></span><br><span class="line"><span class="keyword">history</span> | tee &gt; <span class="keyword">history</span>.hist #Show <span class="keyword">all</span> the <span class="keyword">history</span> commands <span class="built_in">and</span> output <span class="keyword">to</span> <span class="keyword">a</span> <span class="keyword">file</span></span><br></pre></td></tr></tbody></table></figure> Note that the symbol <strong>&gt;</strong> means output the stream to a file. It will create a new file or erase the existing contents if the file is already exits and write the stream to the beginning of the file. While the symbol <strong>&gt;&gt;</strong> will keep the existing contents and write the stream to the end of the file.<p></p>
<h3 id="word-count">Word Count</h3>
<p>Ubuntu provides a command to count the word or line of a text content. The command is <strong>wc</strong>. For example, we can use this command to count the items of a directory. </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> | <span class="built_in">wc</span> -l</span><br></pre></td></tr></tbody></table></figure> ### Show &amp; Kill Process #### Show We can check all the running process using <strong>ps</strong> command <figure class="highlight dos"><table><tbody><tr><td class="code"><pre><span class="line">ps -<span class="built_in">aux</span></span><br></pre></td></tr></tbody></table></figure> #### Kill <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">kill</span> -<span class="number">9</span><span class="meta"> [pid]</span></span><br></pre></td></tr></tbody></table></figure> #### Set Default Editor <figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">sudo <span class="keyword">update</span><span class="operator">-</span>alternatives <span class="comment">--config editor</span></span><br></pre></td></tr></tbody></table></figure> Run the above command, and you will see a list of editors as follows. <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">There are <span class="number">4</span> choices <span class="keyword">for</span> the alternative editor (providing /usr/bin/editor). And <span class="built_in">input</span> the <span class="keyword">number</span> <span class="keyword">to</span> <span class="keyword">set</span> the default editor.</span><br><span class="line"></span><br><span class="line">  Selection    Path                Priority   Status</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* <span class="number">0</span>            /bin/nano            <span class="number">40</span>        auto <span class="keyword">mode</span></span><br><span class="line">  <span class="number">1</span>            /bin/ed             -<span class="number">100</span>       manual <span class="keyword">mode</span></span><br><span class="line">  <span class="number">2</span>            /bin/nano            <span class="number">40</span>        manual <span class="keyword">mode</span></span><br><span class="line">  <span class="number">3</span>            /usr/bin/<span class="keyword">vim</span>.basic   <span class="number">30</span>        manual <span class="keyword">mode</span></span><br><span class="line">  <span class="number">4</span>            /usr/bin/<span class="keyword">vim</span>.tiny    <span class="number">15</span>        manual <span class="keyword">mode</span></span><br><span class="line"></span><br><span class="line">Press <span class="symbol">&lt;enter&gt;</span> <span class="keyword">to</span> keep the current choice[*], <span class="built_in">or</span> <span class="built_in">type</span> selection <span class="keyword">number</span>:</span><br></pre></td></tr></tbody></table></figure> ### Kernel Information <strong>uname</strong> can be used to print the kernel information. <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r <span class="comment">#print kernel release</span></span><br><span class="line"><span class="built_in">uname</span> -v <span class="comment">#print kernel version</span></span><br></pre></td></tr></tbody></table></figure> ### ssh If we meet ssh command not found error, then we can fix it by installing openssh-server <figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install openssh-<span class="keyword">server</span></span><br></pre></td></tr></tbody></table></figure> The default port for ssh is <strong>22</strong>. Please make sure this port is authorized by firewall. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> ufw <span class="literal">allow</span> <span class="number">22</span></span><br></pre></td></tr></tbody></table></figure> #### Solution for disconnect frequently When we connect a machine via ssh and don't input any commands for a while, the ssh connection will be disconnected because the pipe is broken. We have to reconnect it via ssh command, which is quite annoying and wasting time. There are method to make ssh connection keep longer time.<p></p>
<p>First, open the ssh config file using vim. </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>ssh/sshd_config</span><br></pre></td></tr></tbody></table></figure> And find the two lines: <figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#ClientAliveInterval 0</span></span><br><span class="line"><span class="meta">#ClientAliveCountMax 3</span></span><br></pre></td></tr></tbody></table></figure> Second, uncomment the two lines and set them as follows: <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">ClientAliveInterval</span> <span class="number">30</span> </span><br><span class="line"><span class="attribute">ClientAliveCountMax</span> <span class="number">86400</span></span><br></pre></td></tr></tbody></table></figure> <strong>ClientAliveInterval 30</strong> -- The client will send heartbeat data to the server every 30 seconds. <strong>ClientAliveCountMax 86400</strong> -- The server will broken the connection automatically after 86400 seconds that not received heartbeat signals from client. Third, restart the sshd service. <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">service sshd restart</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="scan-lan-ips">Scan LAN IPs</h3>
<p><em>nmap</em> is a tool scanning all the ips in a local network. </p><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">nmap</span></span><br><span class="line"><span class="keyword">nmap</span> -sP <span class="number">192.168</span>.<span class="number">1.0</span>/<span class="number">24</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="module-operation">Module Operation</h3>
<p><a href="https://wiki.archlinux.org/index.php/Kernel_module">Kernel modules</a> are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system.</p>
<p>To create a kernel module, you can read <a href="http://tldp.org/LDP/lkmpg/2.6/html/index.html">The Linux Kernel Module Programming Guide</a>. A module can be configured as built-in or loadable. To dynamically load or remove a module, it has to be configured as a loadable module in the kernel configuration. * Load A Module </p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo modprobe usbmon</span></span><br></pre></td></tr></tbody></table></figure> * Unload A Module <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo rmmod usbmon</span></span><br><span class="line"><span class="attribute">sudo modprobe -r usbmon</span></span><br></pre></td></tr></tbody></table></figure> * List Modules <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo lsmod</span></span><br></pre></td></tr></tbody></table></figure> * Print A Module's Information <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo modinfo usbmon</span></span><br></pre></td></tr></tbody></table></figure> ## Python ### pip #### Change Source Using the original source to install packages is usually slow and sometime it is unable to visit for users in China. We can change the source to speed the installation. * Create a configuration file <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.pip/</span><br><span class="line"><span class="built_in">cd</span> .pip</span><br><span class="line"><span class="built_in">touch</span> pip.conf</span><br></pre></td></tr></tbody></table></figure> * Change source Adding the target source url to the created configuration file. <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">sudo <span class="keyword">vi</span> pip.<span class="keyword">conf</span></span><br><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url = https://pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></tbody></table></figure> #### Install Package Using A Specified Source <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">pip install -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple matplotlib</span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="others">Others</h2>
<h3 id="list-contents-of-directories-in-a-tree-like-format.">List Contents of Directories in A Tree-Like Format.</h3>
<p><strong>Tree</strong> is a recursive directory listing program that produces a depth indented listing of files, which is colorized ala dircolors if the LS_COLORS environment variable is set and output is to tty. </p><figure class="highlight dos"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install <span class="built_in">tree</span></span><br><span class="line"><span class="built_in">tree</span></span><br><span class="line"><span class="built_in">tree</span> -d</span><br><span class="line"><span class="built_in">tree</span> -L <span class="number">1</span></span><br><span class="line"><span class="built_in">tree</span> -u</span><br></pre></td></tr></tbody></table></figure> ### DEP 2 RPM or RPM 2 DEP <strong>alien</strong> is a program that converts between Red Hat rpm, Debian deb, Stampede slp, Slackware tgz, and Solaris pkg file formats. If you want to use a package from another linux distribution than the one you have installed on your system, you can use alien to convert it to your preferred package format and install it. It also supports LSB packages. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> apt-get install alien</span><br><span class="line"><span class="attribute">sudo</span> alien toec-oep102d-<span class="number">1</span>.<span class="number">4</span>-<span class="number">4</span>.nd7.x86_64.rpm</span><br><span class="line"><span class="attribute">sudo</span> alien -r toec-oep102d_1.<span class="number">4</span>-<span class="number">5</span>_amd64.deb</span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Ubuntu</category>
        <category>Commands</category>
        <category>SSH</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>tree</tag>
        <tag>alien</tag>
        <tag>history</tag>
        <tag>wc</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Repair Grub and Restore Ubuntu</title>
    <url>/2019/12/07/Repair-Grub-and-Restore-Ubuntu/</url>
    <content><![CDATA[<html><head></head><body><p>For convenient, we sometimes install multiple operation systems on one computer, such as Windows 10, Ubuntu 16.04, and Ubuntu 18.04. These operation systems can be installed into different hard disks at different time. The existing Ubuntu's grub file will be overwritten during the installation of new operation system. When the installation failed or the new installed operation system broken, the grub file may be broken, which results in that the existing Ubuntu can not boot. Fortunately, there are methods to repair the broken grub file and restore the existing Ubuntu system. In this article, I will briefly introduce one useful method, which helps me to save my Ubuntu 16.04.</p>
<span id="more"></span>
<h2 id="problem">Problem</h2>
<p>When the grub file is broken, the following message will be prompted in terminal during booting. </p><figure class="highlight subunit"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">error </span>: unknow filesystem</span><br><span class="line">grub &gt;</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">If you see a similar message when you boot a ubuntu system, <span class="keyword">it</span> indicates <span class="keyword">that</span> <span class="keyword">the</span> operation system's grub <span class="built_in">file</span> was broken. You can use <span class="keyword">the</span> following method <span class="keyword">to</span> repair <span class="keyword">the</span> grub <span class="built_in">file</span>. I have tested <span class="keyword">that</span> this method <span class="keyword">is</span> valid.</span><br><span class="line"></span><br><span class="line"><span class="comment">## Solution </span></span><br><span class="line"></span><br><span class="line">* Check partition</span><br></pre></td></tr></tbody></table></figure> grub &gt; ls <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">We</span> will see <span class="literal">all</span> the partitions <span class="literal">on</span> disk.</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> (hd0) (hd0,gpt0) (hd0,gpt1) (hd0,gpt2) ... <figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">* Find <span class="keyword">the</span> root <span class="built_in">directory</span> <span class="keyword">of</span> Ubuntu </span><br><span class="line">List contents <span class="keyword">of</span> every partition <span class="keyword">until</span> we find <span class="keyword">the</span> root <span class="built_in">directory</span> <span class="keyword">of</span> <span class="keyword">the</span> Ubuntu <span class="keyword">system</span> we want <span class="built_in">to</span> restore.</span><br></pre></td></tr></tbody></table></figure> grub &gt; ls (hd0,gpt1)/ grub &gt; ls (hd0,gpt2)/ grub &gt; ls (hd0,gpt3)/ <figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">If we see <span class="keyword">the</span> following message, we find where <span class="keyword">the</span> root <span class="built_in">directory</span> is.</span><br></pre></td></tr></tbody></table></figure> grub &gt; ./ ../ tmp/ bin/ lib/ proc/ boot/ lib32/ root/ lib64/ run/ lost+found/ sbin/ usr/ media/ srv/ var/ dev/ mnt/ vmlinuz/ etc/ vmlinuz.old sys/ opt/ <figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">* <span class="keyword">Set</span> booting <span class="keyword">partition</span></span><br></pre></td></tr></tbody></table></figure> grub &gt; set root=(hd0,gpt3) grub &gt; set prefix=(hd0,gpt3)/boot/grub grub &gt; insmod normal grub &gt; normal <figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">The Ubuntu <span class="keyword">system</span> would booting successfully <span class="keyword">and</span> we can <span class="keyword">login</span> now.</span><br><span class="line"></span><br><span class="line">* <span class="keyword">Update</span> grub file</span><br></pre></td></tr></tbody></table></figure> sudo update-grub sudo grub-install /dev/sda reboot ``` If you could not repair the grub file and restore the Ubuntu operation system, please do not hesitate to leave a comment. Thank you very much.<p></p>
</body></html>]]></content>
      <categories>
        <category>Ubuntu</category>
        <category>Boot</category>
        <category>Grub</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Grub</tag>
        <tag>Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>An Intuitive Understanding of Entropy, Cross Entropy and Kullback Leibler Divergence</title>
    <url>/2019/12/04/An-Intuitive-Understanding-of-Kullback-Leibler-Divergence-and-Cross-Entropy/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://en.wikipedia.org/wiki/Information_theory">Information Theory</a> is initially proposed in a landmark paper <a href="https://en.wikipedia.org/wiki/A_Mathematical_Theory_of_Communication">A Mathematical Theory of Communication</a> published by <a href="https://en.wikipedia.org/wiki/Claude_Shannon">Claude Shannon</a>. One of the most important concepts in information theory is <a href="https://en.wikipedia.org/wiki/Entropy">Entropy</a>. It is used to describe the degree of disorder or uncertainty, which is analogous to the definition used in statistical thermodynamics. From the point view of probability, entropy evaluates how much information a probability distribution can carry. Based on the definition of entropy, people further proposed <a href="https://en.wikipedia.org/wiki/Cross_entropy">Cross Entropy</a> and <a href="https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence">Kullback Leibler (KL) Divergence</a> to address the issues of information analysis between two different probability distributions. They are good metric that could measure the similarity or distance between two probability distributions, therefore they are widely used in machine learning and deep learning. In this article, I want to provide you an intuitive understanding of entropy, cross entropy and kullback-leibler divergence.</p>
<span id="more"></span>
<h2 id="entropy">Entropy</h2>
<p>In the context of Information Theory, how to understand the definition of entropy, the degree of disorder or uncertainty? I try to present an intuitive explanation from the following several aspects. ### Probability, Certainty and Uncertainty In mathematics, a probability is defined to describe the chance an event will happen. The larger a probability is, the more chance an event will happen. And the more chance an event will happen, the more certainty an event is, correspondingly, the less uncertainty an event is. Define the probability of an event is <span class="math display">\[p\]</span>, then the certainty is <span class="math display">\[p\]</span> and the uncertainty is <span class="math display">\[\frac{1}{p}\]</span>. Note that <span class="math display">\[p=0\]</span> means that the uncertainty is infinity. A probability distribution describe the chances of a series of events will happen, which is more general in real world.</p>
<h3 id="information">Information</h3>
<p>What's the definition of information? There must be different definitions of information from different point of view. However, in my opinion, information is what we do not know or do not expect. For example, if we don't know how to use an device, then its instruction manual will give us the right information. What's the relationship between information and certainty from the point of view of probability? The more certainty an event is, the more information the event contains and the less extra information we need to clear the event's uncertainty. For example, assuming we live in a world that the probability of rainy day is 1, then we have all the information regarding to rainy probability and the weather forecast is useless in this scenario because we do not need extra information to clear the uncertainty of the rainy event. It is the same when we live in a world that the probability of rainy day is 0. As far as we can see, certainty is positively related to information. The larger the certainty of an event is, the more information that the event has and the less extra information we need to make it clear.</p>
<h3 id="uncertainty-and-entropy">Uncertainty and Entropy</h3>
<p>I believe you already understand the basic concepts of probability, certainty, uncertainty, information and their correlations with each other. Let's take another example to further explain their relationships with respect to uncertainty and entropy. If Jack tells us he lives in China. We can say that the probability he lives in South China is 0.5, North China is 0.5. The message Jack tells us has more uncertainty, and we need extra information to know whether he lives in South China or not. If Jack tells us he lives in Shanghai, the message Jack tells us has less uncertainty because we already know he lives in South China without extra information.</p>
<p>The extra information is what we called uncertainty. Information theory is proposed by Claude Shannon to address the issues how to efficiently communicate the extra information with others. In modern digital world, information theory address the issues of how many bits we need to clear the uncertainty when we communicate with others. As far as we know, one bit has two states 0 or 1. Therefore, we can use one bit to reduce the uncertainty by dividing 2. That is to say we can use the bits to measure the uncertainty. The more bits we need, the larger the uncertainty is.</p>
<p>For example, if the weather has two equal-probability events, rainy and sunny, each one has 0.5 probability to happen, then we can use 1 bit to clear the rainy event's uncertainty or sunny event's uncertainty. The value of the one bit is 1 means that the weather is rainy and 0 means that the weather is not rainy. The same is for sunny event. We can formulate the above conclusion as Eq. <span class="math inline">\(\eqref{eq1}\)</span>. <span class="math display">\[
\begin{equation}
\frac{1}{0.5}=2^1
\label{eq1}
\end{equation}
\]</span> The expected uncertainty (bit count) of the weather with two equal-probability events is <span class="math display">\[0.5*1 + 0.5*1 = 1\]</span>.</p>
<p>Similarly, if the weather has eight equal-probability events, each one has 0.125 probability to happen, then we can use 3 bit to clear the each event's uncertainty. We can formulate it as Eq. <span class="math inline">\(\eqref{eq2}\)</span>. <span class="math display">\[
\begin{equation}
\frac{1}{0.125}=2^3
\label{eq2}
\end{equation}
\]</span> The expected uncertainty (bits count) of the weather with eight equal-probability events is <span class="math display">\[\sum_{i=1}^{8}{0.125*3} = 3\]</span>.</p>
<p>In conclusion, if the probability of one event is <span class="math display">\[p\]</span>, then we can use Eg. <span class="math inline">\(\eqref{eq3}\)</span> compute the bits we need to clear the event's uncertainty. <span class="math display">\[
\begin{equation}
\frac{1}{p}=2^n
\label{eq3}
\end{equation}
\]</span> where <span class="math display">\[n=\log_{2}{\frac{1}{p}}\]</span> denotes the bit count.</p>
<p>If the weather has two nonequal-probability events, rainy event has 0.25 probability to happen and sunny event has 0.75 probability to happen, how many bits we need to clear the weather's uncertainty? We first compute the needed bits to clear the rainy event's uncertainty, as shown in Eg. <span class="math inline">\(\eqref{eq4}\)</span> <span class="math display">\[
\begin{equation}
n_{rainy}=\log_{2}{\frac{1}{0.25}}
\label{eq4}
\end{equation}
\]</span> Then we compute the needed bits to clear the sunny event's uncertainty, as shown in Eg. <span class="math inline">\(\eqref{eq5}\)</span> <span class="math display">\[
\begin{equation}
n_{sunny}=\log_{2}{\frac{1}{0.75}}
\label{eq5}
\end{equation}
\]</span> The expected uncertainty (bits count) of the weather is <span class="math display">\[0.25*n_{rainy} + 0.75*n_{sunny} \approx 0.81\]</span>.</p>
<p>In the context of Information Theory, Entropy is defined to evaluate the amount of extra information we need to clear the uncertainty of a series of events given its probability distribution. According to Eq. <span class="math inline">\(\eqref{eq3}\)</span>, <span class="math inline">\(\eqref{eq4}\)</span>, <span class="math inline">\(\eqref{eq5}\)</span>, we derive the mathematical formulation of entropy as Eg. <span class="math inline">\(\eqref{6}\)</span> <span class="math display">\[
\begin{equation}
H(P)=-\sum_{i}{p_{i}log_{2}{p_{i}}}
\label{eq6}
\end{equation}
\]</span> where <span class="math display">\[H(P)\]</span> denotes the entropy given <span class="math display">\[P\]</span> probability distribution.</p>
<p>Generally, we use <span class="math display">\[log\]</span> to replace <span class="math display">\[log_{2}\]</span>, we derive the general formulation of entropy as Eq. <span class="math inline">\(\eqref{eq7}\)</span>. <span class="math display">\[
\begin{equation}
H(P)=-\sum_{i}{p_{i}\log{p_{i}}}
\label{eq7}
\end{equation}
\]</span></p>
<h2 id="cross-entropy">Cross Entropy</h2>
<p>According to the preceding sections, we understand that entropy <span class="math display">\[H(P)\]</span> evaluates the degree of uncertainty of a probability distribution <span class="math display">\[P\]</span>. That is to say, it evaluates the distance in bits between the uncertain state formulated by a probability distribution and the corresponding certain state. Analogically, cross entropy evaluates the distance in bits between the uncertain state formulated by a probability distribution <span class="math display">\[Q\]</span> and the corresponding certain state, given a target probability distribution <span class="math display">\[P\]</span>. Eq. <span class="math inline">\(\eqref{eq8}\)</span> defines the cross entropy. <span class="math display">\[
\begin{equation}
H({P,\,Q}) =  - \sum_{i}{p_{i} \log{q_{i}}}
\label{eq8}
\end{equation}
\]</span> where <span class="math display">\[\log{q_{i}}\]</span> denotes the uncertainty (bits count) of each events formulated by the probability distribution <span class="math display">\[Q\]</span> and <span class="math display">\[p_{i}\]</span> denotes the target real probability distribution. Note that the cross entropy is an absolute entropy of probability distribution <span class="math display">\[Q\]</span> given probability distribution <span class="math display">\[P\]</span> because we use the absolute uncertainty <span class="math display">\[\log{q_{i}}\]</span> for each event. To some extent, it is similar to the conditional probability distribution. It measures the total bits we need to clear the uncertainty of probability distribution <span class="math display">\[Q\]</span>, given <span class="math display">\[P\]</span>.</p>
<h2 id="kullback-leibler-divergence">Kullback-Leibler Divergence</h2>
<p>Both entropy and cross entropy evaluate the total bits needed to clear the total uncertainty of a probability distribution. How much bits we need in order to make a probability distribution <span class="math display">\[Q\]</span> identical to the target one <span class="math display">\[P\]</span>. Kullback–Leibler Divergence is proposed to address this issue. It is a measurement of how one probability distribution <span class="math display">\[Q\]</span> is similar with a target probability distribution <span class="math display">\[P\]</span>. <span class="math display">\[
\begin{equation}
{D_{kl}}({p \| q }) = -\sum_{i = 0} {p_{i}[ {\log {q_{i}} - \log{p_{i}}}]}
\label{eq9}
\end{equation}
\]</span> Eq. <span class="math inline">\(\eqref{eq9}\)</span> defines the Kullback-Leibler Divergence.</p>
<p>The more common way to see Kullback-Leibler divergence written is as follows: <span class="math display">\[
\begin{equation}
{D_{kl}}({p \| q }) = -\sum_{i = 0} {p_{i}[ {\log\frac{q_{i}}{p_{i}}}]}
\label{eq10}
\end{equation}
\]</span></p>
<p>Kullback-Leibler divergence is a relative entropy of a probability distribution <span class="math display">\[Q\]</span> with respect to <span class="math display">\[P\]</span>. If <span class="math display">\[{D_{kl}}({p \| q })\]</span> is equal to <span class="math display">\[0\]</span>, then we can say that the probability distribution <span class="math display">\[Q\]</span> is identical to <span class="math display">\[P\]</span>.</p>
<p>Compare Eq. <span class="math inline">\(\eqref{eq9}\)</span>, <span class="math inline">\(\eqref{eq7}\)</span>, and <span class="math inline">\(\eqref{eq8}\)</span>, we can derive: <span class="math display">\[
\begin{equation}
{D_{kl}}( {P \| Q}) = H({P,\,Q}) - H(P)
\label{eq11}
\end{equation}
\]</span> From Eq. <span class="math inline">\(\eqref{eq11}\)</span>, we draw a conclusion that the cross entropy of <span class="math display">\[Q\]</span> and <span class="math display">\[P\]</span> is same with the entropy <span class="math display">\[P\]</span> when <span class="math display">\[{D_{kl}}({p \| q })\]</span> is equal to <span class="math display">\[0\]</span>.</p>
<p>In the context of machine learning and deep learning, cross entropy loss is a famous loss in solving classification problems, which we want the predicted probability distribution same as the real one. Eq. <span class="math inline">\(\eqref{eq11}\)</span> gives us a clear explanation why we can obtain the optimal solution by minimizing the cross entropy.</p>
<h3 id="properties">Properties</h3>
<ul>
<li>The Kullback–Leibler divergence is always non-negative. <span class="math display">\[
\begin{equation}
{D_{kl}}\left( {P\left\| Q \right.} \right) \ge 0
\end{equation}
\]</span></li>
<li>The Kullback–Leibler divergence does not conform to commutative law. <span class="math display">\[
\begin{equation}
{D_{kl}}\left( {P\left\| Q \right.} \right) \ne {D_{kl}}\left( {Q\left\| P \right.} \right)
\end{equation}
\]</span></li>
</ul>
<h2 id="references">References</h2>
<ul>
<li><a href="https://eranraviv.com/intuitive-explanation-of-entropy/">https://eranraviv.com/intuitive-explanation-of-entropy/</a></li>
<li><a href="https://math.stackexchange.com/questions/331103/intuitive-explanation-of-entropy">https://math.stackexchange.com/questions/331103/intuitive-explanation-of-entropy</a></li>
<li><a href="http://hanj.cs.illinois.edu/cs412/bk3/KL-divergence.pdf">http://hanj.cs.illinois.edu/cs412/bk3/KL-divergence.pdf</a></li>
<li><span class="citation" data-cites="cotra.marko/making-sense-of-the-kullback-leibler-kl-divergence-b0d57ee10e0a">[https://medium.com/@cotra.marko/making-sense-of-the-kullback-leibler-kl-divergence-b0d57ee10e0a]</span>(https://medium.com/<span class="citation" data-cites="cotra.marko/making-sense-of-the-kullback-leibler-kl-divergence-b0d57ee10e0a">@cotra.marko/making-sense-of-the-kullback-leibler-kl-divergence-b0d57ee10e0a</span>)</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Mathematics</category>
        <category>Deep Learning</category>
        <category>Probability</category>
        <category>Information Theory</category>
      </categories>
      <tags>
        <tag>Maths</tag>
        <tag>Probability</tag>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>PCL Tutorials - From Mathematics to Code Snippets</title>
    <url>/2019/12/10/PCL-Tutorials/</url>
    <content><![CDATA[<html><head></head><body><p>The <a href="http://www.pointclouds.org/">Point Cloud Library</a> (<a href="http://www.pointclouds.org/">PCL</a>) is a large scale, open project for point cloud processing. The PCL framework contains numerous state-of-the-art algorithms including filtering, feature estimation, surface reconstruction, registration, model fitting and segmentation. PCL is cross-platform, and has been successfully compiled and deployed on Linux, MacOS, Windows, and Android/iOS. To simplify development, PCL is split into a series of smaller code libraries, that can be compiled separately. This modularity is important for distributing PCL on platforms with reduced computational or size constraints. In this article, I will provide a series of tutorials of how to use a variety of PCL modules to process point cloud data, which could help you to quickly build, verify, and deploy new 3D perception algorithms.</p>
<span id="more"></span>
<h2 id="io">IO</h2>
<h3 id="load-pcd-files">Load PCD Files</h3>
<h3 id="save-pcd-files">Save PCD Files</h3>
<h2 id="visualization">Visualization</h2>
<p>There are multiple visualization tools in PCL, of which <a href="http://docs.pointclouds.org/trunk/classpcl_1_1visualization_1_1_p_c_l_visualizer.html">PCLVisualizer</a> is a powerful one. It is developed based on VTK and it provides many useful customization interfaces, which is the main reason I prefer to use it. ### Basic Usage </p><figure class="highlight zephir"><table><tbody><tr><td class="code"><pre><span class="line">#include &lt;pcl/io/pcd_io.h&gt;</span><br><span class="line">#include &lt;pcl/point_types.h&gt;</span><br><span class="line">#include &lt;pcl/visualization/pcl_visualizer.h&gt;</span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span><br><span class="line">{</span><br><span class="line">    std::string file_path(<span class="string">"../data/demo.pcd"</span>);</span><br><span class="line"></span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt;::Ptr cloud(<span class="keyword">new</span> pcl::PointCloud&lt;pcl::PointXYZ&gt;);</span><br><span class="line">    <span class="keyword">if</span>(pcl::io::loadPCDFile&lt;pcl::PointXYZ&gt;(file_path, *cloud) == <span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        std::cout &lt;&lt; <span class="string">"Could not load the PCD file: "</span> &lt;&lt; file_path &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    boost::shared_ptr&lt;pcl::visualization::PCLVisualizer&gt; viewer(<span class="keyword">new</span> pcl::visualization::PCLVisualizer(<span class="string">"PCD Viewer"</span>));</span><br><span class="line">    viewer-&gt;setBackgroundColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    viewer-&gt;addCoordinateSystem(<span class="number">1.0</span>);</span><br><span class="line">    viewer-&gt;initCameraParameters();</span><br><span class="line">    viewer-&gt;addPointCloud&lt;pcl::PointXYZ&gt;(cloud, file_path);</span><br><span class="line">    viewer-&gt;setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, <span class="number">2</span>, file_path);</span><br><span class="line">    viewer-&gt;setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_OPACITY, <span class="number">1.0</span>, file_path);</span><br><span class="line">    viewer-&gt;spin();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> ### Customization #### Add &amp; Remove PointCloud <figure class="highlight xl"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">viewer</span>-&gt;</span>addPointCloud&lt;pcl::PointXYZ&gt;(cloud, file_path);</span><br><span class="line"><span class="function"><span class="title">viewer</span>-&gt;</span>removePointCloud(file_path)</span><br></pre></td></tr></tbody></table></figure> #### Add Coordinate <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">viewer</span>-&gt;addCoordinateSystem(<span class="number">1</span>.<span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure> Note that the color of the added coordinate system is red, green, and blue. Red axis represents x direction. Green axis represents y direction. And Blue axis represents z direction.<p></p>
<h4 id="set-point-size">Set Point Size</h4>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">viewer-&gt;set<span class="constructor">PointCloudRenderingProperties(<span class="params">pcl</span>::<span class="params">visualization</span>::PCL_VISUALIZER_POINT_SIZE, 2, <span class="params">file_path</span>)</span>;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="set-opacity">Set Opacity</h4>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">viewer-&gt;set<span class="constructor">PointCloudRenderingProperties(<span class="params">pcl</span>::<span class="params">visualization</span>::PCL_VISUALIZER_OPACITY, 1.0, <span class="params">file_path</span>)</span>;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="set-point-color">Set Point Color</h4>
<figure class="highlight rust"><table><tbody><tr><td class="code"><pre><span class="line">pcl::visualization::PointCloudColorHandlerCustom&lt;pcl::PointXYZ&gt; <span class="title function_ invoke__">x_color</span>(cloud_x, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">viewer_x<span class="punctuation">-&gt;</span>addPointCloud&lt;pcl::PointXYZ&gt;(cloud_x, x_color, <span class="string">"cloud_x"</span>);</span><br></pre></td></tr></tbody></table></figure>
<h3 id="mouse-event">Mouse Event</h3>
<h3 id="keyboard-event">Keyboard Event</h3>
<h2 id="filters">Filters</h2>
<h3 id="passthrough">PassThrough</h3>
<p><a href="http://docs.pointclouds.org/1.8.0/classpcl_1_1_pass_through.html#details">PassThrough</a> is a simple but useful filter that select points in a point cloud based on the limit intervals on one dimensional axis. It iterates through the entire input point cloud, automatically filtering non-finite points and the points outside the interval specified by <strong>setFilterLimits()</strong>, which applies only to the field specified by <strong>setFilterFieldName()</strong>. </p><figure class="highlight lasso"><table><tbody><tr><td class="code"><pre><span class="line">pcl<span class="type">::PointCloud</span>&lt;pcl<span class="type">::PointXYZ</span>&gt;<span class="type">::Ptr</span> cloud (<span class="literal">new</span> pcl<span class="type">::PointCloud</span>&lt;pcl<span class="type">::PointXYZ</span>&gt;);</span><br><span class="line">pcl<span class="type">::PointCloud</span>&lt;pcl<span class="type">::PointXYZ</span>&gt;<span class="type">::Ptr</span> cloud_x (<span class="literal">new</span> pcl<span class="type">::PointCloud</span>&lt;pcl<span class="type">::PointXYZ</span>&gt;);</span><br><span class="line">pcl<span class="type">::PointCloud</span>&lt;pcl<span class="type">::PointXYZ</span>&gt;<span class="type">::Ptr</span> cloud_xy (<span class="literal">new</span> pcl<span class="type">::PointCloud</span>&lt;pcl<span class="type">::PointXYZ</span>&gt;);</span><br><span class="line">pcl<span class="type">::PointCloud</span>&lt;pcl<span class="type">::PointXYZ</span>&gt;<span class="type">::Ptr</span> cloud_xyz (<span class="literal">new</span> pcl<span class="type">::PointCloud</span>&lt;pcl<span class="type">::PointXYZ</span>&gt;);</span><br><span class="line"><span class="comment">// code to load pcd</span></span><br><span class="line"></span><br><span class="line">pcl<span class="type">::PassThrough</span>&lt;pcl<span class="type">::PointXYZ</span>&gt; pass;</span><br><span class="line"><span class="comment">// select points in x direction</span></span><br><span class="line">pass.setInputCloud (cloud);</span><br><span class="line">pass.setFilterFieldName(<span class="string">"x"</span>);</span><br><span class="line">pass.setFilterLimits(<span class="number">-1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">pass.filter (*cloud_x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// select points in y direction</span></span><br><span class="line">pass.setInputCloud(cloud_x);</span><br><span class="line">pass.setFilterFieldName(<span class="string">"y"</span>);</span><br><span class="line">pass.setFilterLimits(<span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">pass.filter (*cloud_xy);</span><br><span class="line"></span><br><span class="line"><span class="comment">// select points in z direction</span></span><br><span class="line">pass.setInputCloud(cloud_xy);</span><br><span class="line">pass.setFilterFieldName(<span class="string">"z"</span>);</span><br><span class="line">pass.setFilterLimits(<span class="number">-1.5</span>, <span class="number">-0.5</span>);</span><br><span class="line">pass.filter (*cloud_xyz);</span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="segmentation">Segmentation</h2>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Point Cloud Library</category>
        <category>Perception</category>
        <category>3D</category>
      </categories>
      <tags>
        <tag>Point Cloud Library</tag>
        <tag>Tutorials</tag>
        <tag>PCL</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 Installation and Development Environment Setups</title>
    <url>/2019/12/07/Ubuntu-19-04-Installation-and-Development-Environment-Setups/</url>
    <content><![CDATA[<html><head></head><body><p>In this article, I will show the detailed installation and configuration of Ubuntu 18.04 step by step using command lines. The development environment contains OpenCV, PCL, CUDA, Tensorflow, and so on, which is suitable for computer vision and deep learning scientific researchers and engineers. <span id="more"></span> ## Installation</p>
<h3 id="make-installation-image">Make Installation Image</h3>
<ul>
<li>Download ISO file First, download the original Ubuntu 18.04 ISO file from Internet. If you come from China, I recommend you to visit the famous <a href="https://mirrors.163.com/">open source mirror</a> maintained by NetEase, which is fast and stable. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">https</span>://mirrors.<span class="number">163</span>.com/ubuntu-releases/<span class="number">18</span>.<span class="number">04</span>.<span class="number">3</span>/ubuntu-<span class="number">18</span>.<span class="number">04</span>.<span class="number">3</span>-desktop-amd64.iso</span><br></pre></td></tr></tbody></table></figure></li>
<li>Make USB installation image UltraISO is a good tool to make an installation image using a USB Storage. We can do this job on Windows.</li>
</ul>
<h3 id="install">Install</h3>
<ul>
<li><p>Choose boot from USB in BIOS</p></li>
<li><p>Install</p></li>
<li><p>Disk Partition Generally, <strong>default partition configuration</strong> is recommended, but we can still do partition by ourselves. I prefer to use the following partition configuration according to my experience, which could manage and use the storage space efficiently. Primary partitions hold the operating system files and can be made “Active” partition to boot the computer from. For a Linux operation system, a maximum of 4 primary partitions can be created, or 3 primary and an extended partitions. Logical partitions are created under the extended partition. Logical partitions can be resized or repartitioned by mounting/unmounting it within Linux. </p><figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">1.</span> efi   <span class="number">200</span>Mb, <span class="keyword">primary</span> <span class="keyword">partition</span></span><br><span class="line"><span class="number">2.</span> boot  <span class="number">500</span>Mb, <span class="keyword">primary</span> <span class="keyword">partition</span>, store the <span class="keyword">system</span> kernels <span class="keyword">and</span> boot files</span><br><span class="line"><span class="number">3.</span> SWAP  <span class="number">16</span>Gb,  swap area, virtual memory, the size <span class="keyword">is</span> usually same <span class="keyword">with</span> memory</span><br><span class="line"><span class="number">4.</span> /     <span class="number">64</span>Gb,  <span class="keyword">primary</span> <span class="keyword">partition</span></span><br><span class="line"><span class="number">5.</span> /home rest,  logical <span class="keyword">partition</span> </span><br></pre></td></tr></tbody></table></figure> ## Setups ### Change apt source<p></p></li>
<li><p>Using shortcuts <strong>super+a</strong> to open <strong>Show Applications</strong></p></li>
<li><p>Open <strong>Software &amp; Updates</strong></p></li>
<li><p>Set <strong>Download from</strong> as <strong>http://mirrors.cn99.com/ubuntu</strong> ### Update &amp; Upgrade </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> update</span><br><span class="line">sudo apt-<span class="built_in">get</span> upgrade</span><br></pre></td></tr></tbody></table></figure> It would takes several minutes for first update &amp; upgrade. The time depends on your network bandwidth. ### Setup Chinese Input Method<p></p></li>
<li><p>Using shortcuts <strong>super+a</strong> to open <strong>Language Support</strong> If you open <strong>Language Support</strong> for first time, it will prompt "The language support is not installed completely". We choose the <strong>install</strong> option.</p></li>
<li><p>Click <strong>Install/Remove Languages</strong> and make sure <em>Chinese (simplified)</em> is selected.</p></li>
<li><p>Install ibus </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install ibus ibus-clutter ibus-gtk ibus-gtk3</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>Install pinyin and setup </p><figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install ibus-pinyin</span><br><span class="line">sudo reboot (optional, we can <span class="built_in">do</span> <span class="keyword">it</span> latter)</span><br><span class="line">ibus-setup</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>Choose intelligent pinyin </p><figure class="highlight pf"><table><tbody><tr><td class="code"><pre><span class="line">System Settings &gt; Region &amp; Language &gt; Input Sources</span><br><span class="line">Pinyin Preferences &gt; Initial <span class="keyword">state</span> &gt; English</span><br></pre></td></tr></tbody></table></figure> ### Install Mendeley <a href="https://www.mendeley.com/?interaction_required=true">Mendeley</a> is a cross-platform paper management tool. It offers free cloud service that could synchronize papers between different devices in one account. <a href="https://www.mendeley.com/guides/download-mendeley-desktop/ubuntu/instructions">Download Mendeley</a> <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> chmod +x mendeleydesktop_1.<span class="number">19</span>.<span class="number">4</span>-stable_amd64.deb</span><br><span class="line"><span class="attribute">sudo</span> dpkg -i mendeleydesktop_1.<span class="number">19</span>.<span class="number">4</span>-stable_amd64.deb</span><br></pre></td></tr></tbody></table></figure> ### Install ZSH<p></p></li>
<li><p>Install git, curl and zsh </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install git</span><br><span class="line">sudo apt-<span class="built_in">get</span> install curl</span><br><span class="line">sudo apt-<span class="built_in">get</span> install zsh</span><br><span class="line">zsh --version</span><br><span class="line">sudo reboot</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>Config your global email and name for git </p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">"zhaoyongsheng@zju.edu.cn"</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">"Alex"</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>Install oh-my-zsh </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ul>
<h3 id="install-tmux">Install tmux</h3>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install tmux</span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-ssh">Install ssh</h3>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install ssh</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-zeal">Install zeal</h3>
<figure class="highlight smali"><table><tbody><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:zeal-developers/ppa (deprecated)</span><br><span class="line">sudo apt-get update (deprecated)</span><br><span class="line">sudo apt-get install zeal</span><br></pre></td></tr></tbody></table></figure>
<p>Visit <a href="http://zealusercontributions.herokuapp.com">Offline Docsets</a> and add more docsets such as tensorflow, zsh, and so on. ### Install Java Runtime Environment When we using <strong>LibreOffice</strong> from terminal, we will see the following warnings. </p><figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">javaldx: </span>Could not find a <span class="keyword">Java </span>Runtime Environment!</span><br><span class="line">Please ensure that a <span class="keyword">JVM </span><span class="keyword">and </span>the package libreoffice-<span class="keyword">java-common</span></span><br><span class="line"><span class="keyword"></span>is <span class="keyword">installed.</span></span><br></pre></td></tr></tbody></table></figure> We can fix it by installing java runtime environment. <figure class="highlight actionscript"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install <span class="keyword">default</span>-jre libreoffice-java-common</span><br></pre></td></tr></tbody></table></figure> ### Install gcc and cmake <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install gcc</span><br><span class="line">sudo apt-<span class="built_in">get</span> install cmake</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="install-vscode-and-sync">Install vscode and sync</h3>
<ul>
<li>Install vscode <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">curl https:<span class="regexp">//</span>packages.microsoft.com<span class="regexp">/keys/mi</span>crosoft.asc | gpg --dearmor &gt; packages.microsoft.gpg</span><br><span class="line">sudo install -o root -g root -m <span class="number">644</span> packages.microsoft.gpg <span class="regexp">/usr/</span>share<span class="regexp">/keyrings/</span></span><br><span class="line">sudo sh -c <span class="string">'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" &gt; /etc/apt/sources.list.d/vscode.list'</span></span><br><span class="line">sudo apt-get install apt-transport-https</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install code</span><br></pre></td></tr></tbody></table></figure></li>
<li>Synchronize setups First, add ssh-key to Github and make sure ssh connection from your pc to your github account is valid. <figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">From</span> the <span class="string">'Command Palette'</span> (Ctrl+Shift+P), <span class="keyword">type</span> Extensions: Install Extensions, <span class="keyword">and</span> install <span class="string">'Settings Sync'</span></span><br><span class="line"><span class="keyword">Login</span> <span class="keyword">With</span> Github</span><br><span class="line"><span class="keyword">From</span> the <span class="string">'Command Palette'</span> (Ctrl+Shift+P), <span class="keyword">input</span> Command: sync: Download Settings</span><br></pre></td></tr></tbody></table></figure></li>
<li>Set font size <figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"editor.fontSize"</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"window.zoomLevel"</span><span class="punctuation">:</span> <span class="number">2.0</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="setup-terminals">Setup terminals</h3>
<figure class="highlight maxima"><table><tbody><tr><td class="code"><pre><span class="line">Preferences &gt; unamed &gt; Colors &gt; Choose Green on black theme &gt; Change Background <span class="built_in">color</span> to #<span class="number">1B7491</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="hide-top-bar-caffeine">Hide top bar &amp; Caffeine</h3>
<figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">install </span>chrome-gnome-<span class="keyword">shell</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">Preferences </span>(Open Menu) -&gt; <span class="keyword">Add-ons </span>(Ctrl+<span class="keyword">Shift+A), </span><span class="keyword">and </span><span class="keyword">install </span><span class="string">'GNOME Shell integration'</span> <span class="keyword">extension </span>in Firefox</span><br><span class="line">Open <span class="string">'GNOME Shell integration'</span> website <span class="keyword">extension </span>in Firefox</span><br><span class="line">Search hide top <span class="keyword">bar </span><span class="keyword">and </span>choose ON</span><br><span class="line">Search caffeine <span class="keyword">and </span>choose ON</span><br></pre></td></tr></tbody></table></figure>
<h3 id="setup-screenshot-shortcut">Setup Screenshot Shortcut</h3>
<p><strong>gnome-screenshot</strong> is a build-in screenshot tool for Ubuntu 18.04. </p><figure class="highlight xl"><table><tbody><tr><td class="code"><pre><span class="line">S<span class="function"><span class="title">ettings</span> -&gt;</span> D<span class="function"><span class="title">evices</span> -&gt;</span> K<span class="function"><span class="title">eyboard</span> -&gt;</span> Add custom shortcut</span><br></pre></td></tr></tbody></table></figure> <img data-src="/2019/12/07/Ubuntu-19-04-Installation-and-Development-Environment-Setups/gnome-screenshot.png"><p></p>
<h3 id="install-tensorflow-gpu-2.0">Install tensorflow-gpu 2.0</h3>
<ul>
<li><p>Install GPU driver </p><figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">Open</span> <span class="string">'Softwares &amp; Updates'</span> -&gt; Additional Drivers</span><br><span class="line">Choose suitable driver <span class="keyword">version</span> <span class="keyword">and</span> install</span><br></pre></td></tr></tbody></table></figure> <img data-src="/2019/12/07/Ubuntu-19-04-Installation-and-Development-Environment-Setups/nvidia-driver.png"><p></p></li>
<li><p>Check Driver Version and CUDA version </p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">nvidia-smi</span></span><br></pre></td></tr></tbody></table></figure> <img data-src="/2019/12/07/Ubuntu-19-04-Installation-and-Development-Environment-Setups/nvidia-smi.png"><p></p></li>
<li><p>Install CUDA</p></li>
</ul>
<p>Go to Nvidia Developer <a href="https://developer.nvidia.com/cuda-toolkit-archive">CUDA Toolkit Archive</a> download <strong>cuda_11.0.3_450.51.06_linux.run</strong> and go to <a href="https://developer.nvidia.com/rdp/cudnn-archive">cuDNN Archive</a> <strong>cudnn-11.0-linux-x64-v8.0.5.39.tgz</strong> </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo ./cuda_11.0.3_450.51.06_linux.run <span class="comment">## install without driver option</span></span><br><span class="line">tar -xzf cudnn-*</span><br><span class="line"><span class="built_in">cd</span> cuda/lib64</span><br><span class="line">sudo <span class="built_in">cp</span> ** /usr/local/cuda-11.0/lib64</span><br><span class="line"><span class="built_in">cd</span> ../include</span><br><span class="line">sudo <span class="built_in">cp</span> cudnn.h /usr/local/cuda-10.0/include</span><br><span class="line">sudo apt-get install nvidia-driver-418 (deprecated)</span><br><span class="line">sudo modprobe nvidia (deprecated)</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda-11.0/bin<span class="variable">${PATH:+:<span class="variable">${PATH}</span>}</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-11.0/lib64<span class="variable">${LD_LIBRARY_PATH:+:<span class="variable">${LD_LIBRARY_PATH}</span>}</span></span><br><span class="line">nvidia-smi</span><br><span class="line">nvcc -V</span><br></pre></td></tr></tbody></table></figure><p></p>
<ul>
<li><p>Install pip Using Python 3.6.9 as default python </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">sudo rm <span class="regexp">/usr/</span>bin/python</span><br><span class="line">sudo ln -s <span class="regexp">/usr/</span>bin<span class="regexp">/python3 /u</span>sr<span class="regexp">/bin/</span>python</span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line">sudo ln -s <span class="regexp">/usr/</span>bin<span class="regexp">/pip3 /u</span>sr<span class="regexp">/bin/</span>pip</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">pip list</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>Set pip source</p>
<ul>
<li>清华源 https://pypi.tuna.tsinghua.edu.cn/simple</li>
<li>阿里源 https://mirrors.aliyun.com/pypi/simple/</li>
<li>腾讯源 http://mirrors.cloud.tencent.com/pypi/simple</li>
<li>豆瓣源 http://pypi.douban.com/simple/</li>
</ul></li>
</ul>
<figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.pip</span><br><span class="line"><span class="keyword">cd</span> ~/.pip</span><br><span class="line">touch pip.<span class="keyword">conf</span></span><br><span class="line">sudo gedit pip.<span class="keyword">conf</span></span><br><span class="line">[<span class="keyword">global</span>]</span><br><span class="line"><span class="built_in">index</span>-url = https://pypi.tuna.tsinghua.edu.<span class="keyword">cn</span>/simple</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>Install tensorflow-gpu Tensorflow 2.0 package requires pip version &gt; 19.0. <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">pip install tensorflow-gpu==<span class="number">2.2</span></span><br><span class="line">sudo ln -s <span class="regexp">/usr/</span>local<span class="regexp">/cuda-11.0/</span>lib64<span class="regexp">/libcudnn.so /u</span>sr<span class="regexp">/local/</span>cuda-<span class="number">11.0</span><span class="regexp">/lib64/</span>libcudnn.so.<span class="number">7</span></span><br><span class="line">sudo ln -s <span class="regexp">/usr/</span>local<span class="regexp">/cuda-11.0/</span>lib64<span class="regexp">/libcudart.so /u</span>sr<span class="regexp">/local/</span>cuda-<span class="number">11.0</span><span class="regexp">/lib64/</span>libcudart.so.<span class="number">10.1</span></span><br><span class="line">sudo ln -s <span class="regexp">/usr/</span>local<span class="regexp">/cuda-11.0/</span>lib64<span class="regexp">/libcublas.so /u</span>sr<span class="regexp">/local/</span>cuda-<span class="number">11.0</span><span class="regexp">/lib64/</span>libcublas.so.<span class="number">10</span></span><br><span class="line">sudo ln -s <span class="regexp">/usr/</span>local<span class="regexp">/cuda-11.0/</span>lib64<span class="regexp">/libcusparse.so /u</span>sr<span class="regexp">/local/</span>cuda-<span class="number">11.0</span><span class="regexp">/lib64/</span>libcusparse.so.<span class="number">10</span></span><br></pre></td></tr></tbody></table></figure> Test is GPU available <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">python</span></span><br><span class="line">import tensorflow <span class="keyword">as</span> <span class="keyword">tf</span></span><br><span class="line"><span class="keyword">tf</span>.test.is_gpu_available()</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="install-teamviewer">Install Teamviewer</h3>
<p>Go to Teamviewer official website and download <strong>teamviewer_xx_amd64.deb</strong>. </p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">sudo dpkg -<span class="selector-tag">i</span> teamviewer_xx_amd64<span class="selector-class">.deb</span></span><br><span class="line">sudo apt-get <span class="attr">--fix-broken</span> install</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="install-x2goclient">Install x2goclient</h3>
<figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">add</span>-repository <span class="keyword">pp</span><span class="variable">a:x2go</span>/stable</span><br><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install x2goclient</span><br></pre></td></tr></tbody></table></figure>
<h3 id="setup-vim">Setup vim</h3>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">touch .vimrc</span><br><span class="line">vi .vimrc</span><br><span class="line"><span class="built_in">set</span> nocompatible</span><br><span class="line"><span class="built_in">set</span> <span class="attribute">backspace</span>=2</span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-pcl">Install pcl</h3>
<p>Ubuntu 18.04 supports installation of pcl using apt-get, which is different with Ubuntu 16.04. </p><figure class="highlight q"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libpcl-<span class="built_in">dev</span></span><br></pre></td></tr></tbody></table></figure> Eigen 3.3.4, vtk 6.3, boost 1.65.1, libopenni 1.5.4.0, libopenni2 2.2.0.3 are installed at the same time.<p></p>
<h3 id="install-glog">Install glog</h3>
<p><a href="FindGlog.cmake">Download FindGlog.cmake</a> </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install libgoogle-glog-dev</span><br><span class="line">sudo cp FindGlog.cmake <span class="regexp">/usr/</span>share<span class="regexp">/cmake-3.10/</span>Modules</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="install-tinyxml-1-2">Install tinyxml 1 &amp; 2</h3>
<figure class="highlight q"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libtinyxml2-<span class="built_in">dev</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install libtinyxml-<span class="built_in">dev</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-ceres">Install ceres</h3>
<figure class="highlight q"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libceres-<span class="built_in">dev</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-opencv">Install opencv</h3>
<figure class="highlight q"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libopencv-<span class="built_in">dev</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-gtest">Install gtest</h3>
<figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libgtest-dev</span><br><span class="line"><span class="keyword">cd</span> /usr/src/gtest</span><br><span class="line">sudo <span class="built_in">mkdir</span> build</span><br><span class="line"><span class="keyword">cd</span> build</span><br><span class="line">sudo cmake ..</span><br><span class="line">sudo <span class="keyword">make</span> install</span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-zbar">Install Zbar</h3>
<p><a href="FindZbar.cmake">Download FindZbar.cmake</a> </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install libzbar-dev</span><br><span class="line">sudo cp FindZbar.cmake <span class="regexp">/usr/</span>share<span class="regexp">/cmake-3.10/</span>Modules</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="fix-system-program-problem-detected.">Fix "System program problem detected."</h3>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">sudo rm <span class="regexp">/var/</span>crash/*</span><br><span class="line">sudo vi <span class="regexp">/etc/</span>default/apport</span><br><span class="line">enable=<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-spinnaker">Install Spinnaker</h3>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libusb-dev</span><br><span class="line">sudo apt-<span class="built_in">get</span> install libgtkmm-2.4-dev</span><br><span class="line">sudo apt-<span class="built_in">get</span> install libavcodec57</span><br><span class="line">sudo apt-<span class="built_in">get</span> install libavformat57</span><br><span class="line">sudo apt-<span class="built_in">get</span> install libswscale4</span><br><span class="line">sudo apt-<span class="built_in">get</span> install libswresample2</span><br><span class="line">sudo apt-<span class="built_in">get</span> install libavutil55</span><br><span class="line">sudo sh install_spinnaker.s</span><br><span class="line">sudo apt-<span class="built_in">get</span> install libudev-dev</span><br><span class="line">sudo apt-<span class="built_in">get</span> install libssl-dev</span><br></pre></td></tr></tbody></table></figure>
<h4 id="fix-warning-libcrypto.so.1.1">Fix Warning: libcrypto.so.1.1</h4>
<p>Due to the version of openssl, we may meet a warning when compile as follows: </p><figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">/usr/bin/ld: <span class="built_in">warning</span>: libcrypto.so<span class="number">.1</span><span class="number">.1</span>, needed <span class="keyword">by</span> //usr/lib/x86_64-linux-gnu/libgdcmCommon.so<span class="number">.2</span><span class="number">.8</span>, may <span class="keyword">conflict</span> <span class="keyword">with</span> libcrypto.so<span class="number">.1</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></tbody></table></figure> We can fix it using the following command. <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install libssl1.<span class="number">1</span></span><br><span class="line">sudo rm <span class="regexp">/usr/</span>lib<span class="regexp">/x86_64-linux-gnu/</span>libcrypto.so</span><br><span class="line">sudo ln -s <span class="regexp">/usr/</span>lib<span class="regexp">/x86_64-linux-gnu/</span>libcrypto.so.<span class="number">1.1</span> <span class="regexp">/usr/</span>lib<span class="regexp">/x86_64-linux-gnu/</span>libcrypto.so</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="manage-boot-options">Manage Boot Options</h3>
<p>If there are multiple operations, we can delete other operation systems booting options in the current Ubuntu 18.04. </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">sudo vi <span class="regexp">/boot/g</span>rub/grub.cfg</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="install-qt">Install QT</h3>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install qt5-default</span><br><span class="line">sudo apt-<span class="built_in">get</span> install qtcreator</span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-websocketpp">Install websocketpp</h3>
<figure class="highlight q"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libwebsocketpp-<span class="built_in">dev</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-unrar">Install unrar</h3>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install unrar</span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-wireshark">Install wireshark</h3>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install wireshark</span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-vlc">Install vlc</h3>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install vlc</span><br></pre></td></tr></tbody></table></figure>
<h3 id="install-meld">Install meld</h3>
<p><em>meld</em> is a useful file and directory compare tool in Linux, similar with <em>beyondcompare</em> in Windows. </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install meld</span><br></pre></td></tr></tbody></table></figure> ### Install python3-tk <em>python3-tk</em> fix the bug of none-GUI backend of matplotlib <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install python3-tk</span><br></pre></td></tr></tbody></table></figure> ### Install xchm <em>xchm</em> can view chm files in Ubuntu. <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install xchm</span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Ubuntu</category>
        <category>Installation</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Installation</tag>
        <tag>Setups</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow Tutorials - Learning Notes for Beginners</title>
    <url>/2020/02/26/Tensorflow-Learning-Notes/</url>
    <content><![CDATA[<html><head></head><body><p>Tensorflow is a popular end to end deep learning platform developed and maintained by google. It has a whole ecosystem from prototype verification to model deployment. It integrates high level Keras API which could let us build and train models quickly and easily. Besides, it also has low level APIs, which enable us to custom model conveniently. Tensorflow is welcome to researchers and engineers since it is released and thus is widely used in both scientific research and industrial applications. Many state-of-the-art works had published open sources in Tensorflow. In this article, I will write down the key notes during learning Tensorflow.</p>
<span id="more"></span>
<h3 id="basic-usage">Basic Usage</h3>
<h4 id="tf.name_scope">tf.name_scope</h4>
<p>This context manager pushes a name scope, which will make the name of all operations added within it have a prefix. </p><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">def my<span class="constructor">_op(<span class="params">a</span>, <span class="params">b</span>, <span class="params">c</span>, <span class="params">name</span>=None)</span>:</span><br><span class="line">  <span class="keyword">with</span> tf.name<span class="constructor">_scope(<span class="string">"MyOp"</span>)</span> <span class="keyword">as</span> scope:</span><br><span class="line">    a = tf.convert<span class="constructor">_to_tensor(<span class="params">a</span>, <span class="params">name</span>=<span class="string">"a"</span>)</span></span><br><span class="line">    b = tf.convert<span class="constructor">_to_tensor(<span class="params">b</span>, <span class="params">name</span>=<span class="string">"b"</span>)</span></span><br><span class="line">    c = tf.convert<span class="constructor">_to_tensor(<span class="params">c</span>, <span class="params">name</span>=<span class="string">"c"</span>)</span></span><br><span class="line">    # Define some computation that uses `a`, `b`, <span class="keyword">and</span> `c`.</span><br><span class="line">    return foo<span class="constructor">_op(<span class="operator">...</span>, <span class="params">name</span>=<span class="params">scope</span>)</span></span><br></pre></td></tr></tbody></table></figure> #### tf.expand_dims Returns a tensor with an additional dimension inserted at index axis. <figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line">t = <span class="string">[[1, 2, 3],[4, 5, 6]]</span> # shape [<span class="number">2</span>, <span class="number">3</span>] </span><br><span class="line">tf.expand_dims(t, <span class="number">0</span>) </span><br><span class="line">tf.expand_dims(t, <span class="number">-1</span>) # Last dimension index. In this case, same as <span class="number">2.</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="tf.squeeze">tf.squeeze</h4>
<p>Removes dimensions of size 1 from the shape of a tensor. </p><figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 't' is a tensor of shape [1, 2, 1, 3, 1, 1]</span></span><br><span class="line">tf.<span class="keyword">shape(tf.squeeze(t)) </span> <span class="comment"># [2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 't' is a tensor of shape [1, 2, 1, 3, 1, 1]</span></span><br><span class="line">tf.<span class="keyword">shape(tf.squeeze(t, </span>[<span class="number">2</span>, <span class="number">4</span>]))  <span class="comment"># [1, 2, 3, 1]</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="tf.repeat">tf.repeat</h4>
<p>The operation repeats the elements in a tensor along a specified axis. </p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">x</span> = tf.Variable(tf.random_normal(shape=(<span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>)))</span><br><span class="line"><span class="attribute">repeats</span> =<span class="meta"> [2, 3]</span></span><br><span class="line"><span class="attribute">y</span> = tf.repeat(x, repeats=repeats, axis=<span class="number">0</span>) # y.shape=(<span class="number">5</span>(<span class="number">2</span>+<span class="number">3</span>), <span class="number">6</span>, <span class="number">3</span>)</span><br><span class="line"><span class="attribute">repeats</span> =<span class="meta"> [2, 3, 4]</span></span><br><span class="line"><span class="attribute">y</span> = tf.repeat(x, repeats=repeats, axis=<span class="number">2</span>) # y.shape=(<span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>(<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>))</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="tf.matmul">tf.matmul</h4>
<p>In math, matrix multiplication are defined for 2-D matrix. The tf.matmul also follows this law in Tensorflow. Moreover, tf.matmul supports matrix multiplication for matrix which rank &gt; 2. In this case, tf.matmul just slice the most inner 2 dimension of the matrix to do normal matrix multiplication operation and treat other outer dimensions as batch dimensions. For example, C's shape is (a, b, n, k) in the following operation. </p><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">A = tf.<span class="constructor">Variable(<span class="params">tf</span>.<span class="params">random_normal</span>(<span class="params">shape</span>=(<span class="params">a</span>, <span class="params">b</span>, <span class="params">n</span>, <span class="params">m</span>)</span>))</span><br><span class="line">B = tf.<span class="constructor">Variable(<span class="params">tf</span>.<span class="params">random_normal</span>(<span class="params">shape</span>=(<span class="params">a</span>, <span class="params">b</span>, <span class="params">m</span>, <span class="params">k</span>)</span>))</span><br><span class="line">C = tf.matmul(A, B) # <span class="module-access"><span class="module"><span class="identifier">C</span>.</span></span>shape=(a, b, n, k)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="tf.transpose">tf.transpose</h4>
<p>In mathematics, transpose is a general matrix operation. For example, transpose will exchange the row elements with column elements for a 2-D matrix. In tensorflow, transpose is a similar operation for a tensor. Moreover, it has an extra parameter perm to specify the dimensions to transpose with each other. That is to say, the i-th dimension will transpose with perm[i]-th dimension. </p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># x.shape=(2, 6)</span></span><br><span class="line"><span class="attribute">x_t</span> = tf.transpose(x) # default perm=[<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment"># y.shape=(2, 6, 3)</span></span><br><span class="line"><span class="attribute">y_t</span> = tf.transpose(y, perm=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>]) # <span class="number">0</span>-th dimension do not transpose, <span class="number">1</span>-th dimension transposes with <span class="number">2</span>-th (perm[<span class="number">1</span>]) dimension and <span class="number">2</span>-th dimension transposes with <span class="number">1</span>-th (perm[<span class="number">2</span>]) dimension</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="keras-api">Keras API</h3>
<p>Keras is a high level API in Tensorflow 2.0, which can be used to build, custom and train deep learning models easily and quickly. #### Build-In Layers</p>
<h4 id="custom-layers">Custom Layers</h4>
<p>Based on the object-oriented feature of Python, Keras in Tensorflow offers a sub-classing method to custom a Layer. </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Custom Layer</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomLayer</span>(tf.keras.layers.Layer):</span><br><span class="line">    <span class="comment"># __init__ function is called when we make one object of this layer, and parameters can be passed. Usually, operations are defined in it.</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, param, **kwargs</span>):</span><br><span class="line">        <span class="built_in">super</span>(CustomLayer, self).__init(**kwargs)</span><br><span class="line">        self.param = param</span><br><span class="line"></span><br><span class="line">    <span class="comment"># build function will be called when the call function first be called and the input_shape will be assigned as the shape of inputs automatically. This layer is used to define the operations that depends on the inputs' shape.</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">self, input_shape</span>):</span><br><span class="line">        self.batch_size = input_shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># call function will do the forward computing operations and it will be invoked when given inputs</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">self, inputs, training=<span class="literal">None</span></span>):</span><br><span class="line">        x = self.conv(inputs)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="comment"># get_config function will update the configuration information of this layer</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_config</span>(<span class="params">self</span>):</span><br><span class="line">        config=<span class="built_in">super</span>(CustomLayer, self).get_config()</span><br><span class="line">        config.update({</span><br><span class="line">          <span class="string">'param'</span>: self.param</span><br><span class="line">        })</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_config</span>(<span class="params">cls, config</span>):</span><br><span class="line">        <span class="keyword">return</span> cls(**config)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="build-models">Build Models</h4>
<p>There are three ways to build a model, that is the sequential API, functional API, and the sub-classing API. * Sequential API</p>
<p><em>keras.Sequntial()</em> will create a model and then we can add layers to this model using its API. </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras import layers</span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential()</span><br><span class="line"><span class="comment"># Adds a densely-connected layer with 64 units to the model:</span></span><br><span class="line">model.<span class="built_in">add</span>(layers.Dense(64, <span class="attribute">activation</span>=<span class="string">'relu'</span>))</span><br><span class="line"><span class="comment"># Add another:</span></span><br><span class="line">model.<span class="built_in">add</span>(layers.Dense(64, <span class="attribute">activation</span>=<span class="string">'relu'</span>))</span><br><span class="line"><span class="comment"># Add an output layer with 10 output units:</span></span><br><span class="line">model.<span class="built_in">add</span>(layers.Dense(10))</span><br></pre></td></tr></tbody></table></figure> Sequential API is easy to use but it can only define model of stacking architecture, which limits the ability of customization.<p></p>
<ul>
<li>Functional API Compared with Sequential API, Functional API has more power to customize models. Besides the stacking architecture, using functional API we can define modes with multiple inputs or outputs, multiple branches, and sharing layers. <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># There are three steps to define a model using functional api.</span></span><br><span class="line"><span class="comment"># The first step is to define the inputs using keras.Input(shape=shape), given the input's shape of the defined model. Note that we shall not give the batch size.</span></span><br><span class="line">inputs = keras.Input(shape=(784,), <span class="attribute">name</span>=<span class="string">'img'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The second step is to define the operations using keras build-in layers or customized layers to obtain the final ouputs</span></span><br><span class="line">x = layers.Dense(64, <span class="attribute">activation</span>=<span class="string">'relu'</span>)(inputs)</span><br><span class="line">x = layers.Dense(64, <span class="attribute">activation</span>=<span class="string">'relu'</span>)(x)</span><br><span class="line">outputs = layers.Dense(10)(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The third step is to create the model using keras.Model(), given the inputs and outputs</span></span><br><span class="line">model = keras.Model(<span class="attribute">inputs</span>=inputs, <span class="attribute">outputs</span>=outputs, <span class="attribute">name</span>=<span class="string">'mnist_model'</span>)</span><br></pre></td></tr></tbody></table></figure></li>
<li>Sub-classing API Similarly with customize a layer, we can use the sub-classing feature of Python to define a model.</li>
</ul>
<h4 id="train-save-models">Train &amp; Save Models</h4>
<h3 id="papers">Papers</h3>
<h4 id="pointnet-deep-learning-on-point-sets-for-3d-classification-and-segmentation">PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation</h4>
<h3 id="debug">Debug</h3>
<h4 id="attributeerror-int-object-has-no-attribute-value">AttributeError: 'int' object has no attribute 'value'</h4>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Bug Code</span></span><br><span class="line"><span class="attr">batch_size</span> = point_cloud.get_shape()[<span class="number">0</span>].value</span><br></pre></td></tr></tbody></table></figure>
<p>The issue is the usage of point_cloud.get_shape()[0].value. In TF 1.x get_shape() works in non-eager mode and returns a list of Dimensions which does have the value. In TF 2.0 get_shape() works in eager mode and returns list of ints so value is not applicable any more. </p><figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Fixed Code</span></span><br><span class="line"><span class="attr">batch_size</span> = point_cloud.get_shape()[<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure> #### AttributeError: module 'tensorflow' has no attribute 'contrib' In Tensorflow 2.0, contrib attribute was deprecated.<p></p>
<h4 id="valueerror-cant-convert-python-sequence-with-mixed-types-to-tensor.">ValueError: Can't convert Python sequence with mixed types to Tensor.</h4>
<p>In python, a list can store elements of different types. If a list stores elements of int and of float, Tensorflow could not treat it as an array, thus shall not be used to initialize a Tensor.</p>
<h4 id="importerror-failed-to-import-pydot.-you-must-install-pydot-and-graphviz-for-pydotprint-to-work.">ImportError: Failed to import pydot. You must install pydot and graphviz for <code>pydotprint</code> to work.</h4>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">tf.keras.utils.plot<span class="constructor">_model(<span class="params">model</span>, <span class="params">to_file</span>=<span class="params">os</span>.<span class="params">path</span>.<span class="params">join</span>(BASE_DIR, '<span class="params">corint_net</span>.<span class="params">png</span>')</span>, show_shapes=True)</span><br></pre></td></tr></tbody></table></figure>
<p>The error usually happens when we use <em>tf.keras.utils.plot_model</em> to draw the architecture of the model. The main reason is that we do not install pydot and graphviz, therefore the solution is: </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">pip install -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple pydot</span><br><span class="line">pip install -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple graphviz</span><br><span class="line">sudo apt-get install graphviz</span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Tensorflow</category>
        <category>Deep Learning</category>
        <category>Tensorflow</category>
      </categories>
      <tags>
        <tag>Tutorials</tag>
        <tag>Tensorflow</tag>
        <tag>Python</tag>
        <tag>Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Tutorials - Debug Experience</title>
    <url>/2019/12/24/C-Coding-Debug-Log/</url>
    <content><![CDATA[<html><head></head><body><p>This article records the representative bugs I met when in c++ coding. The bugs are categorized as C++ standard library and the third-party open source libraries, such as OpenCV, PCL, QT. For each bug, I offer the corresponding solution. Therefore, this article is a debug reference and could help me to fix the bugs when I meet them again. <span id="more"></span></p>
<h2 id="c-standard-library">C++ Standard Library</h2>
<h3 id="linking-error-1">Linking Error 1</h3>
<h4 id="bug">Bug</h4>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">undefined reference <span class="keyword">to</span> symbol <span class="string">'pthread_create@@GLIBC_2.2.5'</span></span><br><span class="line">/lib/x86_64-linux-gnu/libpthread.so.0: <span class="built_in">error</span> adding symbols: DSO missing <span class="keyword">from</span> command line</span><br></pre></td></tr></tbody></table></figure>
<h4 id="solution">Solution</h4>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(Threads)</span><br><span class="line"><span class="keyword">target_link_libraries</span> (<span class="variable">${PROJECT_NAME}</span> <span class="variable">${CMAKE_THREAD_LIBS_INIT}</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="bug-1">Bug</h4>
<figure class="highlight ada"><table><tbody><tr><td class="code"><pre><span class="line">invalid <span class="keyword">use</span> <span class="keyword">of</span> incomplete <span class="keyword">type</span> <span class="type">‘class </span>QDesktopWidget’</span><br></pre></td></tr></tbody></table></figure>
<h4 id="solution-1">Solution</h4>
<p>It means that the compiler could not understand QDesktopWidget due to not including its definition file. </p><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDesktopWidget&gt;</span></span></span><br></pre></td></tr></tbody></table></figure> #### Bug <figure class="highlight subunit"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">error: </span>default argument given for parameter</span><br></pre></td></tr></tbody></table></figure> #### Solution You can declare default arguments in the class declaration or in the function definition, but not both. <figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">fun</span><span class="params">(int x <span class="comment">/*= 10*/</span>)</span></span></span><br></pre></td></tr></tbody></table></figure> #### Bug <figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line">segmentation.<span class="symbol">cpp:</span><span class="number">1604</span><span class="symbol">:</span><span class="number">8</span>: <span class="symbol">error:</span> prototype <span class="keyword">for</span> ‘double <span class="title class_">BoxSegment</span><span class="symbol">:</span><span class="symbol">:computeWeightedCovarianceMatrix</span>(const <span class="title class_">Ptr</span>&amp;, const <span class="title class_">Eigen</span><span class="symbol">:</span><span class="symbol">:Matrix&lt;float</span>, <span class="number">4</span>, <span class="number">1</span>&gt;&amp;, const std::vector&lt;float&gt;&amp;, <span class="title class_">Eigen</span><span class="symbol">:</span><span class="symbol">:Matrix&lt;float</span>, <span class="number">3</span>, <span class="number">3</span>&gt;&amp;)’ does <span class="keyword">not</span> match any <span class="keyword">in</span> <span class="keyword">class</span> ‘<span class="title class_">BoxSegment</span>’</span><br><span class="line"> double <span class="title class_">BoxSegment</span><span class="symbol">:</span><span class="symbol">:compute</span>(const pcl::<span class="title class_">PointCloud</span>&lt;pcl::<span class="title class_">Point</span>XYZ&gt;<span class="symbol">:</span><span class="symbol">:Ptr&amp;</span> src_cloud,</span><br><span class="line">        ^~~~~~~~~~</span><br><span class="line"><span class="title class_">In</span> file included from segmentation.<span class="symbol">cpp:</span><span class="number">1</span><span class="symbol">:</span><span class="number">0</span>:</span><br><span class="line">segmentation.<span class="symbol">h:</span><span class="number">120</span><span class="symbol">:</span><span class="number">11</span>: <span class="symbol">error:</span> candidate <span class="symbol">is:</span> float <span class="title class_">BoxSegment</span><span class="symbol">:</span><span class="symbol">:computeWeightedCovarianceMatrix</span>(const <span class="title class_">Ptr</span>&amp;, const <span class="title class_">Eigen</span><span class="symbol">:</span><span class="symbol">:Matrix&lt;float</span>, <span class="number">4</span>, <span class="number">1</span>&gt;&amp;, const std::vector&lt;float&gt;&amp;, <span class="title class_">Eigen</span><span class="symbol">:</span><span class="symbol">:Matrix&lt;float</span>, <span class="number">3</span>, <span class="number">3</span>&gt;&amp;)</span><br><span class="line">     float compute(const pcl::<span class="title class_">PointCloud</span>&lt;pcl::<span class="title class_">Point</span>XYZ&gt;<span class="symbol">:</span><span class="symbol">:Ptr&amp;</span> src_cloud,</span><br></pre></td></tr></tbody></table></figure> #### Solution The declaration and definition of a function in a class have to match with each other. <figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> <span class="title class_">BoxSegment</span>::<span class="title function_ invoke__">compute</span>(<span class="keyword">const</span> pcl::<span class="variable constant_">PointCloud</span>&lt;pcl::<span class="variable constant_">PointXYZ</span>&gt;::<span class="variable constant_">Ptr</span>&amp; src_cloud,</span><br></pre></td></tr></tbody></table></figure> ## OpenCV ## PCL ## QT<p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>C++</category>
        <category>Programming</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Tutorials</tag>
        <tag>C++</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ Tutorials - Learning Notes for Beginners</title>
    <url>/2020/03/12/CPlusPlus-Learning-Notes/</url>
    <content><![CDATA[<html><head></head><body><p>Add it latter <span id="more"></span> ### System APIs</p>
<h4 id="signal">signal</h4>
<h4 id="system">system</h4>
<h4 id="getcwd">getcwd</h4>
<h4 id="gettimeoftoday">gettimeoftoday</h4>
<h3 id="build-in-apis">Build-In APIs</h3>
<h4 id="undef">undef</h4>
<h3 id="third-party">Third-Party</h3>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>Tutorials</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Usage of ASUS RT-AC86U - Firmware Upgrade and Plugin Installation</title>
    <url>/2020/12/11/Usage-of-ASUS-RT-AC86U-Firmware-Upgrade-and-Plugin-Installation/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://www.asus.com/us/Networking/RT-AC86U/">Asus RT-AC86U</a> is a professional dual band gigabit WiFi router, which has arm structure. Moreover, it has officially supported open source firmware, which has much more powerful functions, such like running official and third-part plugins on it. In this article, I will show you how to upgrade its firmware to highly customized version, install shadowsocks plugin and config v2ray service. <span id="more"></span> NOTE： There is a reset button on the back of Asus RT-AC86U, if there is anything wrong when upgrading the firmware, we can hold the button for seconds (maybe 30s) to reset the router.</p>
<p>The recommended firmware is developed based on <a href="https://github.com/RMerl/asuswrt-merlin.ng">asuswrt-merlin</a>, and we can download it at <a href="https://koolshare.cn/thread-127878-1-1.html">koolshare</a>. * Firmware Upgrade </p><figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">Login ASUS RT-AC86U</span><br><span class="line">系统管理 -&gt; 固件升级 -&gt; 上传</span><br></pre></td></tr></tbody></table></figure> Choose the downloaded firmware and upload, it will automatically upgrade to the uploaded version. The process takes about 1-2 mins. * Install Shadowsocks Plugin All the plugins are managed in software center. For some reason, we can not download and install shadowsocks from the software center directly and we have to download the <a href="https://github.com/hq450/fancyss_history_package/tree/master/fancyss_hnd">source code</a> and install it manually. <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">软件中心 -&gt; 离线安装 -&gt; 上传并安装</span><br></pre></td></tr></tbody></table></figure> <img data-src="/2020/12/11/Usage-of-ASUS-RT-AC86U-Firmware-Upgrade-and-Plugin-Installation/shadowsocks.png"> Probably, it could prompt that "illegal keywords is detected and could not install". In this scenario, we have to login the router through ssh and install it using command line. First, we have to open the ssh function. <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">系统管理 -&gt; 系统设置 -&gt; 启用SSH (LAN only)</span><br></pre></td></tr></tbody></table></figure> Second, login using a computer in lan and install. <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh admin@10.10.10.1</span><br><span class="line">sed -i <span class="string">'s/\tdetect_package/\t# detect_package/g'</span> /koolshare/scripts/ks_tar_install.sh</span><br><span class="line"><span class="built_in">cd</span> /tmp/upload</span><br><span class="line">tar -xzf shadowsocks_1.9.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> shadowsocks</span><br><span class="line"><span class="built_in">chmod</span> +x install.sh</span><br><span class="line">./install.sh</span><br></pre></td></tr></tbody></table></figure> After running the above command line, we will sea the shadowsocks plugin in software center. If we want to use the v2ray function, we have to config virtual memory for a better performance. Prepare an USB storage (USB 3.0 is recommended) and format it as ext4. Then download and install the virtual memory plugin directly from software center.<p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Shadowsocks</category>
      </categories>
      <tags>
        <tag>Setups</tag>
        <tag>RT-AC86U</tag>
        <tag>Shadowsocks</tag>
        <tag>V2Ray</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Tutorials - Learning Notes for Beginners</title>
    <url>/2020/02/25/Python-Learning-Notes/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://www.python.org/">Python</a> is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects. There are many third-party open-source packages and modules, such as numpy, keras, tensorflow, pytorch, which makes it widely used in scientific computing, data mining, deep learning. This article is used to record the key points of python that are useful for Python learning, especially for beginners. <span id="more"></span></p>
<h3 id="basic">Basic</h3>
<h4 id="import">Import</h4>
<p>Module is compact way to manage code in separate files in Python. In one module, we can use code defined in other modules by importing them, which is named import machinery. The <em>import</em> statement is the most common way of invoking the importing machinery, but it is not the only one. The module <em>importlib</em> and the build-in function <em><strong>import</strong>()</em> can also be used to import modules.</p>
<p>When one module is imported using import statement, the importing machinery will first search the module in paths listed in <em>sys.path</em>, if found, Python interpreted will create a module object and initialize it. <em>sys.path</em> contains the directory path that contains the current running python script file and all the environment values in <em>PYTHONPATH</em>. Using the following code, we can add extra directories to <em>sys.path</em>. </p><figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"># <span class="keyword">Get</span> the directory <span class="type">path</span> <span class="keyword">of</span> the <span class="keyword">current</span> running module</span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">sys.path.append(BASE_DIR)</span><br><span class="line"># <span class="keyword">Add</span> other directory paths </span><br><span class="line">sys.path.append(os.path.<span class="keyword">join</span>(BASE_DIR, <span class="string">'models'</span>))</span><br><span class="line">sys.path.append(os.path.<span class="keyword">join</span>(BASE_DIR, <span class="string">'utils'</span>))</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>Function <em><strong>import</strong>()</em> is c implementation of import, while <em>importlib</em> is a pure python implemented module that provide rich APIs interacting with import machinery. The main difference between using <em>importlib</em> and <em>import</em> statement is that <em>importlib</em> can programmatically import modules, given the modules' name as a string variable.</p>
<p>There are several importing related module attributes that will be assigned during importing before execute code, such as <em><strong>name</strong></em> and <em><strong>file</strong></em>.</p>
<h4 id="memory-address">Memory Address</h4>
<ul>
<li>id(object)</li>
</ul>
<p>This function returns the identity of an object, that is an integer keeps constant and unique during the lifetime of the object. We can treat it as the address in memory.</p>
<h4 id="assignment">Assignment</h4>
<p>Python is an object-centered language, which is different memory-centered language, such as C and C++. Therefore, assignment in python behaves differently also. Assignment a variable is binding the variable to an object as an alias name. Then we can use the bind variable to reference the object.</p>
<p>When an assignment invoked, Python interpreter first search whether the object exits in memory. If the object exists, then a new alias name is bind to the object. If the object does not exist, then Python interpreter creates a new object and bind the variable to the newly created object. Note that one object can be bind with multiple variables.</p>
<p>When an object is mutable, we can change the value of this object by any variable assigned to it. We can retrieve the updated value of this object by other variable referenced to it. When an object is immutable, any variable referenced to it can not change its value. In this case, change the value is a new assignment operation, that creates a new object and assigns the variable to it.</p>
<h4 id="arguments-passing">Arguments Passing</h4>
<p>For C family language, there are two ways to pass arguments to function, call by value and call by reference. But Python is different. We can treat argument passing as an assignment operation, which binding the argument variable to object.</p>
<h3 id="modules">Modules</h3>
<h4 id="future"><strong>future</strong></h4>
<figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, division, print_function, unicode_literals</span><br></pre></td></tr></tbody></table></figure>
<p>A <a href="https://docs.python.org/3/reference/simple_stmts.html#future">future statement</a> is a directive to the compiler that a particular module should be compiled using syntax or semantics that will be available in a specified future release of Python where the feature becomes standard.</p>
<p>The future statement is intended to ease migration to future versions of Python that introduce incompatible changes to the language. It allows use of the new features on a per-module basis before the release in which the feature becomes standard.</p>
<p>The future statement will provide support for running your code on Python 2.6, 2.7, and 3.3+ mostly unchanged. It means that we can write standard Python 3 code without worry about its compatibility on Python 2 by putting future statement at the beginning of the code.</p>
<figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># division_demo.py</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="built_in">print</span> <span class="number">11</span>/<span class="number">4</span></span><br></pre></td></tr></tbody></table></figure>
<p>Run division_demo.py in python 2, the output will be 2.75. However, if without <em>from <strong>future</strong> import division</em>, the output will be 2. Because without <em>from <strong>future</strong> import division</em>, <em>/</em> is mapped to the <strong>div()</strong> build-in method by Python 2 interpreter, while with it, <em>/</em> is mapped to the <strong>truediv()</strong> method, which is a build-in method in Python 3.</p>
<figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># print_demo.py</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> <span class="built_in">print</span></span><br><span class="line"><span class="built_in">print</span></span><br></pre></td></tr></tbody></table></figure>
<p><em>print</em> becomes a build-in method in Python 3, losing its special properties as a keyword in Python 2. Similarly, <em>from <strong>future</strong> import print</em> makes <em>print</em> as a build-in method when running on Python 2. The print_demo.py will output:</p>
<figure class="highlight ada"><table><tbody><tr><td class="code"><pre><span class="line">&lt;built-<span class="keyword">in</span> <span class="keyword">function</span> <span class="title">print&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>In order to use <em>with</em> as a Python keyword in Python 2.5 or older, we will need to use <em>from <strong>future</strong> import with_statement</em>.</p>
<h4 id="argparse">argparse</h4>
<p><em>argparse</em> is the recommended module for command line parsing in Python standard library. We can use this module to let the users to pass argument parameters to the code in command line. The basic usage of <em>argparse</em> is: </p><figure class="highlight abnf"><table><tbody><tr><td class="code"><pre><span class="line">import argparse</span><br><span class="line"><span class="attribute">parser</span> <span class="operator">=</span> argparse.ArgumentParser()</span><br><span class="line">parser.add_argument()</span><br><span class="line"><span class="attribute">args</span> <span class="operator">=</span> parser.parse_args()</span><br></pre></td></tr></tbody></table></figure> <em>argparse</em> can automatically generate help descriptions using the string we assigned to help argument. <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"># We can add a summary description <span class="keyword">of</span> the <span class="keyword">module</span>.</span><br><span class="line">parser = argparse.<span class="constructor">ArgumentParser(<span class="params">description</span>='Describe <span class="params">the</span> <span class="params">function</span> <span class="params">and</span> <span class="params">purpose</span> <span class="params">of</span> <span class="params">this</span> <span class="params">module</span>.')</span></span><br></pre></td></tr></tbody></table></figure> * Positional Argument<p></p>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">import argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, <span class="attribute">help</span>=<span class="string">"display a square of a given number"</span>, <span class="attribute">type</span>=int)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="built_in">print</span>(args.square*<span class="number">*2</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>The identification of positional argument is determined by its position sequence. And the positional arguments are mandatory. If not providing positional arguments in command line, the Python interpreter will invoke exceptions.</p>
<ul>
<li>Optional Argument</li>
</ul>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">import argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"square"</span>, <span class="attribute">type</span>=int, <span class="attribute">help</span>=<span class="string">"display a square of a given number"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-v"</span>, <span class="string">"--verbose"</span>, <span class="attribute">action</span>=<span class="string">"store_true"</span>, <span class="attribute">help</span>=<span class="string">"increase output verbosity"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">answer = args.square*<span class="number">*2</span></span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the square of {} equals {}"</span>.format(args.square, answer))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(answer)</span><br></pre></td></tr></tbody></table></figure>
<p>Difference between positional argument and optional argument is that optional argument has "-" or "--" before argument name. Action <em>store_true</em> indicates that the default value of the argument is false, once the argument is invoked in command line, its value becomes true.</p>
<p>We can also add default value for other types. </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">import argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"--kernel_size"</span>, <span class="attribute">type</span>=int, <span class="attribute">default</span>=3, <span class="attribute">help</span>=<span class="string">"convolutional kernel size"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--learning_rate"</span>, <span class="attribute">type</span>=float, <span class="attribute">default</span>=0.01, <span class="attribute">help</span>=<span class="string">"convolutional kernel size"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--log_dir"</span>, <span class="attribute">default</span>=<span class="string">"log"</span>, <span class="attribute">help</span>=<span class="string">"log directory"</span>)</span><br></pre></td></tr></tbody></table></figure> ### Advance #### if <strong>name</strong> == "<strong>main</strong>" For a program written by a complied language, such as C++, there must exist an entry, the main() function, from which the program start to execute. However, Python as an interpreted language, has no entry function main(). When executing the code, all the code at level 0 indentation (no indentation) gets executed, including the definitions of functions and classes. Note that the code in functions or classes are level 1 or larger indentation, which will not execute.<p></p>
<p>As far as we all know, we can directly execute the code using <em>Python code.py</em> or execute the code in other code files by <em>import code.py</em>. How to make the two ways execute different code? <em>if <strong>name</strong> == "<strong>main</strong>"</em> provides us a solution. When we run the code using <em>Python code.py</em>, the interpreter will set the value of the special variable <em><strong>name</strong></em> as <em>"<strong>main</strong>"</em> before execute level 0 indentation code. Then the interpreter execute the level 0 indentation code as well as the level 1 indentation code in <em>if <strong>name</strong> == "<strong>main</strong>"</em>.</p>
<p>When we import the code into other module using <em>import code.py</em>, the interpreter will set the value of the special variable as <em>"code"</em> that is the name of the module. In this case, the level 1 indentation code in <em>if <strong>name</strong> == "<strong>main</strong>"</em> will not be executed.</p>
<h4 id="module-vs.-package">Module VS. Package</h4>
<p>A module is one python file. Its name is the file's base name without the .py extension. A module can be execute directly or be imported by other modules.</p>
<p>A package is a directory of a collection of python modules with an extra <strong>init</strong>.py. Its name is the name of the directory. Packages can be nested to any depth similar with directories, as long as each directory contains a <strong>init</strong>.py.</p>
<h4 id="context-manager-and-with-statement">Context Manager and With Statement</h4>
<p>Context Manager is an easy way that Python offers to safely manage resources. Usually, with statement is the right way to invoke a context manager. There are two ways to build a context manager. * Class: <strong>enter</strong>() and <strong>exit</strong>() If we define <em><strong>enter</strong>()</em> and <em><strong>exit</strong>()</em> in a class, then the class could be a context manager. Usually, we return the object as the resource we intend to safely released in <em><strong>enter</strong>()</em>, then we can do operations in the body of with statement. And we have to manually release the object in <em><strong>exit</strong>()</em>. When the body of with statement is executed, <em><strong>exit</strong>()</em> is automatically invoked, thus the resource is released. </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Python program showing </span></span><br><span class="line"><span class="comment"># file management using  </span></span><br><span class="line"><span class="comment"># context manager </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileManager</span>(): </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename, mode</span>): </span><br><span class="line">        self.filename = filename </span><br><span class="line">        self.mode = mode </span><br><span class="line">        self.file = <span class="literal">None</span></span><br><span class="line">          </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>): </span><br><span class="line">        self.file = <span class="built_in">open</span>(self.filename, self.mode) </span><br><span class="line">        <span class="keyword">return</span> self.file</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_value, exc_traceback</span>): </span><br><span class="line">        self.file.close() </span><br><span class="line">  </span><br><span class="line"><span class="comment"># loading a file  </span></span><br><span class="line"><span class="keyword">with</span> FileManager(<span class="string">'test.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f: </span><br><span class="line">    f.write(<span class="string">'Test'</span>) </span><br></pre></td></tr></tbody></table></figure><p></p>
<ul>
<li>Function: <span class="citation" data-cites="contextmanager">@contextmanager</span> and yield The <em>contextmanager</em> decorator will make a function as a context manager. <em>yield</em> works like the return in <em><strong>enter</strong>()</em> and all the code after <em>yield</em> is like in <em><strong>exit</strong>()</em>. <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_file</span>(<span class="params">name</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(name, <span class="string">'w'</span>)</span><br><span class="line">    <span class="keyword">yield</span> f</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open_file(<span class="string">'some_file'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'hola!'</span>)</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h4 id="virtualenv">virtualenv</h4>
<p><a href="https://virtualenv.pypa.io/en/latest/">virtualenv</a> is a useful tool for creating isolated virtual python environment. We can setup a special version of python environment to run some code without polluting the operation system's python environment. When we do not need the environment, we can directly delete the folder.</p>
<ul>
<li>Install <figure class="highlight ada"><table><tbody><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">virtualenv <span class="comment">--version</span></span><br></pre></td></tr></tbody></table></figure></li>
<li>Usage <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> project_dir</span><br><span class="line">virtualenv venv</span><br><span class="line"><span class="comment"># start</span></span><br><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br><span class="line"><span class="comment"># Install packages</span></span><br><span class="line">pip install numpy</span><br><span class="line">pip install tensorflow</span><br><span class="line"><span class="comment"># end</span></span><br><span class="line">deactivate</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="debug">Debug</h3>
<h4 id="matplotlib-non-gui-backend">Matplotlib non-GUI backend</h4>
<p>Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure. </p><figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> python3-tk</span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Python</category>
        <category>Programming</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Tutorials</tag>
        <tag>Python</tag>
        <tag>Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Click-Through Rate Prediction Using GBDT and Linear Regression with Avazu Dataset</title>
    <url>/2020/12/20/Click-Through-Rate-Prediction-Using-GBDT-With-Avazu-Dataset/</url>
    <content><![CDATA[<html><head></head><body><p>In online advertising and online shopping, Click-Through Rate (CTR) is a good metric to evaluate the quality of advertisement recommendation and goods recommendation. CTR prediction is one of the main challenges in building an intelligent recommendation system. It aims to predict the probability of an customer clicking the recommended items, which helps us to explore the interests of customers and to choose items for an customer from the massive amount of items effectively and usefully. In this article, I will show you how to build a CTR prediction model using machine learning methods and avazu dataset. Python, pandas,matplotlib, seaborn, xgboost, scikit-learning are used in this article.<br>
<span id="more"></span> ### Definition of Click-Through Rate When we visit a shopping application or a news application, we will see lots of commodities or news that those applications recommend to us and we will click some of the presented commodities or news that we are interested to see the detailed information. In the field of recommendation system, the commodities and news are called item and the presented items are defined as exposed items. When a customer visit a application such as amazon, the application will recommend items that the customer may be interested and hope the customer will click more exposed items. More clicked items means the application knows better about the customer's interests and therefore recommends higher quality items.</p>
<p>Usually, we use Click-Through Rate (CTR) to evaluate the performance of a recommendation system. CTR is defined as the ratio between the number of clicked items and exposed items, formulated as Eq. <span class="math inline">\(\eqref{eq1}\)</span> <span class="math display">\[
\begin{equation}
ctr=\frac{n_{clk}}{n_{exp}}
\label{eq1}
\end{equation}
\]</span> ### Introduction of Avazu Dataset <a href="https://www.kaggle.com/c/avazu-ctr-prediction/overview">Avazu Dataset</a> is a click-through rate prediction competition sponsored by Avazu. * Train Set 10 days of click-through data, ordered chronologically. Non-clicks and clicks are subsampled according to different strategies. * Test Set 1 day of ads to for testing your model predictions. ### Exploratory Data Analysis In this section, I will analyze the correlation of each column of the raw data with respect to the label and visualize the result using pandas, matplotlib and seaborn. * Split Train Set</p>
<p>The train set contains 10 days of click-through data and is a csv file with size as 6.3 Gb. It takes more than 24.0 Gb's memory to load the whole train set using pandas, which requires a higher performance hardware. Therefore, it is better to split the large train set csv file as small ones. </p><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">#! /usr/bin/Python</span><br><span class="line">import pandas <span class="keyword">as</span> pd</span><br><span class="line">import numpy <span class="keyword">as</span>  np</span><br><span class="line">from matplotlib import pyplot <span class="keyword">as</span> plt</span><br><span class="line">from collections import Counter</span><br><span class="line">import seaborn <span class="keyword">as</span> sns</span><br><span class="line">import json</span><br><span class="line">import datetime</span><br><span class="line">from sklearn import preprocessing</span><br><span class="line">from sklearn.model_selection import StratifiedShuffleSplit</span><br><span class="line">sns.set<span class="literal">()</span></span><br><span class="line"></span><br><span class="line">avazu = pd.read<span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train</span>.<span class="params">csv</span>', <span class="params">nrows</span>=10000000)</span></span><br><span class="line">avazu.<span class="keyword">to</span><span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train_01</span>.<span class="params">csv</span>', <span class="params">header</span>=True, <span class="params">index</span>=False)</span></span><br><span class="line">avazu = pd.read<span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train</span>.<span class="params">csv</span>', <span class="params">skiprows</span>=<span class="params">range</span>(1, 10000000)</span>, nrows=<span class="number">10000000</span>)</span><br><span class="line">avazu.<span class="keyword">to</span><span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train_02</span>.<span class="params">csv</span>', <span class="params">header</span>=True, <span class="params">index</span>=False)</span></span><br><span class="line">avazu = pd.read<span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train</span>.<span class="params">csv</span>', <span class="params">skiprows</span>=<span class="params">range</span>(1, 20000000)</span>, nrows=<span class="number">10000000</span>)</span><br><span class="line">avazu.<span class="keyword">to</span><span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train_03</span>.<span class="params">csv</span>', <span class="params">header</span>=True, <span class="params">index</span>=False)</span></span><br><span class="line">avazu = pd.read<span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train</span>.<span class="params">csv</span>', <span class="params">skiprows</span>=<span class="params">range</span>(1, 30000000)</span>, nrows=<span class="number">10000000</span>)</span><br><span class="line">avazu.<span class="keyword">to</span><span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train_04</span>.<span class="params">csv</span>', <span class="params">header</span>=True, <span class="params">index</span>=False)</span></span><br><span class="line">avazu = pd.read<span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train</span>.<span class="params">csv</span>', <span class="params">skiprows</span>=<span class="params">range</span>(1, 40000000)</span>, nrows=<span class="number">10000000</span>)</span><br><span class="line">avazu.<span class="keyword">to</span><span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train_05</span>.<span class="params">csv</span>', <span class="params">header</span>=True, <span class="params">index</span>=False)</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<pre><code>* skiprows - the index of skip rows, supports scalar or array input
* nrows - the number of rows to load</code></pre>
<ul>
<li>Random Sampling</li>
</ul>
<p>It is more efficient to do exploratory data analysis using a smaller dataset that has same distribution with the raw dataset. We can randomly sample from the raw dataset using <strong>StratifiedShuffleSplit</strong> imported form <strong>sklearn.model_selection</strong>. </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">avazu = pd.read_csv(<span class="string">'../data/avazu/train_01.csv'</span>)</span><br><span class="line">split = StratifiedShuffleSplit(<span class="attribute">n_splits</span>=1, <span class="attribute">train_size</span>=0.05, <span class="attribute">test_size</span>=0.05, <span class="attribute">random_state</span>=42)</span><br><span class="line"><span class="keyword">for</span> train_index, test_index <span class="keyword">in</span> split.split(avazu, avazu[<span class="string">"click"</span>]):</span><br><span class="line">    strat_train_set = avazu.loc[train_index]</span><br><span class="line">    <span class="built_in">print</span>(strat_train_set.<span class="built_in">info</span>())</span><br><span class="line">    strat_test_set = avazu.loc[test_index]</span><br><span class="line">    <span class="built_in">print</span>(strat_test_set.<span class="built_in">info</span>())</span><br><span class="line">    strat_train_set.to_csv(<span class="string">"../data/train_sample_01.csv"</span>, header = <span class="literal">True</span>, <span class="attribute">index</span>=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure> * Merge Sampling Merge the sampled data into one file. <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">avazu_01 = pd.read<span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train_sample_01</span>.<span class="params">csv</span>')</span></span><br><span class="line">avazu_02 = pd.read<span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train_sample_02</span>.<span class="params">csv</span>')</span></span><br><span class="line">avazu_03 = pd.read<span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train_sample_03</span>.<span class="params">csv</span>')</span></span><br><span class="line">avazu_04 = pd.read<span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">avazu</span><span class="operator">/</span><span class="params">train_sample_04</span>.<span class="params">csv</span>')</span></span><br><span class="line">avazu = avazu_01.append(<span class="literal">[<span class="identifier">avazu_02</span>, <span class="identifier">avazu_03</span>, <span class="identifier">avazu_04</span>]</span>)</span><br><span class="line">avazu.<span class="keyword">to</span><span class="constructor">_csv('..<span class="operator">/</span><span class="params">data</span><span class="operator">/</span><span class="params">train_sample</span>.<span class="params">csv</span>', <span class="params">header</span>=True, <span class="params">index</span>=False)</span></span><br></pre></td></tr></tbody></table></figure> * Basic Info Load the sampled data and print the basic information. <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">avazu = pd<span class="selector-class">.read_csv</span>(<span class="string">'../data/avazu/train_sample.csv'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(avazu.head()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(avazu.info()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(list(avazu.columns)</span></span>)</span><br></pre></td></tr></tbody></table></figure> <img alt="Head data of the train sample" data-src="/2020/12/20/Click-Through-Rate-Prediction-Using-GBDT-With-Avazu-Dataset/head.png"> The info of the train sample is shown as follows. <figure class="highlight tap"><table><tbody><tr><td class="code"><pre><span class="line">&lt;class 'pandas.core.frame.DataFrame'&gt;</span><br><span class="line">RangeIndex:<span class="number"> 2000000 </span>entries,<span class="number"> 0 </span>to 1999999</span><br><span class="line">Data columns (total<span class="number"> 24 </span>columns):</span><br><span class="line"> <span class="comment">#   Column            Dtype  </span></span><br><span class="line">---  ------            -----  </span><br><span class="line"><span class="number"> 0 </span>  id                float64</span><br><span class="line"><span class="number"> 1 </span>  click             int64  </span><br><span class="line"><span class="number"> 2 </span>  hour              int64  </span><br><span class="line"><span class="number"> 3 </span>  C1                int64  </span><br><span class="line"><span class="number"> 4 </span>  banner_pos        int64  </span><br><span class="line"><span class="number"> 5 </span>  site_id           object </span><br><span class="line"><span class="number"> 6 </span>  site_domain       object </span><br><span class="line"><span class="number"> 7 </span>  site_category     object </span><br><span class="line"><span class="number"> 8 </span>  app_id            object </span><br><span class="line"><span class="number"> 9 </span>  app_domain        object </span><br><span class="line"><span class="number"> 10 </span> app_category      object </span><br><span class="line"><span class="number"> 11 </span> device_id         object </span><br><span class="line"><span class="number"> 12 </span> device_ip         object </span><br><span class="line"><span class="number"> 13 </span> device_model      object </span><br><span class="line"><span class="number"> 14 </span> device_type       int64  </span><br><span class="line"><span class="number"> 15 </span> device_conn_type  int64  </span><br><span class="line"><span class="number"> 16 </span> C14               int64  </span><br><span class="line"><span class="number"> 17 </span> C15               int64  </span><br><span class="line"><span class="number"> 18 </span> C16               int64  </span><br><span class="line"><span class="number"> 19 </span> C17               int64  </span><br><span class="line"><span class="number"> 20 </span> C18               int64  </span><br><span class="line"><span class="number"> 21 </span> C19               int64  </span><br><span class="line"><span class="number"> 22 </span> C20               int64  </span><br><span class="line"><span class="number"> 23 </span> C21               int64  </span><br><span class="line">dtypes: float64(1), int64(14), object(9)</span><br><span class="line">memory usage: 366.2+ MB</span><br><span class="line">None</span><br></pre></td></tr></tbody></table></figure> The columns are shown as follows. <figure class="highlight scheme"><table><tbody><tr><td class="code"><pre><span class="line">[<span class="symbol">'id</span>', <span class="symbol">'click</span>', <span class="symbol">'hour</span>', <span class="symbol">'C1</span>', <span class="symbol">'banner_pos</span>', <span class="symbol">'site_id</span>', <span class="symbol">'site_domain</span>', <span class="symbol">'site_category</span>', <span class="symbol">'app_id</span>', <span class="symbol">'app_domain</span>', <span class="symbol">'app_category</span>', <span class="symbol">'device_id</span>', <span class="symbol">'device_ip</span>', <span class="symbol">'device_model</span>', <span class="symbol">'device_type</span>', <span class="symbol">'device_conn_type</span>', <span class="symbol">'C14</span>', <span class="symbol">'C15</span>', <span class="symbol">'C16</span>', <span class="symbol">'C17</span>', <span class="symbol">'C18</span>', <span class="symbol">'C19</span>', <span class="symbol">'C20</span>', <span class="symbol">'C21</span>']</span><br></pre></td></tr></tbody></table></figure> The first column is the index, the second column is the label, the third row the time when the record happened, column 3 and 16-23 are categorical features with dtype as int64, column 5-7 are site features, column 8-10 are app features, column 11-15 are device features. * Label Encode of Categorical Features <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> <span class="selector-attr">[<span class="string">'C1'</span>, <span class="string">'site_id'</span>, <span class="string">'site_domain'</span>, <span class="string">'site_category'</span>, <span class="string">'app_id'</span>, <span class="string">'app_domain'</span>, <span class="string">'app_category'</span>, <span class="string">'device_id'</span>, <span class="string">'device_ip'</span>, <span class="string">'device_model'</span>]</span>:</span><br><span class="line">    enc = preprocessing<span class="selector-class">.LabelEncoder</span>()</span><br><span class="line">    avazu<span class="selector-attr">[column]</span> = enc<span class="selector-class">.fit_transform</span>(avazu<span class="selector-attr">[column]</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(avazu.info()</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(avazu.head()</span></span>)</span><br></pre></td></tr></tbody></table></figure> * Feature Visualization * Distribution of positive and negative labels <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">sns<span class="selector-class">.countplot</span>(x=avazu<span class="selector-attr">[<span class="string">'click'</span>]</span>)</span><br><span class="line">plt<span class="selector-class">.show</span>()</span><br></pre></td></tr></tbody></table></figure> <img alt="Distribution of positive and negative labels" data-src="/2020/12/20/Click-Through-Rate-Prediction-Using-GBDT-With-Avazu-Dataset/click-distribution.png"> * Distribution of Banner Position and Label <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sns.countplot(<span class="attribute">x</span>=<span class="string">'banner_pos'</span>, <span class="attribute">hue</span>=<span class="string">'click'</span>, <span class="attribute">data</span>=avazu) #广告位置</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure> <img alt="Distribution of banner position with respect to labels" data-src="/2020/12/20/Click-Through-Rate-Prediction-Using-GBDT-With-Avazu-Dataset/banner-pos.png"> * Distribution of Site Category and Label <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sns.countplot(<span class="attribute">x</span>=<span class="string">'site_category'</span>, <span class="attribute">hue</span>=<span class="string">'click'</span>, <span class="attribute">data</span>=avazu)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure> <img alt="Distribution of site category with respect to labels" data-src="/2020/12/20/Click-Through-Rate-Prediction-Using-GBDT-With-Avazu-Dataset/site-cate.png"> * Distribution of Application Category and Label <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sns.countplot(<span class="attribute">x</span>=<span class="string">'app_category'</span>, <span class="attribute">hue</span>=<span class="string">'click'</span>, <span class="attribute">data</span>=avazu)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure> <img alt="Distribution of application category with respect to labels" data-src="/2020/12/20/Click-Through-Rate-Prediction-Using-GBDT-With-Avazu-Dataset/app-cate.png"> * Distribution of Device Type and Label <figure class="highlight haskell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title">sns</span>.countplot(x = <span class="string">"device_type"</span>, hue = <span class="string">"click"</span>, <span class="class"><span class="keyword">data</span> = avazu)</span></span><br><span class="line"><span class="title">plt</span>.show()</span><br></pre></td></tr></tbody></table></figure> <img alt="Distribution of device type with respect to labels" data-src="/2020/12/20/Click-Through-Rate-Prediction-Using-GBDT-With-Avazu-Dataset/device-type.png"> * Covariance of Features <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">avazu_drop = avazu<span class="selector-class">.drop</span>(<span class="attribute">columns</span>=[<span class="string">'id'</span>])</span><br><span class="line">avazu_corr = avazu_drop<span class="selector-class">.corr</span>()</span><br><span class="line">plt<span class="selector-class">.figure</span>(figsize=(<span class="number">20</span>, <span class="number">18</span>))</span><br><span class="line">sns<span class="selector-class">.heatmap</span>(avazu_corr<span class="selector-class">.abs</span>(), annot=True)</span><br><span class="line">plt<span class="selector-class">.show</span>()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(avazu_corr[<span class="string">'click'</span>].sort_values(ascending=False)</span></span>)</span><br></pre></td></tr></tbody></table></figure> <img alt="Covariance of Features" data-src="/2020/12/20/Click-Through-Rate-Prediction-Using-GBDT-With-Avazu-Dataset/corr.png"> As we can see, C1 and devece_type have high correlation with each other, C14 and C17 have high correlation with each other<p></p>
<h3 id="data-preprocess">Data Preprocess</h3>
<h3 id="hyper-parameters-search">Hyper Parameters Search</h3>
<h3 id="feature-selection-using-gbdt">Feature Selection Using GBDT</h3>
<h3 id="linear-regression-model">Linear Regression Model</h3>
</body></html>]]></content>
      <categories>
        <category>Deep Learning</category>
        <category>Click-Through Rate Prediction</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Python</tag>
        <tag>Click-Through Rate(CTR)</tag>
        <tag>Machine Learning</tag>
        <tag>Pandas</tag>
        <tag>Matplotlib</tag>
        <tag>Seaborn</tag>
        <tag>XGBoost</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploy A Django Application on Ubuntu Using Apache and PostgreSQL</title>
    <url>/2023/02/08/Deploy-A-Django-Application-on-Ubuntu-Using-Apache-and-PostgreSQL/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://www.djangoproject.com/">Django</a> is a high-level Python web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of web development, so you can focus on writing your app without needing to reinvent the wheel. In this tutorial, I will teach you to install, develop and deploy a web application step by step using Django, Apache and PostgreSQL on Ubuntu 18.04. <span id="more"></span> ## Prerequire Installation ### Install and Use Python3 and Pip3 The default python on Ubuntu 18.04 is python2, which will be deprecated in future. Django recommend us to use python3 which we have a better compatibility and performance. ##### Install Python3 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> update</span><br><span class="line">sudo apt-<span class="built_in">get</span> install python3 libexpat1</span><br></pre></td></tr></tbody></table></figure> ##### Set Python3 as Default Python <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">sudo rm -rf <span class="regexp">/usr/</span>bin/python</span><br><span class="line">ln -s <span class="regexp">/usr/</span>bin<span class="regexp">/python3 /u</span>sr<span class="regexp">/bin/</span>python</span><br></pre></td></tr></tbody></table></figure> ##### Install Pip3 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install python3-pip</span><br></pre></td></tr></tbody></table></figure> ##### Set Pip3 as Default Pip <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">ln -s <span class="regexp">/usr/</span>bin<span class="regexp">/pip3 /u</span>sr<span class="regexp">/bin/</span>pip</span><br><span class="line">pip install --upgrade pip</span><br></pre></td></tr></tbody></table></figure> ### Install Apache with mod_wsgi Module Deploying Django with <a href="https://httpd.apache.org/">Apache</a> and <a href="https://modwsgi.readthedocs.io/en/develop/">mod_wsgi</a> is a tried and tested way to get Django into production. mod_wsgi is an Apache module which can host any Python WSGI application, including Django. Django will work with any version of Apache which supports mod_wsgi. #### Install <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install apache2 apache2-utils ssl-cert libapache2-<span class="keyword">mod</span>-wsgi-<span class="keyword">py3</span></span><br></pre></td></tr></tbody></table></figure> #### Restart <figure class="highlight maxima"><table><tbody><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">restart</span> apache2</span><br></pre></td></tr></tbody></table></figure> ### Install PostgreSQL <a href="https://www.postgresql.org/">PostgreSQL</a> is an advanced open source relational database. It has a better performance than django's default database SQLite, therefore here I use PostgreSQL as Django's database. #### Install <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> update</span><br><span class="line">sudo apt-<span class="built_in">get</span> install postgresql postgresql-contrib</span><br><span class="line">pip install psycopg2</span><br></pre></td></tr></tbody></table></figure> #### Check Status <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">service postgresql status</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="django-installation">Django Installation</h2>
<p>After finish the installation of python3, pip3, apache and postgresql, we can install django now. The latest version of Django is 4.1, however I install 3.2.13 to avoid compatibility problems and other unpredictable bugs. ### <a href="https://docs.djangoproject.com/en/4.1/intro/install/">Install Django</a> #### Install </p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">pip</span> install django==<span class="number">3</span>.<span class="number">2</span>.<span class="number">13</span></span><br></pre></td></tr></tbody></table></figure> #### Verify Installation <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">python -m django <span class="attr">--version</span></span><br><span class="line">python</span><br><span class="line">import django</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(django.get_version()</span></span>)</span><br></pre></td></tr></tbody></table></figure> #### Install Required Packages (Optional, you can skip this step) ##### Install REST Framework <figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> djangorestframework</span><br></pre></td></tr></tbody></table></figure> ##### Install PhoneNumberField <figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> django-phonenumber-field</span><br><span class="line">pip <span class="keyword">install</span> phonenumbers</span><br></pre></td></tr></tbody></table></figure> ##### Install Image API <figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pillow</span><br><span class="line">pip <span class="keyword">install</span> drf-extra-fields</span><br></pre></td></tr></tbody></table></figure> ##### Install cleanup <figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line">pip <span class="keyword">install </span>django-cleanup</span><br><span class="line"><span class="keyword">INSTALLED_APPS </span>= (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'django_cleanup.apps.CleanupConfig'</span>, <span class="comment"># should be placed after your apps</span></span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure> ## Develop Django Application ### Create Project From the command line, cd into a directory where you’d like to store your project, then run the following command: <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">django-admin startproject mysite</span></span><br></pre></td></tr></tbody></table></figure> This will create a mysite directory in your current directory. <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.<span class="keyword">py</span></span><br><span class="line">    mysite/</span><br><span class="line">        __init__.<span class="keyword">py</span></span><br><span class="line">        settings.<span class="keyword">py</span></span><br><span class="line">        urls.<span class="keyword">py</span></span><br><span class="line">        asgi.<span class="keyword">py</span></span><br><span class="line">        wsgi.<span class="keyword">py</span></span><br></pre></td></tr></tbody></table></figure> ### Deploy Project #### Run Server By default, the runserver command starts the development server on the internal IP at port 8000. If you want to change the server’s port, pass it as a command-line argument. For instance, this command starts the server on port 8080: <figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> manage.py runserver <span class="number">0.0.0.0:8080</span></span><br></pre></td></tr></tbody></table></figure> Then we can visit mysite application via http://127.0.0.1:8080. Note that runserver is only used for django developing and debug. #### Open Port For safety, the port we used may not open by default on Ubuntu 18.04. We can manually open it. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> ufw <span class="literal">allow</span> <span class="number">8080</span></span><br></pre></td></tr></tbody></table></figure> If the port is already in user, we have to kill it before runserver. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> fuser -k <span class="number">8080</span>/tcp</span><br></pre></td></tr></tbody></table></figure> ### Create App Now that your environment – a “project” – is set up, you’re set to start doing work. Each application you write in Django consists of a Python package that follows a certain convention. Django comes with a utility that automatically generates the basic directory structure of an app, so you can focus on writing code rather than creating directories.<p></p>
<p>To create your app, make sure you’re in the same directory as manage.py and type this command: </p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">django-admin startapp api</span></span><br></pre></td></tr></tbody></table></figure> That’ll create a directory api, which is laid out like this: <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">api/</span><br><span class="line">    __init__.<span class="keyword">py</span></span><br><span class="line">    admin.<span class="keyword">py</span></span><br><span class="line">    apps.<span class="keyword">py</span></span><br><span class="line">    migrations/</span><br><span class="line">        __init__.<span class="keyword">py</span></span><br><span class="line">    models.<span class="keyword">py</span></span><br><span class="line">    tests.<span class="keyword">py</span></span><br><span class="line">    views.<span class="keyword">py</span></span><br></pre></td></tr></tbody></table></figure> This directory structure will house the api application. #### Install App After create the api app, we need to install api app to mysite project. Edit the mysite/settings.py file again, and change the INSTALLED_APPS setting to include the string 'api'. So it’ll look like this: <figure class="highlight sml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">INSTALLED_APPS</span> = (</span><br><span class="line">    <span class="symbol">'django</span>.contrib.admin',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.auth',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.contenttypes',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.sessions',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.messages',</span><br><span class="line">    <span class="symbol">'django</span>.contrib.staticfiles',</span><br><span class="line">    <span class="symbol">'api'</span>,</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure> * Difference between project and application in Django An app is a web application that does something – e.g., a blog system, a database of public records or a small poll app. A project is a collection of configuration and apps for a particular website. A project can contain multiple apps. An app can be in multiple projects. #### Create Super User and Login We’ll need to create a user who can login to the admin site. Run the following command: <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> createsuperuser</span><br></pre></td></tr></tbody></table></figure> Input the user name, email address and password, the above command will create a super user for mysite. Then we can login http://127.0.0.1:8080/admin/ as an administrator and manipulate the data defined by Django's model.<p></p>
<h4 id="make-migrations">Make Migrations</h4>
<p>When we define new models or change the defined models, we need let django known the definitions and changes by the following commands. </p><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> makemigrations</span><br><span class="line"><span class="keyword">python</span> manage.<span class="keyword">py</span> migrate</span><br></pre></td></tr></tbody></table></figure> ## Deploy Django Application Using Apache2 Although we can serve the django application using the command 'python manage.py runserver 0.0.0.0:8080', it is not recommended to use this command to deploy Django's application. Because this command is designed for developing and debug. It's performance is poor and it will runout the server's memory when the application is visited in high concurrency. <a href="https://httpd.apache.org/">Apache</a> is a famous open-source HTTP server for modern operating systems Unix and Windows. The official documents of Django recommends us to use Apache to deploy Django's application.<p></p>
<p>There are two points we need to know before we take further steps into apache configuration. * configuration files' path </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">cd <span class="regexp">/etc/</span>apache2/</span><br><span class="line">tree -L <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure> We should see the following contents: <figure class="highlight stata"><table><tbody><tr><td class="code"><pre><span class="line">├── apache2.<span class="keyword">conf</span></span><br><span class="line">├── <span class="keyword">conf</span>-available</span><br><span class="line">├── <span class="keyword">conf</span>-enabled</span><br><span class="line">├── envvars</span><br><span class="line">├── magic</span><br><span class="line">├── mods-available</span><br><span class="line">├── mods-enabled</span><br><span class="line">├── ports.<span class="keyword">conf</span></span><br><span class="line">├── sites-available</span><br><span class="line">└── sites-enabled</span><br></pre></td></tr></tbody></table></figure> The <strong>apache2.conf</strong> is the apache's configuration file and the <strong>ports.conf</strong> defines the port that apache listens. The directory <strong>sites-available</strong> contains configurations of sites that apache can serve and the directory <strong>sites-enabled</strong> contains configurations of sites that apache is serving. * log's path <figure class="highlight stata"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/apache2</span><br><span class="line">tree</span><br></pre></td></tr></tbody></table></figure> And we will see the following files: <figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">├── access.<span class="built_in">log</span></span><br><span class="line">├── <span class="keyword">error</span>.<span class="built_in">log</span></span><br><span class="line">├── other_vhosts_access.<span class="built_in">log</span></span><br></pre></td></tr></tbody></table></figure> Logs can offer us useful information when there is something wrong during configure apache. ### Set Port The default port is <strong>80</strong> for http, but we can use other ports if port <strong>80</strong> is reserved. Open <strong>ports.conf</strong> and listen the port we want to use for Django application. <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>apache2/ports.conf</span><br></pre></td></tr></tbody></table></figure> And add the following configuration to let apache listen <strong>8080</strong> port. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">Listen</span> <span class="number">8080</span></span><br></pre></td></tr></tbody></table></figure> ### Enable Rewrite Module <a href="https://httpd.apache.org/docs/current/mod/mod_rewrite.html">Rewrite Module</a> is a rule-based rewrite engine and it rewrites the requested URLs by the defined rules using regular-expression parser. Usually, it is used to redirect one URL to another URL. Here will use it to redirect http request to https request, which is more secure. <figure class="highlight coq"><table><tbody><tr><td class="code"><pre><span class="line">a2enmod <span class="built_in">rewrite</span></span><br></pre></td></tr></tbody></table></figure> ### Configure Site There is a default enabled site defined in <strong>000-default.conf</strong>. Here we edit this site configuration to deploy Django application. <figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>apache2<span class="regexp">/sites-available/</span><span class="number">000</span>-<span class="keyword">default</span>.conf <span class="regexp">/etc/</span>apache2<span class="regexp">/sites-available/</span><span class="number">000</span>-<span class="keyword">default</span>.conf.cp</span><br><span class="line">vi <span class="regexp">/etc/</span>apache2<span class="regexp">/sites-available/</span><span class="number">000</span>-<span class="keyword">default</span>.conf</span><br></pre></td></tr></tbody></table></figure> And replace the default configuration with the following one: <figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:<span class="number">8080</span>&gt;</span><br><span class="line">    # ServerName <span class="number">172.30</span>.<span class="number">92.118</span></span><br><span class="line">    # ServerAlias zhaoyongsheng.com</span><br><span class="line">    # ServerAdmin yongsheng.zhao.csc@gmail.com</span><br><span class="line"></span><br><span class="line">    WSGIScriptAlias <span class="regexp">/ /</span>django<span class="regexp">/servo/</span>servo/wsgi.py</span><br><span class="line"></span><br><span class="line">    ProxyPass <span class="regexp">/media/</span> !</span><br><span class="line">    Alias <span class="regexp">/media/</span> <span class="regexp">/django/m</span>edia/</span><br><span class="line">    ProxyPass <span class="regexp">/static/</span> !</span><br><span class="line">    Alias <span class="regexp">/static/</span> <span class="regexp">/django/</span>servo<span class="regexp">/static/</span></span><br><span class="line"></span><br><span class="line">    &lt;Directory <span class="regexp">/django/m</span>edia&gt;</span><br><span class="line">         Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Directory <span class="regexp">/django/</span>servo/<span class="keyword">static</span>&gt;</span><br><span class="line">         Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">    # WSGIDaemonProcess blog python-home=<span class="regexp">/home/</span>sammy<span class="regexp">/myproject/my</span>projectenv python-path=<span class="regexp">/home/</span>sammy/myproject</span><br><span class="line">    # WSGIProcessGroup %{GLOBAL}</span><br><span class="line">    # WSGIDaemonProcess ziqiangxuetang.com python-path=<span class="regexp">/home/</span>tu<span class="regexp">/blog:/</span>home<span class="regexp">/tu/</span>.virtualenvs<span class="regexp">/blog/</span>lib<span class="regexp">/python2.7/</span>site-packages</span><br><span class="line">    # WSGIProcessGroup ziqiangxuetang.com</span><br><span class="line">    # WSGIApplicationGroup %{GLOBAL}</span><br><span class="line"></span><br><span class="line">    &lt;Directory <span class="regexp">/django/</span>servo/servo&gt;</span><br><span class="line">            &lt;Files wsgi.py&gt;</span><br><span class="line">                Require all granted</span><br><span class="line">            &lt;/Files&gt;</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">    ErrorLog ${APACHE_LOG_DIR}/error.log</span><br><span class="line">    CustomLog ${APACHE_LOG_DIR}/access.log combined</span><br><span class="line">    # RewriteEngine on</span><br><span class="line">    # RewriteCond   %{HTTPS} !=on </span><br><span class="line">    # RewriteRule   ^(.*)  https:<span class="comment">//%{SERVER_NAME}$1 [L,R]</span></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></tbody></table></figure> The first bit in the WSGIScriptAlias line is the base URL path you want to serve your application at (/ indicates the root url), and the second is the location of a “WSGI file” . And the <directory> piece ensures that Apache can access your wsgi.py file. * ** ProxyPass /static/ !** -- Do not deal with <strong>/static/</strong> urls, otherwise it will add a <strong>static/</strong> prefix to the url, such as make "static/admin/base.html" as "static/static/admin/base.html", for more details please visit the <a href="https://djangodeployment.readthedocs.io/en/latest/05-static-files.html">Static and media files</a> * <strong>Alias /media/ /django/media/</strong> -- Let apache know where the media directory is. * <strong>Alias /static/ /django/servo/static/</strong> -- Let apache know where the static directory is. The <a href="https://docs.djangoproject.com/en/4.1/howto/deployment/wsgi/modwsgi/">official documents</a> provides more details about how to deploy Django using apache. ### Config Apache The apache's configuration file is in <strong>/etc/apache2/apache2.conf</strong>. Similarly, we had better make a copy of the default <strong>apache2.conf</strong> before modified it. <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">cp <span class="regexp">/etc/</span>apache2<span class="regexp">/apache2.conf /</span>etc<span class="regexp">/apache2/</span>apache2.conf.cp</span><br><span class="line">vi <span class="regexp">/etc/</span>apache2/apache2.conf</span><br></pre></td></tr></tbody></table></figure> Find and edit the following lines: <figure class="highlight nsis"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="literal">Directory</span> /&gt;</span><br><span class="line"><span class="number">160</span>         Options FollowSymLinks</span><br><span class="line"><span class="number">161</span>         AllowOverride <span class="literal">None</span></span><br><span class="line"><span class="number">162</span>         Require <span class="literal">all</span> granted</span><br><span class="line"><span class="number">163</span> &lt;/<span class="literal">Directory</span>&gt;</span><br><span class="line"><span class="number">164</span> </span><br><span class="line"><span class="number">165</span> &lt;<span class="literal">Directory</span> /usr/share&gt;</span><br><span class="line"><span class="number">166</span>         AllowOverride <span class="literal">None</span></span><br><span class="line"><span class="number">167</span>         Require <span class="literal">all</span> granted</span><br><span class="line"><span class="number">168</span> &lt;/<span class="literal">Directory</span>&gt;</span><br><span class="line"><span class="number">169</span> </span><br><span class="line"><span class="number">170</span> <span class="comment"># &lt;Directory /var/www/&gt;</span></span><br><span class="line"><span class="number">171</span> <span class="comment">#       Options Indexes FollowSymLinks</span></span><br><span class="line"><span class="number">172</span> <span class="comment">#       AllowOverride None</span></span><br><span class="line"><span class="number">173</span> <span class="comment">#       Require all granted</span></span><br><span class="line"><span class="number">174</span> <span class="comment"># &lt;/Directory&gt;</span></span><br><span class="line"><span class="number">175</span> </span><br><span class="line"><span class="number">176</span> <span class="comment">#&lt;Directory /srv/&gt;</span></span><br><span class="line"><span class="number">177</span> <span class="comment">#       Options Indexes FollowSymLinks</span></span><br><span class="line"><span class="number">178</span> <span class="comment">#       AllowOverride None</span></span><br><span class="line"><span class="number">179</span> <span class="comment">#       Require all granted</span></span><br><span class="line"><span class="number">180</span> <span class="comment">#&lt;/Directory&gt;</span></span><br></pre></td></tr></tbody></table></figure> Add the following line at the end of the file. <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">WSGIPythonPath <span class="regexp">/django/</span>servo</span><br></pre></td></tr></tbody></table></figure> <strong>WSGIPythonPath</strong> ensures that your project package is available for import on the Python path; in other words, that import servo works. ### Close Debug Mode in Django Django's debug mode can print logs which is useful for debug, but its performance is poor. Thus we had better close the debug mode before serving it to web. <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/django/</span>servo<span class="regexp">/servo/</span>settings.py</span><br></pre></td></tr></tbody></table></figure> Find the line <strong>DEBUG = True</strong>, and set it as False. <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">DEBUG</span> = <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure> ### Change Owner of Django Directory Generally, the owner of django's directory is the admin user of the operation system. We must change the owner to apache to let it have full access to Django's directory. <figure class="highlight haskell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title">cd</span> /</span><br><span class="line"><span class="title">chown</span> -<span class="type">R</span> www-<span class="class"><span class="keyword">data</span>:www-<span class="keyword">data</span> django</span></span><br></pre></td></tr></tbody></table></figure> ### Restart Apache Finishing the above steps, restart apache to deploy Django's application. <figure class="highlight maxima"><table><tbody><tr><td class="code"><pre><span class="line">service apache2 <span class="built_in">restart</span></span><br></pre></td></tr></tbody></table></figure> Now we can visit the Django's application via http:xxx.xxx.xxx.xxx:8080/admin/. <strong>Congratulations!</strong> If there are any problems, feel free to contact me.</directory><p></p>
<h3 id="warnings-errors-and-solutions">Warnings, Errors And Solutions</h3>
<h4 id="ah00558-apache2-could-not-reliably-determine-the-servers-fully-qualified-domain-name-using-172.30.92.119.-set-the-servername-directive-globally-to-suppress-this-message">AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 172.30.92.119. Set the 'ServerName' directive globally to suppress this message</h4>
<p>Apache uses the ServerName directive to map incoming HTTP requests to an IP address or DNS hostname using VirtualHost directives in order to handle requests for multiple sites using a single server. The error message notes that a global ServerName directive should also be set. Doing so will ensure that Apache can gracefully handle incoming requests that do not map to a VirtualHost without generating additional errors.</p>
<p>For maximum compatibility with various Apache configurations, use the value of 127.0.0.1 for your global ServerName directive. You can use a different IP address or DNS name that corresponds to your server’s configuration if you need to, but it is safest to use 127.0.0.1.</p>
<p>Open the <strong>/etc/apache2/apache2.conf</strong> file using vim. </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>apache2/apache2.conf</span><br></pre></td></tr></tbody></table></figure> And add the following line to the end of the file. <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">. . .</span><br><span class="line"># Include the virtual host configurations:</span><br><span class="line">IncludeOptional sites-enabled/*.<span class="keyword">conf</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">vim</span>: <span class="keyword">syntax</span>=apache <span class="keyword">ts</span>=<span class="number">4</span> <span class="keyword">sw</span>=<span class="number">4</span> <span class="keyword">sts</span>=<span class="number">4</span> sr noet</span><br><span class="line">ServerName <span class="number">127.0</span>.<span class="number">0.1</span></span><br></pre></td></tr></tbody></table></figure> Then restart apache and the <strong>AH00558</strong> error will disappear.<p></p>
<h4 id="authentication-credentials-were-not-provided.">Authentication credentials were not provided.</h4>
<p>The token authentication works well when I run django project using <strong>python manage.py runserver 0.0.0.0:8080</strong>. I met this error when running django project using apache2. Obviously, this error is a privilege problem. Since I deploy django using wsgi module, I can enable <strong>WSGIPassAuthorization</strong> to solve this problem. Open the site configuration file using vim. </p><figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>apache2<span class="regexp">/sites-enabled/</span><span class="number">000</span>-<span class="keyword">default</span>.conf</span><br></pre></td></tr></tbody></table></figure> And put the following line to the file. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">WSGIPassAuthorization</span> <span class="literal">On</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Ubuntu</category>
        <category>PostgreSQL</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Django</tag>
        <tag>Apache</tag>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Basic Usage of PostgreSQL</title>
    <url>/2023/02/11/Basic-Usage-of-PostgreSQL/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://www.postgresql.org/">PostgreSQL</a> is a powerful, open source object-relational database system with over 35 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. Here I will introduce some basic commands of PostgreSQL <span id="more"></span> ## Default User PostgreSQL creates a default user named <strong>postgres</strong> for you after installation. The default user has full access to PostgreSQL's database, including creating a new database, reading data from a database, and updating data into a database. ### Reset Password If we want to use PostgreSQL in Django applications, the password is required. However, the default user <strong>postgres</strong> doesn't have a password and we must set password for <strong>postgres</strong>. </p><figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">sudo -u postgres psql</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> postgres <span class="keyword">WITH</span> <span class="keyword">PASSWORD</span> <span class="string">'12345678'</span>;</span><br><span class="line">\q</span><br><span class="line">service postgresql <span class="keyword">restart</span> / systemctl <span class="keyword">restart</span> postgresql</span><br></pre></td></tr></tbody></table></figure> ## Basic Command * Check status <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">service postgresql status</span></span><br></pre></td></tr></tbody></table></figure> * Start psql with user postgres <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo -u postgres psql</span></span><br></pre></td></tr></tbody></table></figure> * Create Database <figure class="highlight n1ql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> servo;</span><br></pre></td></tr></tbody></table></figure> * List Databases <figure class="highlight livescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">\l</span></span><br></pre></td></tr></tbody></table></figure> * List Users <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">\<span class="built_in">du</span></span><br></pre></td></tr></tbody></table></figure> * Connect to database <figure class="highlight livescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">\c</span> servo</span><br></pre></td></tr></tbody></table></figure> * List tables <figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">\<span class="selector-tag">dt</span></span><br></pre></td></tr></tbody></table></figure> * Quit <figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">\<span class="selector-tag">q</span></span><br></pre></td></tr></tbody></table></figure> * Show data <figure class="highlight axapta"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> xxx_table</span><br></pre></td></tr></tbody></table></figure> * Show data directory <figure class="highlight abnf"><table><tbody><tr><td class="code"><pre><span class="line">show data_directory<span class="comment">;</span></span><br></pre></td></tr></tbody></table></figure> ## Backup &amp; Restore ### Backup <figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">sudo -u postgres pg_dump -Fc servo &gt; servo.bak</span><br></pre></td></tr></tbody></table></figure> ### Restore <figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">sudo -u postgres pg_restore -Fc -d servo &lt; /var/lib/postgresql/servo.bak</span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>PostgreSQL</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Expose Local Devices Behind A NAT To The Internet Using frp</title>
    <url>/2023/02/15/Expose-Local-Devices-Behind-A-NAT-To-The-Internet-Using-FRP/</url>
    <content><![CDATA[<html><head></head><body><p>Nowadays, there are lots of intelligent devices at home, such as a personal web server or a NAS. It is quite convenient if we can visit these devices anywhere and anytime. However, the home network provides by broadband providers is usually in a local network and doesn't have a public IP. Therefore, it is difficult to visit the device at home. <a href="https://github.com/fatedier/frp"><strong>frp</strong></a> is a reverse proxy that can penetrate the broadband providers' local network and make the devices at home available on the Internet. I will teach you how to deploy a reverse proxy using <strong>frp</strong> step by step. Note that you must have a server with a public IP available on the Internet. <span id="more"></span> ### Installation #### Confirm Machine Architecture Open a terminal and check the machine architecture of your server using <strong>arch</strong> command. </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">arch</span></span><br></pre></td></tr></tbody></table></figure> If the result is <strong>x86_64</strong>, we can download <strong>amd64</strong> version of <strong>frp</strong>. #### Download Go the release page of <strong>frp</strong> on GitHub and download the latest release. The os of my server is Ubuntu 18.04, thus I download <strong>frp_0.47.0_linux_amd64.tar.gz </strong> using the following command. <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/fatedier/</span>frp<span class="regexp">/releases/</span>download<span class="regexp">/v0.47.0/</span>frp_0.<span class="number">47.0</span>_linux_amd64.tar.gz</span><br></pre></td></tr></tbody></table></figure> After download, mv the file to the root dir <strong>"/"</strong>, which is more convenient to run it. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">mv</span> frp_0.<span class="number">47</span>.<span class="number">0</span>_linux_amd64.tar.gz ~/..</span><br></pre></td></tr></tbody></table></figure> #### Installation The files we download contains the execution and configuration files of <strong>frp</strong> well complied and built using the source code. Unzip them using the following command. <figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line">tar -zxvf frp_0.47.0_linux_amd64.tar.gz</span><br></pre></td></tr></tbody></table></figure> And delete the compressed file. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">rm</span> frp_0.<span class="number">47</span>.<span class="number">0</span>_linux_amd64.tar.gz</span><br></pre></td></tr></tbody></table></figure> ### Server Configuration Go to the directory and show the files. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> frp_0.<span class="number">47</span>.<span class="number">0</span>_linux_amd64</span><br><span class="line"><span class="attribute">ls</span></span><br></pre></td></tr></tbody></table></figure> You will see the following files. <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">├── frpc</span><br><span class="line">├── frpc_full<span class="selector-class">.ini</span></span><br><span class="line">├── frpc<span class="selector-class">.ini</span></span><br><span class="line">├── frps</span><br><span class="line">├── frps_full<span class="selector-class">.ini</span></span><br><span class="line">├── frps<span class="selector-class">.ini</span></span><br><span class="line">├── LICENSE</span><br></pre></td></tr></tbody></table></figure> <strong>frps</strong> and <strong>frps.ini</strong> are the execution and configuration files for server and <strong>frpc</strong> and <strong>frpc.ini</strong> are the files for client. Open <strong>frps.ini</strong> using vim and modify it as follows. <figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">vi</span> frps.ini</span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = <span class="number">12345678</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">10080</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">10443</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><strong>bind_port</strong> set the port used by frps on the server</li>
<li><strong>token</strong> is used by frpc to verify the connection</li>
<li><strong>dashboard</strong> let us check the status of the frps using port 7500.</li>
</ul>
<p>Run the server and test the configuration by the following command. </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./frps -c frps.ini</span><br></pre></td></tr></tbody></table></figure> If we see the following log, congratulations, the <strong>frps</strong> is deployed successfully. <figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">2023</span><span class="regexp">/02/</span><span class="number">13</span> <span class="number">23</span>:<span class="number">54</span>:<span class="number">24</span> [I] [root.go:<span class="number">206</span>] frps uses config <span class="keyword">file</span>: frps.ini</span><br><span class="line"><span class="number">2023</span><span class="regexp">/02/</span><span class="number">13</span> <span class="number">23</span>:<span class="number">54</span>:<span class="number">24</span> [I] [service.go:<span class="number">200</span>] frps tcp listen on <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">7000</span></span><br><span class="line"><span class="number">2023</span><span class="regexp">/02/</span><span class="number">13</span> <span class="number">23</span>:<span class="number">54</span>:<span class="number">24</span> [I] [service.go:<span class="number">261</span>] http service listen on <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">10080</span></span><br><span class="line"><span class="number">2023</span><span class="regexp">/02/</span><span class="number">13</span> <span class="number">23</span>:<span class="number">54</span>:<span class="number">24</span> [I] [service.go:<span class="number">276</span>] https service listen on <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">10443</span></span><br><span class="line"><span class="number">2023</span><span class="regexp">/02/</span><span class="number">13</span> <span class="number">23</span>:<span class="number">54</span>:<span class="number">24</span> [I] [service.go:<span class="number">317</span>] Dashboard listen on <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">7500</span></span><br><span class="line"><span class="number">2023</span><span class="regexp">/02/</span><span class="number">13</span> <span class="number">23</span>:<span class="number">54</span>:<span class="number">24</span> [I] [root.go:<span class="number">215</span>] frps started successfully</span><br></pre></td></tr></tbody></table></figure> You can check the status of <strong>frps</strong> via "http://127.0.0.1:7500". If we close the ssh connection or terminal, <strong>frps</strong> will stop. <strong>nohup</strong> command can help to make frps run continually in the background ignoring hangup signals. <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./frps -c frps.ini &amp;</span><br></pre></td></tr></tbody></table></figure> ### Client Configuration Put <strong>frpc</strong> and <strong>frpc.ini</strong> on the client. Edit <strong>frpc.ini</strong> as follows. <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">11232035</span></span><br><span class="line"><span class="attr">log_file</span> = /dev/null</span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">protocol</span> = tcp</span><br><span class="line"><span class="attr">login_fail_exit</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">user</span> = RT-AC86U</span><br></pre></td></tr></tbody></table></figure> * <strong>server_addr</strong> is the public IP of your server * <strong>server_port</strong> is bind_port we set in frps.ini, the client will send data to the server's bind port. * <strong>token</strong> is the token we set in frps.ini, which is used for authentication * <strong>log</strong> lines configure the log directory and log level and days to keep. * <strong>tcp</strong> lines configure the connection between the server and client is tcp. After the general <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[router]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7080</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[git]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.10</span>.<span class="number">10.10</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">30000</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">30000</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[git-ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">10.10</span>.<span class="number">10.10</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">30001</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">30001</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>frp</category>
      </categories>
      <tags>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>Set Up Jupyter Lab on Ubuntu 22.04</title>
    <url>/2023/02/19/Set-Up-Jupyter-Notebook-on-Ubuntu-18-04/</url>
    <content><![CDATA[<html><head></head><body><p><a href="http://jupyter.org/">Jupyter Lab</a> is an open-source web application that lets you create and share interactive code, visualizations, and more. This tool can be used with several programming languages, including Python, Julia, R, Haskell, and Ruby. It is often used for working with data, statistical modeling, and machine learning.</p>
<p>This tutorial will walk you through setting up Jupyter Notebook to run from an Ubuntu 18.04 server, as well as teach you how to connect to and use the Notebook. Jupyter Notebooks (or simply Notebooks) are documents produced by the Jupyter Notebook app which contain both computer code and rich text elements (paragraph, equations, figures, links, etc.) which aid in presenting and sharing reproducible research. In the final step of this guide, you will run Python 3 code using a Jupyter Notebook running on a remote server. <span id="more"></span> ### Installation Please make sure python3 and pip3 are installed. If not, install them using the following command. </p><figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">update</span></span><br><span class="line">sudo apt install <span class="keyword">python3</span>-pip <span class="keyword">python3</span>-dev</span><br></pre></td></tr></tbody></table></figure> <del>Then install jupyter notebook using pip3.</del> <figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> notebook</span><br></pre></td></tr></tbody></table></figure> Then install jupyter lab using pip3. <figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> jupyterlab</span><br></pre></td></tr></tbody></table></figure> Update PATH environment variable. <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=/home/robot/.local/bin${PATH:+:${PATH}}'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></tbody></table></figure> After installation, check the version of jupyter. <figure class="highlight ada"><table><tbody><tr><td class="code"><pre><span class="line">jupyter <span class="comment">--version</span></span><br></pre></td></tr></tbody></table></figure> If you see the following result, the jupyter notebook is installed successfully. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">Selected</span> Jupyter core packages...</span><br><span class="line"><span class="attribute">IPython</span>          : <span class="number">7</span>.<span class="number">16</span>.<span class="number">3</span></span><br><span class="line"><span class="attribute">ipykernel</span>        : <span class="number">5</span>.<span class="number">5</span>.<span class="number">6</span></span><br><span class="line"><span class="attribute">ipywidgets</span>       : not installed</span><br><span class="line"><span class="attribute">jupyter_client</span>   : <span class="number">7</span>.<span class="number">1</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">jupyter_core</span>     : <span class="number">4</span>.<span class="number">9</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">jupyter_server</span>   : not installed</span><br><span class="line"><span class="attribute">jupyterlab</span>       : not installed</span><br><span class="line"><span class="attribute">nbclient</span>         : <span class="number">0</span>.<span class="number">5</span>.<span class="number">9</span></span><br><span class="line"><span class="attribute">nbconvert</span>        : <span class="number">6</span>.<span class="number">0</span>.<span class="number">7</span></span><br><span class="line"><span class="attribute">nbformat</span>         : <span class="number">5</span>.<span class="number">1</span>.<span class="number">3</span></span><br><span class="line"><span class="attribute">notebook</span>         : <span class="number">6</span>.<span class="number">4</span>.<span class="number">10</span></span><br><span class="line"><span class="attribute">qtconsole</span>        : not installed</span><br><span class="line"><span class="attribute">traitlets</span>        : <span class="number">4</span>.<span class="number">3</span>.<span class="number">3</span></span><br></pre></td></tr></tbody></table></figure> ### Set Password jupyter notebook needs a password to login before use it. We can generate a password using the <strong>passwd()</strong> function jupyter provide. First, open a python shell by <strong>python</strong> command in terminal. Then generate a password by the following command. <figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> notebook.auth <span class="keyword">import</span> passwd;</span><br><span class="line">passwd()</span><br></pre></td></tr></tbody></table></figure> Input a password and it will generate a token for this password. Please keep this token and we will use it later to configure jupyter. ### Configuration Before using jupyter notebook, we had better set some configurations for it. Using the following command to generate a configuration file. <figure class="highlight verilog"><table><tbody><tr><td class="code"><pre><span class="line">jupyter notebook --<span class="keyword">generate</span>-<span class="keyword">config</span></span><br></pre></td></tr></tbody></table></figure> A configuration file named <strong>jupyter_notebook_config.py</strong> is created in directory <strong>~/.jupyter</strong>. Open and edit this file. <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> .jupyter/jupyter_notebook_config.<span class="keyword">py</span></span><br></pre></td></tr></tbody></table></figure> There are lots of configurations and what I set is as follows: <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">## Whether to allow the user to run the notebook as root. If you do not install jupyter in a virtual env, please set this option as True.</span></span><br><span class="line"><span class="attr">c.NotebookApp.allow_root</span> = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## The IP address the notebook server will listen on. '*' means any IP.</span></span><br><span class="line"><span class="attr">c.NotebookApp.ip</span> = <span class="string">'*'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## The directory to use for notebooks and kernels. Please do not use full path, jupyter will add the default path prefix automatically.</span></span><br><span class="line"><span class="attr">c.NotebookApp.notebook_dir</span> = <span class="string">'gits/jupyter/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Whether to open in a browser after starting. The specific browser used is</span></span><br><span class="line"><span class="comment">#  platform dependent and determined by the python standard library `webbrowser`</span></span><br><span class="line"><span class="comment">#  module, unless it is overridden using the --browser (NotebookApp.browser)</span></span><br><span class="line"><span class="comment">#  configuration option.</span></span><br><span class="line"><span class="attr">c.NotebookApp.open_browser</span> = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##  The string should be of the form type:salt:hashed-password. Copy the token generated by passwd().</span></span><br><span class="line"><span class="attr">c.NotebookApp.password</span> = <span class="string">'argon2:$argon2id$v=19$m=10240,t=10,p=8$x/wZxj7yQsoUagjuidgnaiudgiu9adniaunaneianngda'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## The port the notebook server will listen on (env: JUPYTER_PORT).</span></span><br><span class="line"><span class="attr">c.NotebookApp.port</span> = <span class="number">8888</span></span><br></pre></td></tr></tbody></table></figure> Then we can run jupyter notebook by executing the following command: <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">jupyter notebook</span></span><br></pre></td></tr></tbody></table></figure> The port number used in jupyter is 8888, then we can visit jupyter notebook via http://127.0.0.1:8888. Password is required when visit the page for first time, and we can input the password created by the former step. Please make sure the 8888 port is allowed by firewall. If not allowed, use the following command to set it. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> ufw <span class="literal">allow</span> <span class="number">8888</span></span><br></pre></td></tr></tbody></table></figure> ### Run Service If we start jupyter notebook by command <strong>jupyter notebook</strong>, it will close when the terminal is close. Usually, we want jupyter notebook to keep running, thus we can use it whenever we need. We can make jupyter as a system service. <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">sudo vi <span class="regexp">/lib/</span>systemd<span class="regexp">/system/</span>jupyter.service</span><br></pre></td></tr></tbody></table></figure> Edit this file as follows. <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="comment"># A short description about the service</span></span><br><span class="line"><span class="attr">Description</span>=Juyper-NoteBook</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="comment"># Use simple run type and define the PIDFile</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">PIDFile</span>=/run/jupyter.pid</span><br><span class="line"></span><br><span class="line"><span class="comment"># The start command</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/bin/jupyter-notebook</span><br><span class="line"><span class="comment"># The stop command</span></span><br><span class="line"><span class="attr">ExecStop</span>=/usr/bin/pkill jupyter-notebook</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set always restart when fail.</span></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="comment"># The time wait for before restart</span></span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">30</span>s</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set user name</span></span><br><span class="line"><span class="attr">User</span>=root</span><br><span class="line"><span class="comment"># Set group name</span></span><br><span class="line"><span class="attr">Group</span>=root</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/root</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="comment"># Set Target</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></tbody></table></figure> Start jupyter service by the following commands. <figure class="highlight nsis"><table><tbody><tr><td class="code"><pre><span class="line">sudo <span class="params">system</span>ctl daemon-reload</span><br><span class="line">sudo <span class="params">system</span>ctl enable jupyter</span><br><span class="line">sudo <span class="params">system</span>ctl start jupyter</span><br></pre></td></tr></tbody></table></figure> We can also check the running status of jupyter service if there is anything wrong during start. <figure class="highlight fortran"><table><tbody><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">status</span> jupyter.service</span><br></pre></td></tr></tbody></table></figure> ### Extensions <a href="https://github.com/ipython-contrib/jupyter_contrib_nbextensions"><strong>jupyter_contrib_nbextensions</strong></a> helps to manage a collect of extensions that can add functionality to jupyter notebook, which make it easier to use. <figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line">pip <span class="keyword">install </span><span class="keyword">jupyter_contrib_nbextensions</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jupyter </span>contrib nbextension <span class="keyword">install </span>--user</span><br><span class="line">pip <span class="keyword">install </span><span class="keyword">jupyter_nbextensions_configurator</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">jupyter </span>nbextensions_configurator enable --user</span><br><span class="line">systemctl restart <span class="keyword">jupyter</span></span><br></pre></td></tr></tbody></table></figure> Then we can configure notebooks's functions via the web page. Install autopep8, if we want use it in notebook. <figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">pip install <span class="built_in">auto</span>pep8</span><br></pre></td></tr></tbody></table></figure> ### Problems &amp; Solutions #### Content Security Policy: Refused to frame 'http://www.zhaoyongsheng.com:8888/' because an ancestor violates the following Content Security Policy directive: "frame-ancestors 'self'". Domain masking also knows as URL Masking. It is the act of hiding the actual domain name of a website from the user’s web browser and showing another domain name. We can user url masking to allocate a domain name for jupyter notebook instead of visiting it via a specific port. For example, if we deploy jupyter notebook on http://www.somesite.com:8888, then we can allocate a second class domain name, such as http://jupyter.somesite.com. For secure reasons, jupyter notebook refuse this kind of url masking by default. Thus we will meet this error because the url masked frame ancestor is unknown. Here is the solution. Open jupyter notebook's config file using vim. <figure class="highlight arcade"><table><tbody><tr><td class="code"><pre><span class="line">vi ~<span class="regexp">/.jupyter/</span>jupyter_notebook_config.py</span><br></pre></td></tr></tbody></table></figure> And edit tornado settings as follows, which <strong>http://jupoyter.somesite.com</strong> is the url we used to mask the original url. <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">c.NotebookApp.tornado_settings</span> = { <span class="string">'headers'</span>: { <span class="string">'Content-Security-Policy'</span>: <span class="string">"frame-ancestors 'self' http://jupyter.somesite.com"</span> } }</span><br></pre></td></tr></tbody></table></figure> After configuration, restart jupyter service.<p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Jupyter Notebook</category>
        <category>Jupyter Lab</category>
      </categories>
      <tags>
        <tag>Jupyter Notebook</tag>
        <tag>Jupyter Lab</tag>
      </tags>
  </entry>
  <entry>
    <title>Solution For node&#39;s Warning: Accessing non-existent property &#39;column&#39; of module exports inside circular dependency</title>
    <url>/2023/02/19/Solution-For-npm-s-Warning-Accessing-non-existent-property-column-of-module-exports-inside-circular-dependency/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://docs.npmjs.com/about-npm"><strong>npm</strong></a> is the world's largest software registry, which can help to share and manage packages. <a href="https://blog.zhaoyongsheng.com/2019/12/01/Build-and-Deploy-Your-Personal-Blog-Using-Hexo-NexT-and-GitHub/">Hexo</a> uses <strong>npm</strong> to install and upgrade its dependency packages. When the version of <strong>node</strong> is 14 or latter, you probably meets this annoying warning "Warning: Accessing non-existent property 'column' of module exports inside circular dependency". Here I will show you how to solve this problem using the method that verified by myself. <span id="more"></span> ## Problem When we use <strong>Hexo</strong> command lines, there are some annoying warnings. </p><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">(<span class="keyword">node</span><span class="title">:82677</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'lineno' of module exports inside circular dependency</span><br><span class="line">(Use `<span class="keyword">node</span> <span class="title">--trace-warnings</span> ...` to show where the warning was created)</span><br><span class="line">(<span class="keyword">node</span><span class="title">:82677</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'column' of module exports inside circular dependency</span><br><span class="line">(<span class="keyword">node</span><span class="title">:82677</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'filename' of module exports inside circular dependency</span><br><span class="line">(<span class="keyword">node</span><span class="title">:82677</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'lineno' of module exports inside circular dependency</span><br><span class="line">(<span class="keyword">node</span><span class="title">:82677</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'column' of module exports inside circular dependency</span><br><span class="line">(<span class="keyword">node</span><span class="title">:82677</span>) Warning: Accessing non-existent <span class="keyword">property</span><span class="title"> </span>'filename' of module exports inside circular dependency</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> As said by <a href="https://github.com/hexojs/hexo/issues/4257">Hexo Issue 4257</a>, these warnings are because the <strong>node</strong>'s version is 14 and there are compatible issues in package <strong>stylus</strong>. There is one recommend solution is that downgrade your node to 12 to avoid this annoying warning. Since I don't want to use the lower version of <strong>Node</strong>, I didn't try this method.<p></p>
<p>Some posts in <a href="https://github.com/stylus/stylus/issues/2534">Stylus Issue 2534</a> said that this problem is fixed by stylus@0.54.8. I have installed <strong>stylus 0.54.8</strong> or even <strong>0.59.0</strong> by force, but these warnings still exit. It seems that the problem I met is different and can't solved by upgrade <strong>stylus</strong> to <strong>0.54.8</strong> or latter. ## Solution With <strong>trace-warnings</strong> option, we can trace the detail info about these warnings. </p><figure class="highlight verilog"><table><tbody><tr><td class="code"><pre><span class="line">npx <span class="keyword">cross</span>-env NODE_OPTIONS=<span class="string">"--trace-warnings"</span> hexo <span class="keyword">generate</span></span><br></pre></td></tr></tbody></table></figure> The log shows that these warnings is generate by <strong>stylus</strong>. ### Dependency of <strong>stylus</strong> Using the following command to show the dependency of <strong>stylus</strong>. <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="built_in">ls</span> stylus </span><br></pre></td></tr></tbody></table></figure> We will see the result. <figure class="highlight mel"><table><tbody><tr><td class="code"><pre><span class="line">hexo-site@0<span class="number">.0</span><span class="number">.0</span> /Gits/blog-github</span><br><span class="line">├─┬ hexo-<span class="keyword">renderer</span>-stylus@0<span class="number">.2</span><span class="number">.3</span></span><br><span class="line">│ ├─┬ nib@1<span class="number">.2</span><span class="number">.0</span></span><br><span class="line">│ │ └── stylus@0<span class="number">.59</span><span class="number">.0</span> deduped</span><br><span class="line">│ └── stylus@0<span class="number">.50</span><span class="number">.0</span></span><br><span class="line">├─┬ stylus-native-loader@1<span class="number">.4</span><span class="number">.9</span></span><br><span class="line">│ └── stylus@0<span class="number">.59</span><span class="number">.0</span> deduped</span><br><span class="line">└── stylus@0<span class="number">.59</span><span class="number">.0</span></span><br></pre></td></tr></tbody></table></figure> As we can see, the <strong>hexo-site@0.0.0</strong> depends on <strong>hexo-renderer-stylus@0.2.3</strong> and <strong>hexo-renderer-stylus@0.2.3</strong> depends on <strong>stylus@0.50.0</strong>. These warnings are fixed by <strong>stylus@0.54.8</strong> or later. ### Update package.json of <strong>hexo-renderer-stylus</strong> Let <strong>hexo-renderer-stylus</strong> use <strong>stylus@0.54.8</strong> or later may fix this issue. Open package.json. <figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">vi node_modules<span class="regexp">/hexo-renderer-stylus/</span><span class="keyword">package</span>.json</span><br></pre></td></tr></tbody></table></figure> And update the dependency of stylus. <figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"dependencies"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"minimatch"</span><span class="punctuation">:</span> <span class="string">"^3.0.2"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"nib"</span><span class="punctuation">:</span> <span class="string">"^1.1.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"stylus"</span><span class="punctuation">:</span> <span class="string">"^0.54.8"</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure> Finally, install the dependency. <figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></tbody></table></figure> After installation, we try <strong>Hexo</strong> command line to test these warnings are shown or not. If they are not shown anymore, congratulations, you fix this issue successfully.<p></p>
<h3 id="another-solution">Another Solution</h3>
<p>The reason that <strong>hexo-renderer-stylus</strong> depends <strong>stylus@0.50.0</strong> is <strong>hexo-renderer-stylus</strong>'s version is too low to use higher version of <strong>stylus</strong>. Thus the solution is to upgrade <strong>hexo-renderer-stylus</strong> to latest version. First, check the latest version using the following command. </p><figure class="highlight coffeescript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> view hexo-renderer-stylus versions</span><br></pre></td></tr></tbody></table></figure> All the available versions will be printed. <figure class="highlight scheme"><table><tbody><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="symbol">'0.0.1</span>', <span class="symbol">'0.0.2</span>',</span><br><span class="line">  <span class="symbol">'0.1.0</span>', <span class="symbol">'0.2.1</span>',</span><br><span class="line">  <span class="symbol">'0.2.2</span>', <span class="symbol">'0.2.3</span>',</span><br><span class="line">  <span class="symbol">'0.3.0</span>', <span class="symbol">'0.3.1</span>',</span><br><span class="line">  <span class="symbol">'0.3.3</span>', <span class="symbol">'1.0.0</span>',</span><br><span class="line">  <span class="symbol">'1.1.0</span>', <span class="symbol">'2.0.0</span>',</span><br><span class="line">  <span class="symbol">'2.0.1</span>', <span class="symbol">'2.1.0</span>'</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure> Second, install the latest version using the following command. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">npm</span> install hexo-renderer-stylus@<span class="number">2</span>.<span class="number">1</span>.<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure> Then check the dependency of <strong>stylus</strong>. <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm <span class="built_in">ls</span> stylus</span><br></pre></td></tr></tbody></table></figure> And version of <em>stylus</em> is update to <strong>0.57.0</strong> from <strong>0.50.0</strong> <figure class="highlight mel"><table><tbody><tr><td class="code"><pre><span class="line">hexo-site@0<span class="number">.0</span><span class="number">.0</span> Gits/blog-github</span><br><span class="line">├─┬ hexo-<span class="keyword">renderer</span>-stylus@2<span class="number">.1</span><span class="number">.0</span></span><br><span class="line">│ ├─┬ nib@1<span class="number">.2</span><span class="number">.0</span></span><br><span class="line">│ │ └── stylus@0<span class="number">.59</span><span class="number">.0</span> deduped</span><br><span class="line">│ └── stylus@0<span class="number">.57</span><span class="number">.0</span></span><br><span class="line">├─┬ stylus-native-loader@1<span class="number">.4</span><span class="number">.9</span></span><br><span class="line">│ └── stylus@0<span class="number">.59</span><span class="number">.0</span> deduped</span><br><span class="line">└── stylus@0<span class="number">.59</span><span class="number">.0</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Hexo</category>
        <category>npm</category>
      </categories>
      <tags>
        <tag>-- Hexo -- npm</tag>
      </tags>
  </entry>
  <entry>
    <title>A Method To Make Git Ignore Take Effect</title>
    <url>/2023/02/20/A-Method-To-Make-Git-Ignore-Take-Effect/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://git-scm.com/">Git</a> is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. In a git repository, if there are some files or folders that we don't want to handle by git, we can ignore them by setup a <strong>.gitignore</strong> config file. Sometime, git ignore doesn't take effect after we add some files or folders to <strong>.gitignore</strong>, especially when the files or folders we add have already been tracked by git. In this tutorial, I will show you how to fix the problem of git ignore not working. <span id="more"></span> Adding files or folders to <strong>.gitignore</strong> doesn't remove them from git cache. We have to remove them from git cache manually. ### files First, add and commit every changed files. Second, remove the ignore files from git cache using the following command. </p><figure class="highlight delphi"><table><tbody><tr><td class="code"><pre><span class="line">git rm --cached <span class="keyword">file</span>.<span class="keyword">name</span></span><br></pre></td></tr></tbody></table></figure> Third, commit the delete. <figure class="highlight maxima"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"ignore file.name"</span></span><br><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></tbody></table></figure> ### folders Steps are similar with ignoring files. But the command that removes folders from git cache is different. <figure class="highlight ada"><table><tbody><tr><td class="code"><pre><span class="line">git rm -rf <span class="comment">--cached folder_name</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Gitß</tag>
      </tags>
  </entry>
  <entry>
    <title>Configure Host for SSH</title>
    <url>/2023/02/20/Configure-Host-for-SSH/</url>
    <content><![CDATA[<html><head></head><body><p><strong>SSH</strong> is secure way to login a server. It is difficult to remember the IPs of several servers. In this tutorials, I will teach to setup host of <strong>SSH</strong> to login using hostname instead of IP. <span id="more"></span> ### Create Config File Create a custom ssh config file by the following command. </p><figure class="highlight arcade"><table><tbody><tr><td class="code"><pre><span class="line">vi ~<span class="regexp">/.ssh/</span>config</span><br></pre></td></tr></tbody></table></figure> ### Add Host <figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">Host gitlab.com</span><br><span class="line">    HostName <span class="number">10.10</span>.<span class="number">10.10</span></span><br><span class="line">    <span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">    Port <span class="number">30001</span></span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></tbody></table></figure> The above host is a ssh connect for git. With this host, we can use <strong>ssh://git@gitlab.com:30001/</strong> to clone and push.<p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Git</category>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Basic Usage of Git</title>
    <url>/2023/02/23/Basic-Usage-of-Git/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://git-scm.com/">Git</a> is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. In this article, I will introduce some useful skills of using git to manage version control. <span id="more"></span> ### Manage Remote Repository #### Add </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">git remote add origin ssh:<span class="regexp">//gi</span>t@gitlab.com:<span class="number">30001</span><span class="regexp">/yongsheng/</span>jupyter.git</span><br></pre></td></tr></tbody></table></figure> The above command will add a remote repository to a git project named <strong>origin</strong>. We can add multiple remote repositories using different names, such <strong>backup</strong>, <strong>test</strong> and so on. #### Change URL <figure class="highlight dsconfig"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">remote</span> <span class="built_in">set-url</span> <span class="string">origin</span> <span class="string">ssh</span>://<span class="string">git</span>@<span class="string">gitlab</span>.<span class="string">com:30001/</span><span class="string">yongsheng</span>/<span class="string">jupyter</span>.<span class="string">git</span></span><br></pre></td></tr></tbody></table></figure> The <strong>set-url</strong> option can change the url of an existing repository. It takes two parameters, one is the repository's name and the other one is the new url of remote repository. #### Delete <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br></pre></td></tr></tbody></table></figure> The <strong>rm</strong> option can remove an repository using its name.<p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Coding Skills Of SwiftUI For Beginners</title>
    <url>/2023/02/23/Coding-Skills-Of-SwiftUI-For-Beginners/</url>
    <content><![CDATA[<html><head></head><body><p>This article records the problems I met when developing an ios app as a beginner and the corresponding solutions. Besides, there are some useful coding skills that deserve to share with you. If you are a beginner of SwiftUI, I hope this article will help you to learning SwiftUI quickly and easily. <span id="more"></span> ### Errors &amp; Solutions #### [UICalendarView] UICalendarView's height is smaller than it can render its content in; defaulting to the minimum height. This warning seems to be a bug of swiftui. It is because the width of <strong>DatePicker</strong> is larger than the device's width. Therefore solve this warning by the following modifier. </p><figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line">.<span class="built_in">frame</span>(width: UIScreen.main.bounds.width - <span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>SwiftUI</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
        <tag>ios app</tag>
      </tags>
  </entry>
  <entry>
    <title>Deploy Gitlab Using Docker On Synology DS218+</title>
    <url>/2023/02/25/Deploy-Gitlab-Using-Docker-On-Synology-DS218/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://about.gitlab.com/">Gitlab</a> is a perfect software that we can use to build a personal git repository manage system on local servers. In this article, I will deploy a gitlab using docker on synology DS218+ step by step. <span id="more"></span> ### Install Gitlab #### Install Docker Docker is supported by a series of synology nas hardwares. We can install docker in suite center. #### Download Gitlab Image Open docker and search <strong>gitlab</strong> in registration tab page. You can download the latest release or the release that has the most downloads. I choose <em>gitlab-ce</em> that has the most downloads, which is more stable. #### Install &amp; Config Gitlab Double click the downloaded image to install it. Input the name of the docker, for example, <strong>gitlab-ce</strong>. And click the button <strong>Advanced Settings</strong>. ##### Directory In the volume tab, we build and configure three directories for gitlab to store logs, configurations and data correspondingly. </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">docker<span class="regexp">/gitlab/</span>logs -&gt; <span class="regexp">/var/</span>log/gitlab</span><br><span class="line">docker<span class="regexp">/gitlab/</span>config -&gt; <span class="regexp">/etc/gi</span>tlab</span><br><span class="line">docker<span class="regexp">/gitlab/</span>data -&gt; <span class="regexp">/var/</span>opt/gitlab</span><br></pre></td></tr></tbody></table></figure> ##### Port We need set the http, https and ssh port map for serving gitlab. The default ports of http, https on docker are 80, 443 and 22. These three ports are reserved in synology nas and we had better use other ports instead. Here I use 30000 to map 80, 30001 to map 22. Finish the above steps, we can run this docker. A few minutes latter, we can visit gitlab via "http://192.168.1.2:30000", where "192.168.1.2" is the ip of synology nas. ### Customize Gitlab We can further customize gitlab for better performance. #### external_url <strong>external_url</strong> defines the http url of gitlab. <figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><span class="line">external_url 'http://192.168.1.2:<span class="number">3000</span>0'</span><br></pre></td></tr></tbody></table></figure> #### ssh host name and port The default ssh host name is the ip address, which is difficult to use. We can custom the ssh host name using a domain name such as <strong>gitlab.com</strong> <figure class="highlight prolog"><table><tbody><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">'gitlab_ssh_host'</span>] = <span class="string">'gitlab.com'</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_shell_ssh_port'</span>] = <span class="number">30001</span></span><br></pre></td></tr></tbody></table></figure> The remote url of a repository become "ssh://git@gitlab.com:30001/yongsheng/jupyter.git", which is more readable. #### close email service It is better to close email function if the gitlab is a personal one to achieve a better performance. <figure class="highlight actionscript"><table><tbody><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">'smtp_enable'</span>] = <span class="literal">false</span></span><br><span class="line">gitlab_rails[<span class="string">'gitlab_email_enabled'</span>] = <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure> #### content_security_policy Set frame ancestors for url masking. Thus we can visit gitlab by the masked url, for example, "http://gitlab.demo.com" <figure class="highlight sml"><table><tbody><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="symbol">'content_security_policy'</span>] = {</span><br><span class="line"> <span class="symbol">'enabled'</span> =&gt; <span class="literal">true</span>,</span><br><span class="line"> <span class="symbol">'report_only'</span> =&gt; <span class="literal">false</span>,</span><br><span class="line"># <span class="type">Each</span> directive is a <span class="type">String</span> (e.g. <span class="string">"'self'"</span>).</span><br><span class="line"> <span class="symbol">'directives'</span> =&gt; {</span><br><span class="line">   <span class="symbol">'base_uri'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'child_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'connect_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'default_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'font_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'form_action'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'frame_ancestors'</span> =&gt; <span class="string">"gitlab.demo.com"</span>,</span><br><span class="line">   <span class="symbol">'frame_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'img_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'manifest_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'media_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'object_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'script_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'style_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'worker_src'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line">   <span class="symbol">'report_uri'</span> =&gt; <span class="literal">nil</span>,</span><br><span class="line"> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> #### better performance Close the functions that are rarely use. <figure class="highlight prolog"><table><tbody><tr><td class="code"><pre><span class="line">gitlab_rails[<span class="string">'terraform_state_enabled'</span>] = false</span><br><span class="line">gitlab_rails[<span class="string">'usage_ping_enabled'</span>] = false</span><br><span class="line">gitlab_rails[<span class="string">'registry_enabled'</span>] = false</span><br><span class="line">registry[<span class="string">'enable'</span>] = false</span><br><span class="line">sidekiq[<span class="string">'metrics_enabled'</span>] = false</span><br><span class="line">gitlab_ci[<span class="string">'gitlab_ci_all_broken_builds'</span>] = false</span><br><span class="line">gitlab_rails[<span class="string">'gitlab_kas_enabled'</span>] = false</span><br><span class="line">gitlab_kas[<span class="string">'enable'</span>] = false</span><br><span class="line">mattermost[<span class="string">'enable'</span>] = false</span><br><span class="line">prometheus[<span class="string">'enable'</span>] = false</span><br><span class="line">alertmanager[<span class="string">'enable'</span>] = false</span><br><span class="line">node_exporter[<span class="string">'enable'</span>] = false</span><br><span class="line">redis_exporter[<span class="string">'enable'</span>] = false</span><br><span class="line">postgres_exporter[<span class="string">'enable'</span>] = false</span><br><span class="line">gitlab_exporter[<span class="string">'enable'</span>] = false</span><br><span class="line">prometheus_monitoring[<span class="string">'enable'</span>] = false</span><br><span class="line">grafana[<span class="string">'enable'</span>] = false</span><br><span class="line">grafana[<span class="string">'reporting_enabled'</span>] = false</span><br><span class="line">gitlab_rails[<span class="string">'kerberos_enabled'</span>] = false</span><br><span class="line">sentinel[<span class="string">'enable'</span>] = false</span><br></pre></td></tr></tbody></table></figure> This is my <a href="gitlab.rb">gitlab.rb</a>. Feel free to download and use it. ### Commands #### start <figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">gitlab-ctl <span class="literal">start</span></span><br></pre></td></tr></tbody></table></figure> #### stop <figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line">gitlab-ctl stop</span><br></pre></td></tr></tbody></table></figure> #### reconfigure <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">gitlab-ctl reconfigure</span></span><br></pre></td></tr></tbody></table></figure> This command will make the configuration take effect and restart gitlab. #### restart <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">gitlab-ctl restart</span></span><br></pre></td></tr></tbody></table></figure> #### status <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">gitlab-ctl status</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Gitlab</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Coding Skills of Django</title>
    <url>/2023/03/03/Coding-Skills-of-Django/</url>
    <content><![CDATA[<html><head></head><body><p>In this article, I will share some useful coding skills of Django. Hope it helps you. <span id="more"></span> ### Errors &amp; Solutions #### Related Field has invalid lookup: icontains ##### Error Condition When using search function in <strong>admin</strong> module, we may meet this error. * The search configuration </p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">class <span class="built_in">RecItemAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="selector-tag">form</span> = RecItemAdminForm</span><br><span class="line">    search_fields = <span class="selector-attr">[<span class="string">'category'</span>, <span class="string">'brand'</span>, <span class="string">'title'</span>,]</span></span><br></pre></td></tr></tbody></table></figure> * The model definition * RecItem <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">class RecItem(models.Model):</span><br><span class="line">    category = models.ForeignKey(Category, <span class="attribute">on_delete</span>=models.CASCADE, <span class="attribute">related_name</span>=<span class="string">'rec_items'</span>)</span><br><span class="line">    title = models.CharField(<span class="attribute">max_length</span>=64, <span class="attribute">null</span>=<span class="literal">True</span>, <span class="attribute">blank</span>=<span class="literal">True</span>)</span><br><span class="line">    brand = models.ForeignKey(Brand, <span class="attribute">on_delete</span>=models.CASCADE, <span class="attribute">related_name</span>=<span class="string">'rec_items'</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>
<pre><code>* Category</code></pre>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">class Category(models.Model):</span><br><span class="line">    card = models.ForeignKey(CardInfo, <span class="attribute">on_delete</span>=models.CASCADE, <span class="attribute">related_name</span>=<span class="string">'cates'</span>)</span><br><span class="line">    name = models.CharField(<span class="attribute">max_length</span>=32, <span class="attribute">null</span>=<span class="literal">True</span>, <span class="attribute">blank</span>=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure>
<pre><code>* Brand</code></pre>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">Brand(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    name = models.<span class="constructor">CharField(<span class="params">max_length</span>=64, <span class="params">unique</span> = True, <span class="params">verbose_name</span>='中文名称')</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="solution">Solution</h5>
<p>The search fields category and brand are foreign keys. Django does not support search on foreign key and manytomany field. We have to search on string field. Thus we can use the double under score symbol to get the model's string properties. </p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">class <span class="built_in">RecItemAdmin</span>(admin.ModelAdmin):</span><br><span class="line">    <span class="selector-tag">form</span> = RecItemAdminForm</span><br><span class="line">    search_fields = <span class="selector-attr">[<span class="string">'category__name'</span>, <span class="string">'brand__name'</span>, <span class="string">'title'</span>,]</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Basic Usage Of Apache</title>
    <url>/2023/02/25/Basic-Usage-Of-Apache/</url>
    <content><![CDATA[<html><head></head><body><p>This article contains the configuration and command lines of <strong>Apache2</strong>. <span id="more"></span> ### Apache Configuration The config file of apache is <strong>/etc/apache2/apache2.conf</strong>. </p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">WSGIPythonPath</span> /django/servo</span><br><span class="line"><span class="attribute">ServerName</span> <span class="number">127.0.0.1</span></span><br><span class="line"><span class="attribute">Header</span> set X-Frame-Options <span class="string">"allow from http://www.demo.com/"</span></span><br></pre></td></tr></tbody></table></figure> * WSGIPythonPath /django/servo -- let apache knows where to load the django project. * ServerName 127.0.0.1 -- local ip is recommended. * Header set X-Frame-Options "allow from http://www.demo.com/" -- allow the page can be embedded in a <strong>frame</strong> from <strong>http://www.demo.com</strong>, undefined frames are forbidden. For more detail information, please visit <a href="https://cloud.tencent.com/developer/section/1190032">X-Frame-Options</a> or <a href="https://help.aliyun.com/document_detail/118166.html">URL Masking</a>. The ports that apache is listening are defined in <strong>/etc/apache2/ports.conf</strong> ### Site Configuration The site configurations are in <strong>/etc/apache2/site-available</strong> and one file is for one site. * Http Site The default port for http host is <strong>80</strong>. <figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:<span class="number">80</span>&gt;</span><br><span class="line">    # ServerName www.demo.com</span><br><span class="line">    # ServerAlias demo.com</span><br><span class="line">    # ServerAdmin demo.csc@gmail.com</span><br><span class="line"></span><br><span class="line">    WSGIScriptAlias <span class="regexp">/ /</span>django<span class="regexp">/servo/</span>servo/wsgi.py</span><br><span class="line">    WSGIPassAuthorization On</span><br><span class="line"></span><br><span class="line">    Alias <span class="regexp">/media/</span> <span class="regexp">/django/m</span>edia/</span><br><span class="line">    Alias <span class="regexp">/static/</span> <span class="regexp">/django/</span>servo<span class="regexp">/static/</span></span><br><span class="line"></span><br><span class="line">    &lt;Directory <span class="regexp">/django/m</span>edia&gt;</span><br><span class="line">         Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Directory <span class="regexp">/django/</span>servo/<span class="keyword">static</span>&gt;</span><br><span class="line">         Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">    # WSGIDaemonProcess blog python-home=<span class="regexp">/home/</span>sammy<span class="regexp">/myproject/my</span>projectenv python-path=<span class="regexp">/home/</span>sammy/myproject</span><br><span class="line">    # WSGIProcessGroup %{GLOBAL}</span><br><span class="line">    # WSGIDaemonProcess ziqiangxuetang.com python-path=<span class="regexp">/home/</span>tu<span class="regexp">/blog:/</span>home<span class="regexp">/tu/</span>.virtualenvs<span class="regexp">/blog/</span>lib<span class="regexp">/python2.7/</span>site-packages</span><br><span class="line">    # WSGIProcessGroup ziqiangxuetang.com</span><br><span class="line">    # WSGIApplicationGroup %{GLOBAL}</span><br><span class="line"></span><br><span class="line">    &lt;Directory <span class="regexp">/django/</span>servo/servo&gt;</span><br><span class="line">        &lt;Files wsgi.py&gt;</span><br><span class="line">            Require all granted</span><br><span class="line">        &lt;/Files&gt;</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">    ErrorLog ${APACHE_LOG_DIR}/error.log</span><br><span class="line">    CustomLog ${APACHE_LOG_DIR}/access.log combined</span><br><span class="line"></span><br><span class="line">    RewriteEngine on</span><br><span class="line">    RewriteCond   %{HTTPS} !=on </span><br><span class="line">    # Rewrite all urls</span><br><span class="line">    RewriteRule ^(.*)?$ https:<span class="comment">//%{SERVER_NAME}/$1 [R,L]</span></span><br><span class="line"> &lt;/VirtualHost&gt;</span><br></pre></td></tr></tbody></table></figure> * WSGIPassAuthorization On -- make sure token is passed for authorization. * RewriteEngine On -- make sure all http request is rewritten to https request. * <span class="math inline">\(1 -- the content that the regression rule **^(.*)?\)</span>** extracts. * ^(.<em>)?$ -- ignore the http prefix and the domain name </em> SERVER_NAME -- the domain name * Https Site <figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:<span class="number">443</span>&gt;</span><br><span class="line">    # ServerName www.demo.com</span><br><span class="line">    # ServerAlias demo.com</span><br><span class="line">    # ServerAdmin demo.csc@gmail.com</span><br><span class="line"></span><br><span class="line">    WSGIScriptAlias <span class="regexp">/ /</span>django<span class="regexp">/servo/</span>servo/wsgi.py</span><br><span class="line">    WSGIPassAuthorization On</span><br><span class="line"></span><br><span class="line">    Alias <span class="regexp">/media/</span> <span class="regexp">/django/m</span>edia/</span><br><span class="line">    Alias <span class="regexp">/static/</span> <span class="regexp">/django/</span>servo<span class="regexp">/static/</span></span><br><span class="line"></span><br><span class="line">    &lt;Directory <span class="regexp">/django/m</span>edia&gt;</span><br><span class="line">         Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Directory <span class="regexp">/django/</span>servo/<span class="keyword">static</span>&gt;</span><br><span class="line">         Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">    # WSGIDaemonProcess blog python-home=<span class="regexp">/home/</span>sammy<span class="regexp">/myproject/my</span>projectenv python-path=<span class="regexp">/home/</span>sammy/myproject</span><br><span class="line">    # WSGIProcessGroup %{GLOBAL}</span><br><span class="line">    # WSGIDaemonProcess ziqiangxuetang.com python-path=<span class="regexp">/home/</span>tu<span class="regexp">/blog:/</span>home<span class="regexp">/tu/</span>.virtualenvs<span class="regexp">/blog/</span>lib<span class="regexp">/python2.7/</span>site-packages</span><br><span class="line">    # WSGIProcessGroup ziqiangxuetang.com</span><br><span class="line">    # WSGIApplicationGroup %{GLOBAL}</span><br><span class="line"></span><br><span class="line">    &lt;Directory <span class="regexp">/django/</span>servo/servo&gt;</span><br><span class="line">            &lt;Files wsgi.py&gt;</span><br><span class="line">                Require all granted</span><br><span class="line">            &lt;/Files&gt;</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">    ErrorLog ${APACHE_LOG_DIR}/error.log</span><br><span class="line">    CustomLog ${APACHE_LOG_DIR}/access.log combined</span><br><span class="line">    SSLEngine on</span><br><span class="line">    # SSLCertificateFile directive is needed.</span><br><span class="line">    SSLCertificateFile    <span class="regexp">/path/</span>to<span class="regexp">/ssl/</span><span class="number">1234567</span>_www.demo.com_public.crt</span><br><span class="line">    SSLCertificateKeyFile <span class="regexp">/path/</span>to<span class="regexp">/ssl/</span><span class="number">1234567</span>_www.demo.com.key</span><br><span class="line"> &lt;/VirtualHost&gt;</span><br></pre></td></tr></tbody></table></figure> * SSLEngine on -- Open SSL for Https, all we need is providing the <strong>SSLCertificateFile</strong> and the <strong>SSLCertificateKeyFile</strong> ### Command Lines #### Enable Module <figure class="highlight coq"><table><tbody><tr><td class="code"><pre><span class="line">a2enmod <span class="built_in">rewrite</span></span><br><span class="line">a2enmod header</span><br><span class="line">a2enmod ssl</span><br></pre></td></tr></tbody></table></figure> #### Enable Site <figure class="highlight actionscript"><table><tbody><tr><td class="code"><pre><span class="line">a2ensite <span class="number">001</span>-<span class="keyword">default</span></span><br></pre></td></tr></tbody></table></figure> The site is defined in <strong>/etc/apache2/site_available</strong> with name <strong>001-default.conf</strong>. ### Problems &amp; Solutions #### Invalid command 'Header', perhaps misspelled or defined by a module not included in the server configuration The solution is enable <strong>header</strong> module. <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line"># Enabling <span class="keyword">module</span> headers.</span><br><span class="line">a2enmod headers</span><br><span class="line">service apache2 restart</span><br></pre></td></tr></tbody></table></figure> Test <strong>header</strong> module. <figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><span class="line">apachectl -M <span class="string">| grep head</span></span><br><span class="line">headers_module (shared)</span><br><span class="line">Syntax OK</span><br></pre></td></tr></tbody></table></figure> #### Invalid command 'ProxyPass', perhaps misspelled or defined by a module not included in the server configuration <strong>ProxyPass</strong> directive is defined in module <strong>proxy_http</strong>. We have to enable this module before using <strong>ProxyPass</strong> <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line"># Enabling <span class="keyword">module</span> headers.</span><br><span class="line">a2enmod proxy_http</span><br></pre></td></tr></tbody></table></figure> #### SSL Certificate Not Trusted If the certificate is indeed signed by a trusted certificate authority (CA) and is not expired then such warning indicates the possibility that one of the intermediate/chain certificates is not installed on the web server in between the primary and root certificate. Add the following configuration to solve this problem. <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">SSLCertificateChainFile <span class="regexp">/django/</span>servo<span class="regexp">/ssl/</span><span class="number">9123456</span>_www.example.com_chain.crt</span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>Setup Source Of pip On MacBook</title>
    <url>/2023/05/07/Setup-Source-Of-pip-On-MacBook/</url>
    <content><![CDATA[<html><head></head><body><p>The default index url of <strong>pip</strong> is <a href="https://pypi.org/simple">https://pypi.org/simple</a>, which is slow for Chinese users. In this article, I will show you how to configure the index url to sources in China globally. <span id="more"></span> ### Sources In China There are several sources managed by organized by institutions in China. * 清华：&nbsp;https://pypi.tuna.tsinghua.edu.cn/simple * 阿里云：&nbsp;http://mirrors.aliyun.com/pypi/simple/ * 中国科技大学 &nbsp;https://pypi.mirrors.ustc.edu.cn/simple/ * 华中理工大学：&nbsp;http://pypi.hustunique.com/ * 山东理工大学：&nbsp;http://pypi.sdutlinux.org/ * 豆瓣：&nbsp;http://pypi.douban.com/simple/ </p><figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">### Use Temporarily</span><br></pre></td></tr></tbody></table></figure> pip install package -i https://pypi.tuna.tsinghua.edu.cn/simple <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">### Configuration</span><br><span class="line">#### Create Configure File</span><br></pre></td></tr></tbody></table></figure> cd mkdir .pip cd .pip touch pip.conf <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">#### Configure</span><br></pre></td></tr></tbody></table></figure> vi pip.conf [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple [install] trusted-host = https://pypi.tuna.tsinghua.edu.cn/ ```<p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Python</category>
        <category>pip</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Using scipy and numpy in Django</title>
    <url>/2023/05/08/Using-scipy-in-Django/</url>
    <content><![CDATA[<html><head></head><body><p>When <strong>import scipy</strong> or <strong>import numpy as np</strong> in a Django project, it works very well in development mode. However, it will get stuck when deploy Django project using apache. In this article, I will show you how to solve this problem. <span id="more"></span> Some third party packages for Python which use C extension modules, and this includes scipy and numpy, will only work in the Python main interpreter and cannot be used in sub interpreters as mod_wsgi by default uses. The result can be thread deadlock, incorrect behavior or processes crashes. These is detailed in:<a href="http://code.google.com/p/modwsgi/wiki/ApplicationIssues#Python_Simplified_GIL_State_API">http://code.google.com/p/modwsgi/wiki/ApplicationIssues#Python_Simplified_GIL_State_API</a></p>
<p>The workaround is to force the WSGI application to run in the main interpreter of the process using: </p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">WSGIApplicationGroup</span> <span class="variable">%{GLOBAL}</span></span><br></pre></td></tr></tbody></table></figure> Add the above line to the apache's configure file, which is probably locate in <strong>/etc/apache/sites-available</strong>. And then reload apache service using: <figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">reload</span> apache2.service</span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS2 Learning Notes - ROS2 Humble For Beginners</title>
    <url>/2023/12/09/ROS2-Learning-Notes-ROS2-Humble-For-Beginners/</url>
    <content><![CDATA[<html><head></head><body><p>本文为<strong>ROS 2</strong>初学者的学习笔记，主要记录了我学习ROS 2过程中的重要信息，防止遗漏。主要参考资料为<a href="https://docs.ros.org/en/humble/index.html">ROS 2: Humble</a>的官方文档和<a href="https://www.youtube.com/watch?v=0aPbWsyENA8&amp;list=PLLSegLrePWgJudpPUof4-nVFHGkB62Izy">ROS 2 Tutorials - ROS2 Humble For Beginners</a>。 <span id="more"></span> ## ROS2 VS. ROS1 * 适用不可靠的无线网络 * 适用于机器人集群 * 通信安全 * 适用于嵌入式系统 * 支持实时系统 ## ROS2的结构 底层的通信协议使用的是<strong>DDS</strong> * Cyclone DDS * Fast DDS * Connext DDS 上面是中间件， <strong>ROS 2 Middleeare</strong> 再上面是<strong>rcl</strong>， <strong>ROS 2 Client Library</strong> 再上面是各种语言接口，例如<strong>C++</strong>, <strong>Python</strong>, <strong>Java</strong> 顶层的是这些语言开发的<strong>Applications</strong></p>
<p><strong>ROS2</strong>可以帮助我们实现硬件抽象，设备底层控制， 通信和包管理的功能。 ## 安装ROS2 Humble <strong>ROS</strong>的全称是<strong>Robot Operation System</strong>，主要特点是分布式的结构，节点之间通过通信实现数据交换。ROS还提供了一系列即插即用的库。 ### 按照官网教程安装 ROS2 Humble支持在Ubuntu22.04上包安装，所以直接按照<a href="https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debians.html">官网教程</a>安装即可。 ### 其他设置 * 安装ROS工具包 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-gazebo-ros2-control</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-gazebo-ros-pkgs</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-moveit</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-urdf-tutorial</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-tf2-tools</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-navigation2</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-nav2-bringup</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-turtlebot3</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-turtlebot3-gazebo</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-tf-transformations</span><br><span class="line">sudo apt-<span class="built_in">get</span> install python3-transforms3d</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-joint-trajectory-controller</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-joint-state-broadcaster</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-forward-command-controller</span><br></pre></td></tr></tbody></table></figure> * 安装Python编译工具--colcon <figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">python3</span>-colcon-common-extensions</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.zsh"</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></tbody></table></figure> * 解决setuptools版本问题导致的warning <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>lib<span class="regexp">/python3/</span>dist-packages<span class="regexp">/setuptools/</span>command/install.py:<span class="number">34</span>: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.</span><br><span class="line">  warnings.warn(</span><br></pre></td></tr></tbody></table></figure> setuptools默认安装的版本为59.6.0，需要降级为58.2.0。 <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">pip</span> install setuptools==<span class="number">58</span>.<span class="number">2</span>.<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure> * 解决ros的指令在terminal中自动补全 将以下内容添加到zshrc配置文件中： <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># argcomplete for ros2 &amp; colcon</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="subst">$(register-python-argcomplete3 ros2)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="subst">$(register-python-argcomplete3 colcon)</span>"</span></span><br></pre></td></tr></tbody></table></figure> 需要将<strong>rosidl-argcomplete.zsh</strong>文件中的一行代码注释掉。 <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">sudo vi <span class="regexp">/opt/</span>ros<span class="regexp">/humble/</span>share<span class="regexp">/rosidl_cli/</span>environment/rosidl-argcomplete.zsh</span><br></pre></td></tr></tbody></table></figure> 注释 <figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><span class="line">autoload -U +X compinit <span class="meta">&amp;&amp; compinit</span></span><br></pre></td></tr></tbody></table></figure> ### Source Configuration ROS的很多配置需要source之后才能生效，为了避免每次启动terminal都需要重新source，我们把source语句加入到配置文件中。 <figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/opt/</span>ros<span class="regexp">/humble/</span>setup.zsh</span><br><span class="line"><span class="keyword">source</span> <span class="regexp">/usr/</span>share<span class="regexp">/colcon_argcomplete/</span>hook/colcon-argcomplete.zsh</span><br><span class="line"><span class="keyword">source</span> ~<span class="regexp">/ros2_ws/i</span>nstall/setup.zsh</span><br><span class="line"><span class="keyword">source</span> <span class="regexp">/usr/</span>share<span class="regexp">/gazebo/</span>setup.sh</span><br></pre></td></tr></tbody></table></figure> 第一句是source ros安装包配置，第二句是source自动补全配置，第三句是source工作空间的配置。每次ros包重新编译后都需要重新source ros的工作空间。 ### Source Code <strong>ROS</strong>所有的代码均开源，连接见：<a href="https://github.com/orgs/ros2/repositories">https://github.com/orgs/ros2/repositories</a>。 * rclcpp cpp开发接口：<a href="https://github.com/ros2/rclcpp">https://github.com/ros2/rclcpp</a> * rclpy python开发接口：<a href="https://github.com/ros2/rclpy">https://github.com/ros2/rclpy</a> * ros2cli 命令行接口：<a href="https://github.com/ros2/ros2cli">https://github.com/ros2/ros2cli</a> * ros2bag 记录数据包：<a href="https://github.com/ros2/rosbag2">https://github.com/ros2/rosbag2</a> * common interfaces <strong>msg</strong>和<strong>srv</strong>源码：<a href="https://github.com/ros2/common_interfaces">https://github.com/ros2/common_interfaces</a> * rviz 3D可视化接口：<a href="https://github.com/ros2/rviz">https://github.com/ros2/rviz</a> 除了源码，<strong>ROS</strong>还提供了一份<a href="https://design.ros2.org/">设计文档</a>，详细说明了设计思路和接口说明。源码见：<a href="git@github.com:ros2/design.git">git@github.com:ros2/design.git</a> ## 创建WorkSpace ### 创建文件夹 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &amp; <span class="built_in">mkdir</span> ros2_ws</span><br><span class="line"><span class="built_in">cd</span> ros2_ws</span><br><span class="line"><span class="built_in">mkdir</span> src</span><br></pre></td></tr></tbody></table></figure> ### 编译 <figure class="highlight ada"><table><tbody><tr><td class="code"><pre><span class="line">colcon build <span class="comment">--symlink-install</span></span><br></pre></td></tr></tbody></table></figure> <strong>--symlink-install</strong>参数可以让python代码立即生效，而不需要重新build。 编译后会创建<strong>build</strong>，<strong>install</strong>，<strong>log</strong>文件夹，需要将<strong>install</strong>文件夹内的<strong>setup.zsh</strong>放到zshrc配置文件中，让工作空间全局生效。 <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── build</span><br><span class="line">│&nbsp;&nbsp; └── COLCON_IGNORE</span><br><span class="line">├── install</span><br><span class="line">│&nbsp;&nbsp; ├── COLCON_IGNORE</span><br><span class="line">│&nbsp;&nbsp; ├── local_setup<span class="selector-class">.bash</span></span><br><span class="line">│&nbsp;&nbsp; ├── local_setup<span class="selector-class">.ps1</span></span><br><span class="line">│&nbsp;&nbsp; ├── local_setup<span class="selector-class">.sh</span></span><br><span class="line">│&nbsp;&nbsp; ├── _local_setup_util_ps1<span class="selector-class">.py</span></span><br><span class="line">│&nbsp;&nbsp; ├── _local_setup_util_sh<span class="selector-class">.py</span></span><br><span class="line">│&nbsp;&nbsp; ├── local_setup<span class="selector-class">.zsh</span></span><br><span class="line">│&nbsp;&nbsp; ├── setup<span class="selector-class">.bash</span></span><br><span class="line">│&nbsp;&nbsp; ├── setup<span class="selector-class">.ps1</span></span><br><span class="line">│&nbsp;&nbsp; ├── setup<span class="selector-class">.sh</span></span><br><span class="line">│&nbsp;&nbsp; └── setup<span class="selector-class">.zsh</span></span><br><span class="line">├── log</span><br><span class="line">│&nbsp;&nbsp; ├── build_2023-<span class="number">12</span>-<span class="number">13</span>_15-<span class="number">55</span>-<span class="number">37</span></span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── events<span class="selector-class">.log</span></span><br><span class="line">│&nbsp;&nbsp; │&nbsp;&nbsp; └── logger_all<span class="selector-class">.log</span></span><br><span class="line">│&nbsp;&nbsp; ├── COLCON_IGNORE</span><br><span class="line">│&nbsp;&nbsp; ├── latest -&gt; latest_build</span><br><span class="line">│&nbsp;&nbsp; └── latest_build -&gt; build_2023-<span class="number">12</span>-<span class="number">13</span>_15-<span class="number">55</span>-<span class="number">37</span></span><br><span class="line">└── <span class="attribute">src</span></span><br></pre></td></tr></tbody></table></figure> <strong>注意：编译必须在工作空间的根目录进行。</strong> <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"source ros2_ws/install/setup.zsh"</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></tbody></table></figure> 有多个package的情况下，如果仅需要编译指定的package，则可以使用<strong>--packages-select</strong>参数指定。 <figure class="highlight n1ql"><table><tbody><tr><td class="code"><pre><span class="line">colcon <span class="keyword">build</span> --packages-<span class="keyword">select</span> my_py_pkg</span><br></pre></td></tr></tbody></table></figure> 编译成功后，会在工作空间<strong>install/lib</strong>文件夹下面生成对应package的可执行文件。具体目录在<strong>setup.cfg</strong>中配置。 编译成功后，需要重新source，以让新编译的内容生效。<p></p>
<h2 id="创建package">创建Package</h2>
<p>每一个package都是独立的单元，例如可以创建一个camera package，可以创建一个hardware control package, 可以创建一个motion planning package ### Python Package </p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">cd ros2_ws/<span class="attribute">src</span></span><br><span class="line">ros2 pkg create my_robot_controller <span class="attr">--build-type</span> ament_python <span class="attr">--dependencies</span> rclpy</span><br></pre></td></tr></tbody></table></figure> 可以在任意目录下创建package，但是为了代码便于管理，推荐在src目录下创建package。 <strong>build-type</strong>选项可以设置是package的编写语言，可以是python也可以是c++。 <strong>dependencies</strong>选项可以设置语言，对于python而言，是rclpy。 指令会创建一个名字为my_robot_controller的package，是一个单独的文件夹，文件结构如下所示： <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">.</span><br><span class="line">└── my_robot_controller</span><br><span class="line">    ├── my_robot_controller</span><br><span class="line">    │&nbsp;&nbsp; └── __init__<span class="selector-class">.py</span></span><br><span class="line">    ├── package<span class="selector-class">.xml</span></span><br><span class="line">    ├── resource</span><br><span class="line">    │&nbsp;&nbsp; └── my_robot_controller</span><br><span class="line">    ├── setup<span class="selector-class">.cfg</span></span><br><span class="line">    ├── setup<span class="selector-class">.py</span></span><br><span class="line">    └── test</span><br><span class="line">        ├── test_copyright<span class="selector-class">.py</span></span><br><span class="line">        ├── test_flake8<span class="selector-class">.py</span></span><br><span class="line">        └── test_pep257<span class="selector-class">.py</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span> directories, <span class="number">8</span> files</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> 然后回到ros2_ws根目录，使用<strong>colcon build</strong>指令编译刚刚创建的package。 #### 创建节点 节点是机器人操作系统的最小运行单元，多个节点组成一张图，共同构成一个机器人操作系统。一个节点一般只用于完成一件事情。多个节点之间通过<strong>topic</strong>、<strong>service</strong>和<strong>parameters</strong>进行通信。 多节点架构降低了机器人操作系统的复杂度，便于开发和调试；提升了系统的鲁棒性，一个节点挂了不影响其他节点；节点可以使用python和C++编写。 节点命名不能冲突。 节点的源代码存在于package包的同名文件夹下面，例如对于<strong>my_robot_controller</strong>package而言，节点源码应该存在于<strong>my_robot_controller/my_robot_controller</strong>文件夹下面。 * 节点的源码文件是一个可执行文件 使用以下命令创建节点源码文件 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> my_first_node.py</span><br><span class="line"><span class="built_in">chmod</span> +x my_first_node.py</span><br></pre></td></tr></tbody></table></figure><p></p>
<h5 id="import-rclpy">import rclpy</h5>
<p>使用python开发的ros节点需要使用<strong>rclpy</strong>(ROS Client Library for Python)。 </p><figure class="highlight elm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rclpy</span><br></pre></td></tr></tbody></table></figure> ##### 定义main函数 * main函数 <figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">def main(<span class="attr">args=</span>None):</span><br><span class="line">    rclpy.init(<span class="attr">args=</span>args)</span><br><span class="line">    <span class="keyword">node</span> <span class="title">= MyNode</span>()</span><br><span class="line">    rclpy.spin(<span class="keyword">node</span><span class="title">=node</span>)</span><br><span class="line">    rclpy.shutdown()</span><br></pre></td></tr></tbody></table></figure> main函数开头用<strong>rclpy.init</strong>函数进行初始化，载入ros资源；结尾用<strong>rclpy.shutdown</strong>函数进行结束，释放ros资源。在init和shutdown中间，可以定义节点对象，并使用<strong>rclpy.spin</strong>函数保证节点一直运行。 * 入口 <figure class="highlight isbl"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">if</span></span> <span class="variable">__name__</span> == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="function"><span class="title">main</span>()</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h5 id="继承node创建节点类">继承Node创建节点类</h5>
<p>节点类需要继承<strong>rclpy.node</strong>中的<strong>Node</strong>。 </p><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">from rclpy.node import <span class="keyword">Node</span></span><br><span class="line"><span class="title">class</span> MyNode(<span class="keyword">Node</span><span class="title">):</span></span><br><span class="line"><span class="title">    def</span> __init__(self):</span><br><span class="line">        super().__init__(<span class="string">"first_node"</span>)</span><br></pre></td></tr></tbody></table></figure> 在初始函数中对父类进行初始化，定义节点名称。<p></p>
<h5 id="安装node">安装node</h5>
<p>在包的<strong>setup.py</strong>中的<strong>entry_points</strong>安装node。 </p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">entry_points</span>={</span><br><span class="line">    <span class="string">'console_scripts'</span>: [</span><br><span class="line">        <span class="string">"test_node = my_robot_controller.my_first_node:main"</span>,</span><br><span class="line">        <span class="string">"draw_circle = my_robot_controller.draw_circle:main"</span></span><br><span class="line">    ],</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure> 主要定义可执行文件的名称和代码执行路径。可执行文件名为使用ros命令运行的名称，节点名称在定义节点时指定。<p></p>
<h3 id="c-package">C++ Package</h3>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">cd ros2_ws/<span class="attribute">src</span></span><br><span class="line">ros2 pkg create my_cpp_pkg <span class="attr">--build-type</span> ament_cmake <span class="attr">--dependencies</span> rclcpp</span><br></pre></td></tr></tbody></table></figure>
<p>通过<strong>pkg create</strong>指令创建包，参数中指定<strong>ament_cmake</strong>和<strong>rclcpp</strong>。</p>
<h4 id="include-rclcpp">include rclcpp</h4>
<figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"rclcpp/rclcpp.hpp"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"rclcpp/executors.hpp"</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>引入<strong>rclcpp.hpp</strong>就够了，但是使用<strong>rclcpp::spin</strong>时，vscode会提示在<strong>rclcpp</strong>命名空间中找不到<strong>spin</strong>，因此引入<strong>executors.hpp</strong>解决这个问题。</p>
<h4 id="定义main函数">定义main函数</h4>
<p>与python节点类似，需要在main函数中依次使用init、spin、shutdown函数来实现ros节点的初始化、运行和结束功能。 </p><figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="keyword">auto</span> node = std::<span class="built_in">make_shared</span>&lt;rclcpp::Node&gt;(<span class="string">"cpp_test"</span>);</span><br><span class="line">    <span class="built_in">RCLCPP_INFO</span>(node-&gt;<span class="built_in">get_logger</span>(), <span class="string">"Hello Cpp Node"</span>);</span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> 打印日志使用了<strong>RCLCPP_INFO</strong>宏定义来实现，传入logger对象和日志内容字符串即可。 #### 继承Node创建节点类 <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> MyNode: public rclcpp::Node </span><br><span class="line">{</span><br><span class="line">    public:</span><br><span class="line">    <span class="constructor">MyNode()</span>: <span class="constructor">Node(<span class="string">"cpp_test"</span>)</span>, counter<span class="constructor">_(0)</span></span><br><span class="line">    {</span><br><span class="line">        <span class="constructor">RCLCPP_INFO(<span class="params">this</span> -&gt; <span class="params">get_logger</span>()</span>, <span class="string">"Hello Cpp Node"</span>);</span><br><span class="line">        timer_ = this -&gt; create<span class="constructor">_wall_timer(<span class="params">std</span>::<span class="params">chrono</span>::<span class="params">seconds</span>(1)</span>,</span><br><span class="line">                                           std::bind(&amp;MyNode::timeCallback, this));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    void time<span class="constructor">Callback()</span></span><br><span class="line">    {</span><br><span class="line">        counter_++;</span><br><span class="line">        <span class="constructor">RCLCPP_INFO(<span class="params">this</span> -&gt; <span class="params">get_logger</span>()</span>, <span class="string">"Hello Cpp %d"</span>, counter_);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    rclcpp::TimerBase::SharedPtr timer_;</span><br><span class="line">    <span class="built_in">int</span> counter_;</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> 需要public继承<strong>rclcpp::Node</strong>，在初始化函数中完成节点名称的定义。 #### CMake配置 在<strong>CMakeLists.txt</strong>中增加执行文件、依赖关系和安装路经的配置。 <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">add_executable</span><span class="params">(cpp_node src/my_first_node.cpp)</span></span></span><br><span class="line"><span class="function"><span class="title">ament_target_dependencies</span><span class="params">(cpp_node rclcpp)</span></span></span><br><span class="line"><span class="function"><span class="title">install</span><span class="params">(TARGETS cpp_node DESTINATION lib/${PROJECT_NAME})</span></span></span><br></pre></td></tr></tbody></table></figure> #### VSCode配置AutoComplete 在VSCode中使用快捷键<strong>Ctrl+Shift+P</strong>打开命令索引框，输入<strong>c/c++</strong>，在候选中选择<strong>Edit Configuration JSON</strong>，然后将ros的include路径添加到<strong>includePath</strong>中，具体如下所示： <figure class="highlight prolog"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Linux"</span>,</span><br><span class="line">            <span class="string">"includePath"</span>: [</span><br><span class="line">                <span class="string">"${workspaceFolder}/**"</span>,</span><br><span class="line">                <span class="string">"/usr/include/**"</span>,</span><br><span class="line">                <span class="string">"/usr/local/include/**"</span>,</span><br><span class="line">                <span class="string">"/opt/ros/humble/include/**"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"defines"</span>: [],</span><br><span class="line">            <span class="string">"compilerPath"</span>: <span class="string">"/usr/bin/gcc"</span>,</span><br><span class="line">            <span class="string">"cStandard"</span>: <span class="string">"c11"</span>,</span><br><span class="line">            <span class="string">"cppStandard"</span>: <span class="string">"c17"</span>,</span><br><span class="line">            <span class="string">"intelliSenseMode"</span>: <span class="string">"linux-gcc-x64"</span></span><br><span class="line">        }</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"version"</span>: <span class="number">4</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> 除了修改<strong>includePath</strong>，还需要添加<strong>cppStandard</strong>。 上述指令运行节点并且将节点重命名为<strong>abs</strong>.<p></p>
<h3 id="topic">Topic</h3>
<p><strong>Topic</strong>提供了节点之间的通信机制，由名称和消息类型共同定义。其内容由publisher发布，subscriber会对内容进行监听和消费。一个topic可有有多个publisher，也可以有多个subscriber。 #### 时间回调函数 时间回调函数一般用于周期性的完成工作。 ##### Python * 定义时间回调函数 </p><figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">timer_callback</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">    pass</span><br></pre></td></tr></tbody></table></figure> * 注册时间回调函数 <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">self.create<span class="constructor">_timer(1.0, <span class="params">self</span>.<span class="params">timer_callback</span>)</span></span><br></pre></td></tr></tbody></table></figure> 一般在初始化函数中注册时间回调函数。时间回调函数的第一个参数是时间周期，第二个参数是调用的回调函数。<p></p>
<h5 id="c">C++</h5>
<ul>
<li>定义时间回调函数 <figure class="highlight lasso"><table><tbody><tr><td class="code"><pre><span class="line"><span class="literal">void</span> publishNews() {</span><br><span class="line">    auto msg = example_interfaces<span class="type">::msg</span><span class="type">::String</span>();</span><br><span class="line">    msg.<span class="built_in">data</span> = std<span class="type">::string</span>(<span class="string">"Hi, this is "</span>) + robot_name_ +</span><br><span class="line">        std<span class="type">::string</span>(<span class="string">" from the Robot News Station"</span>);</span><br><span class="line">    publisher_-&gt;publish(msg);</span><br><span class="line">    counter_++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
<li>注册时间回调函数 <figure class="highlight dts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="symbol">rclcpp:</span>:TimerBase::SharedPtr timer_<span class="punctuation">;</span></span><br><span class="line">timer_ = this-&gt;create_wall_timer(</span><br><span class="line"><span class="symbol">    std:</span>:chrono::seconds(<span class="number">1</span>),</span><br><span class="line"><span class="symbol">    std:</span>:bind(<span class="variable">&amp;</span>RobotNewsStationNode::publishNews, this))<span class="punctuation">;</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h4 id="publisher">publisher</h4>
<h5 id="python">Python</h5>
<ul>
<li>定义publisher 一般在节点的init函数中定义publisher。 <figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.cmd_vel_pub_ = <span class="variable language_">self</span>.create_publisher(<span class="title class_">Twist</span>, <span class="string">"/turtle1/cmd_vel"</span>, <span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure> 通过<strong>create_publisher</strong>函数定义publisher，需要传入一个消息类型，然后传入一个topic名字, 第三个参数代表消息的大小。 <strong>注意：引入新的包后，需要在package.xml中添加新的depend。</strong></li>
<li>周期性发送消息 周期性运行主要依赖时间回调函数实现，首先定义一个时间回调函数，然后在节点的init函数中注册时间回调函数，具体可参照上一章节。 在时间回调函数中，定义消息内容，并通过publisher发布消息。 <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">def</span> send_velocity_command(self):</span><br><span class="line">    <span class="attribute">msg</span> = Twist()</span><br><span class="line">    <span class="attribute">msg</span>.linear.x = <span class="number">2</span>.<span class="number">0</span></span><br><span class="line">    <span class="attribute">msg</span>.angular.z = <span class="number">1</span>.<span class="number">0</span></span><br><span class="line">    <span class="attribute">self</span>.cmd_vel_pub_.publish(msg)</span><br></pre></td></tr></tbody></table></figure> 上述代码中定义了<strong>send_velocity_command</strong>回调函数。</li>
</ul>
<h5 id="c-1">C++</h5>
<ul>
<li>定义publisher <figure class="highlight rust"><table><tbody><tr><td class="code"><pre><span class="line">rclcpp::Publisher&lt;example_interfaces::msg::<span class="type">String</span>&gt;::SharedPtr publisher_;</span><br><span class="line">publisher_ = this<span class="punctuation">-&gt;</span>create_publisher&lt;example_interfaces::msg::<span class="type">String</span>&gt;(</span><br><span class="line">            <span class="string">"robot_news"</span>, <span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure> 声明时，在<strong>Publisher<template></template></strong>模板类中指明消息的类型，声明是一个SharedPtr类型的变量。 定义时，同样在模板函数中指明消息的数据类型，同时在构造函数中指明topic的名称。</li>
<li>周期性发送消息 #### subscriber 与publisher类似，同样在init函数中定义subscriber。 <figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.pose_subscriber_ = <span class="variable language_">self</span>.create_subscription(<span class="title class_">Pose</span>, <span class="string">"/turtle1/pose"</span>, <span class="variable language_">self</span>.pose_callback, <span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure> 使用<strong>create_subscription</strong>函数定义subscriber，需要传入topic的数据类型，topic的名称，回调函数，以及buffer大小。回调函数用于收到数据后的处理逻辑。</li>
</ul>
<h3 id="service">Service</h3>
<p><strong>service</strong>与<strong>topic</strong>的区别是，<strong>service</strong>类似于web服务，有server也有client，通过传入参数直接调用，而<strong>topic</strong>更像是消息广告板，有发布者也有订阅者。 <strong>service</strong>的server只有一个，而client可以有很多个。 <strong>topic</strong>主要用于节点之间发送数据，而不需要节点之间的response。如果需要response，则需要使用<strong>service</strong>。 频繁调用service会影响ros的整体性能。 #### Server ##### Python * 定义Server </p><figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.server_ = <span class="variable language_">self</span>.create_service(<span class="title class_">AddTwoInts</span>, <span class="string">"add_two_ints"</span>, <span class="variable language_">self</span>.add_two_ints_callback)</span><br></pre></td></tr></tbody></table></figure> 使用<strong>create_service</strong>函数创建server，需要传入三个参数。第一个参数是Service的数据类型，该数据类型定义了Request和Response的数据结构；第二个参数为Service的名称，唯一的ID；第三个参数为Server的回调函数，用于实现业务逻辑。 * 定义Callback <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_two_ints_callback</span>(<span class="params">self, request, response</span>):</span><br><span class="line">    response.<span class="built_in">sum</span> = request.a + request.b</span><br><span class="line">    self.get_logger().info(<span class="built_in">str</span>(request.a) + <span class="string">"+"</span> + <span class="built_in">str</span>(request.b) + <span class="string">"="</span> + <span class="built_in">str</span>(response.<span class="built_in">sum</span>))</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></tbody></table></figure> 回调函数需要传入两个参数，一个是<strong>request</strong>入参，另外一个是<strong>response</strong>出参。 ##### C++ * 定义Server <figure class="highlight zephir"><table><tbody><tr><td class="code"><pre><span class="line">rclcpp::Service&lt;example_interfaces::srv::AddTwoInts&gt;::SharedPtr server_;</span><br><span class="line">server_ = this-&gt;create_service&lt;example_interfaces::srv::AddTwoInts&gt;(<span class="string">"add_two_ints"</span>, std::bind(&amp;AddTwoIntsServerNode::callbackAddTwoInts, this, std::placeholders::_1, std::placeholders::_2));</span><br></pre></td></tr></tbody></table></figure> 使用<strong>create_service</strong>函数创建Service的Server，需要指定数据类型，且传入两个参数，一个是Service的名称，这是一个唯一的标识，在client中也需要用到；另外一个是回调函数。 * 定义Callback <figure class="highlight rust"><table><tbody><tr><td class="code"><pre><span class="line">void <span class="title function_ invoke__">callbackAddTwoInts</span>(<span class="keyword">const</span> example_interfaces::srv::AddTwoInts::Request::SharedPtr request,</span><br><span class="line">    <span class="keyword">const</span> example_interfaces::srv::AddTwoInts::Response::SharedPtr response)</span><br><span class="line">{</span><br><span class="line">    response<span class="punctuation">-&gt;</span>sum = request<span class="punctuation">-&gt;</span>a + request<span class="punctuation">-&gt;</span>b;</span><br><span class="line">    <span class="title function_ invoke__">RCLCPP_INFO</span>(this<span class="punctuation">-&gt;</span><span class="title function_ invoke__">get_logger</span>(), <span class="string">"%ld+%ld=%ld"</span>, request<span class="punctuation">-&gt;</span>a, request<span class="punctuation">-&gt;</span>b, response<span class="punctuation">-&gt;</span>sum);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> Server的回调函数返回值类型为<strong>void</strong>，且有两个入参，一个为<strong>Request</strong>，另外一个为<strong>Response</strong>，类型均为<strong>const SharePtr</strong>. #### Client ##### Python * 定义Client <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">client</span> = self.create_client(AddTwoInts, <span class="string">"add_two_ints"</span>)</span><br></pre></td></tr></tbody></table></figure> 使用<strong>create_client</strong>函数创建client，需要传入两个参数。第一个是Service的数据类型，第二个是Service的名称。 * 等待Server Ready <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> not client.wait<span class="constructor">_for_service(1.0)</span>:</span><br><span class="line">    node.get<span class="constructor">_logger()</span>.warn(<span class="string">"Waiting for server AddTwoInts."</span>)</span><br></pre></td></tr></tbody></table></figure> <strong>wait_for_service</strong>如果成功则返回true，否则则返回false；传入的参数为等待时间，不传入则永远等待。 * 请求Server <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">request = AddTwoInts.<span class="constructor">Request()</span></span><br><span class="line">request.a = <span class="number">45</span></span><br><span class="line">request.b = <span class="number">67</span></span><br><span class="line"></span><br><span class="line">future = client.call<span class="constructor">_async(<span class="params">request</span>=<span class="params">request</span>)</span></span><br><span class="line">rclpy.spin<span class="constructor">_until_future_complete(<span class="params">node</span>=<span class="params">node</span>, <span class="params">future</span>=<span class="params">future</span>)</span></span><br></pre></td></tr></tbody></table></figure> 使用数据类型的<strong>Request</strong>部分创建request。<strong>call_async</strong>可以实现异步调用，返回一个future对象。<strong>spin_until_feature_complete</strong>可以等待直到请求返回，需要传入两个参数，一个是节点对象，另外一个是异步调用的future对象。 <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">request = AddTwoInts.<span class="constructor">Request()</span></span><br><span class="line">request.a = a</span><br><span class="line">request.b = b</span><br><span class="line">future = self.client_.call<span class="constructor">_async(<span class="params">request</span>=<span class="params">request</span>)</span></span><br><span class="line">future.add<span class="constructor">_done_callback(<span class="params">partial</span>(<span class="params">self</span>.<span class="params">add_two_ints_callback</span>, <span class="params">a</span>=<span class="params">a</span>, <span class="params">b</span>=<span class="params">b</span>)</span>)</span><br></pre></td></tr></tbody></table></figure> <strong>spin_until_feature_complete</strong>适用于在main函数中直接定义client时使用，如果是在class中定义client，则需要使用future的<strong>add_done_callback</strong>函数，在异步请求server完成后，调用回调函数。<strong>partial</strong>类可以在传入回调函数的时候，传入其他参数。 * 处理Response <figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    response = future.<span class="built_in">result</span>()</span><br><span class="line">    node.<span class="built_in">get_logger</span>().<span class="built_in">info</span>(<span class="built_in">str</span>(request.a) + <span class="string">"+"</span> + <span class="built_in">str</span>(request.b) + <span class="string">"="</span> + <span class="built_in">str</span>(response.sum))</span><br><span class="line">except Exception as e:</span><br><span class="line">    node.<span class="built_in">get_logger</span>().<span class="built_in">error</span>(<span class="string">"Service call failed %r"</span> % (e,))</span><br></pre></td></tr></tbody></table></figure> 需要使用try-except结构处理返回的response。 ##### C++ * 定义Client <figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">auto client = <span class="keyword">node</span><span class="title">-&gt;create_client</span><span class="tag">&lt;example_interfaces::srv::AddTwoInts&gt;</span>(<span class="string">"add_two_ints"</span>);</span><br></pre></td></tr></tbody></table></figure> 使用<strong>create_client</strong>函数定义client，需要指定数据类型，仅需要传入一个参数，即Service的名字。client根据名字与server进行通信。 * 等待Server Ready <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(!client-&gt;wait<span class="constructor">_for_service(<span class="params">std</span>::<span class="params">chrono</span>::<span class="params">seconds</span>(1)</span>))</span><br><span class="line">{</span><br><span class="line">    <span class="constructor">RCLCPP_WARN(<span class="params">node</span>-&gt;<span class="params">get_logger</span>()</span>, <span class="string">"Waiting for server to be ready..."</span>);</span><br><span class="line">}</span><br><span class="line"><span class="constructor">RCLCPP_INFO(<span class="params">node</span>-&gt;<span class="params">get_logger</span>()</span>, <span class="string">"AddTwoInts server is ready."</span>);</span><br></pre></td></tr></tbody></table></figure> 使用<strong>wait_for_service</strong>函数等待server ready。与python接口类似，当server ready时，<strong>wait_for_service</strong>函数返回true，否则返回false；入参为等待时间。 * 请求Server <figure class="highlight rust"><table><tbody><tr><td class="code"><pre><span class="line">auto request = std::make_shared&lt;example_interfaces::srv::AddTwoInts::Request&gt;();</span><br><span class="line">request<span class="punctuation">-&gt;</span>a = <span class="number">34</span>;</span><br><span class="line">request<span class="punctuation">-&gt;</span>b = <span class="number">56</span>;</span><br><span class="line">auto future = client<span class="punctuation">-&gt;</span><span class="title function_ invoke__">async_send_request</span>(request);</span><br></pre></td></tr></tbody></table></figure> 使用异步接口发送请求，入参为<strong>request</strong>，返回值为<strong>future</strong>。 * 处理Response <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(rclcpp::spin<span class="constructor">_until_future_complete(<span class="params">node</span>, <span class="params">future</span>)</span><span class="operator"> == </span>rclcpp::FutureReturnCode::SUCCESS)</span><br><span class="line">{</span><br><span class="line">    <span class="constructor">RCLCPP_INFO(<span class="params">node</span>-&gt;<span class="params">get_logger</span>()</span>, <span class="string">"%ld+%ld=%ld"</span>, request-&gt;a, request-&gt;b, future.get<span class="literal">()</span>-&gt;sum);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">{</span><br><span class="line">    <span class="constructor">RCLCPP_ERROR(<span class="params">node</span>-&gt;<span class="params">get_logger</span>()</span>, <span class="string">"Error while calling add_two_ints service"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> 使用<strong>spin_until_future_complete</strong>函数等待future完成，并校验完成状态。状态为成功，则处理返回值；失败，则打印失败信息。 上述方法是使用<strong>no_oop</strong>的方法实现，直接在main函数中利用ros提供的<strong>spin_until_future_complete</strong>接口实现异步请求的阻塞。对于<strong>oop</strong>的方式，在类中无法使用上述接口，需要直接使用<strong>future.get</strong>接口实现阻塞，为了能保证初始化函数完成，需要将请求放在多线程中实现。 <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">std::vector&lt;std::thread&gt; threads_;</span><br><span class="line">threads_.push<span class="constructor">_back(<span class="params">std</span>::<span class="params">thread</span>(<span class="params">std</span>::<span class="params">bind</span>(&amp;AddTwoIntsClientNode::<span class="params">callAddTwoIntsService</span>, <span class="params">this</span>, 89, 12)</span>));</span><br><span class="line"><span class="comment">// parse response</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">{</span><br><span class="line">    auto response = future.get<span class="literal">()</span>;</span><br><span class="line">    <span class="constructor">RCLCPP_INFO(<span class="params">this</span>-&gt;<span class="params">get_logger</span>()</span>, <span class="string">"%d+%d=%ld"</span>, a, b, response-&gt;sum);</span><br><span class="line">}</span><br><span class="line">catch(const std::<span class="keyword">exception</span>&amp; e)</span><br><span class="line">{</span><br><span class="line">    <span class="constructor">RCLCPP_ERROR(<span class="params">this</span>-&gt;<span class="params">get_logger</span>()</span>, <span class="string">"Service call failed: %s"</span>, e.what<span class="literal">()</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> ### Interfaces 在<strong>topic</strong>和<strong>service</strong>中均须提供消息类型，在ros中这部分统一放在<strong>interfaces</strong>中。 #### Common Interfaces 为了便于开发和使用，<strong>ROS</strong>针对机器人领域常用的功能，提供了一份官方的<strong>msg</strong>和<strong>srv</strong>，统一放在<a href="https://github.com/ros2/common_interfaces">common interfaces</a> * geometry_msgs 定义了几何本原相关的消息类型，例如点、向量、姿态等。具体见：<a href="https://github.com/ros2/common_interfaces/tree/rolling/geometry_msgs">https://github.com/ros2/common_interfaces/tree/rolling/geometry_msgs</a> * nav_msgs 定义了机器人导航相关的消息和服务类型，例如地图、里程计和轨迹等。具体见：<a href="https://github.com/ros2/common_interfaces/tree/rolling/nav_msgs">https://github.com/ros2/common_interfaces/tree/rolling/nav_msgs</a> * sensor_msgs 定义了与传感器设备相关的消息和服务类型，例如图像、IMU、点云、手柄等。具体见：<a href="https://github.com/ros2/common_interfaces/tree/rolling/sensor_msgs">https://github.com/ros2/common_interfaces/tree/rolling/sensor_msgs</a> * shape_msgs 定义了三维形状，例如平面、刚体等。具体见：<a href="https://github.com/ros2/common_interfaces/tree/rolling/shape_msgs">https://github.com/ros2/common_interfaces/tree/rolling/shape_msgs</a> * std_msgs 定义了基础数据类型的消息，例如bool、string、int、float等。具体见：<a href="https://github.com/ros2/common_interfaces/tree/rolling/std_msgs">https://github.com/ros2/common_interfaces/tree/rolling/std_msgs</a> * std_srvs 定义了基础数据类型的服务，例如bool、string、int、float等。具体见：<a href="https://github.com/ros2/common_interfaces/tree/rolling/std_srvs">https://github.com/ros2/common_interfaces/tree/rolling/std_srvs</a> * stereo_msgs 定义了视差图像相关的消息，具体见：<a href="https://github.com/ros2/common_interfaces/tree/rolling/stereo_msgs">https://github.com/ros2/common_interfaces/tree/rolling/stereo_msgs</a> * trajectory_msgs 定义了机器人关节轨迹相关的消息，具体见：<a href="https://github.com/ros2/common_interfaces/tree/rolling/trajectory_msgs">https://github.com/ros2/common_interfaces/tree/rolling/trajectory_msgs</a> * visualization_msgs 定义了3D可视化相关的消息和服务类型，例如在rviz中使用的。具体见：<a href="https://github.com/ros2/common_interfaces/tree/rolling/visualization_msgs">https://github.com/ros2/common_interfaces/tree/rolling/visualization_msgs</a><p></p>
<h4 id="custom-interfaces">Custom Interfaces</h4>
<p>除了<strong>ROS</strong>提供的消息和服务类型，我们还可以自己定义消息和服务类型。 ##### Create Interface Package 自定义<strong>interfaces</strong>一般统一放在一个package中，因此需要创建一个package。 </p><figure class="highlight gauss"><table><tbody><tr><td class="code"><pre><span class="line">ros2 pkg <span class="keyword">create</span> my_robot_interfaces</span><br></pre></td></tr></tbody></table></figure> <strong>interfaces</strong>的包不需要指定<strong>build-type</strong>和<strong>dependencies</strong>参数。默认创建的是一个cpp语言的包，但是<strong>interfaces</strong>不需要<strong>include</strong>和<strong>src</strong>文件夹，因此用以下指令删除。 <figure class="highlight stata"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> my_robot_interfaces</span><br><span class="line"><span class="keyword">rm</span> -rf <span class="keyword">include</span></span><br><span class="line"><span class="keyword">rm</span> -rf src</span><br></pre></td></tr></tbody></table></figure> <strong>interfaces</strong>一般包括支持<strong>topic</strong>的消息和支持<strong>service</strong>的服务，因此分别创建两个文件夹。 <figure class="highlight arduino"><table><tbody><tr><td class="code"><pre><span class="line">mkdir msg</span><br><span class="line">mkdir srv</span><br></pre></td></tr></tbody></table></figure> ##### Setup Configuration * package.xml <strong>interfaces</strong>的包与其他包的配置不一样，需要单独配置。首先在<strong>package.xml</strong>中添加以下配置： <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rosidl_default_generators<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>rosidl_default_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">member_of_group</span>&gt;</span>rosidl_interface_packages<span class="tag">&lt;/<span class="name">member_of_group</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> * CMakeLists.txt <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">find_package</span><span class="params">(rosidl_default_generators REQUIRED)</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">rosidl_generate_interfaces</span>(${PROJECT_NAME}</span><br><span class="line">  <span class="string">"msg/HardwareStatus.msg"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">ament_export_dependencies</span><span class="params">(rosidl_default_runtime)</span></span></span><br></pre></td></tr></tbody></table></figure> ##### topic消息 一个topic消息为一个后缀为<strong>msg</strong>的文件，统一放在<strong>msg/</strong>文件夹下面。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> msg</span><br><span class="line">create HardwareStatus.msg</span><br></pre></td></tr></tbody></table></figure> 创建文件之后，在<strong>CMakeLists.txt</strong>中的<strong>rosidl_generate_interfaces</strong>添加文件路径。 使用基础类型定义消息，如下所示： <figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">int64</span> temperature</span><br><span class="line"><span class="built_in">bool</span> are_motors_ready</span><br><span class="line"><span class="built_in">string</span> debug_message</span><br></pre></td></tr></tbody></table></figure> 以上消息定义了三个变量，分别为int64类型的temperature，bool类型的are_motors_ready和string类型的debug_message ##### 编译 使用以下指令编译interfaces包。 <figure class="highlight n1ql"><table><tbody><tr><td class="code"><pre><span class="line">colcon <span class="keyword">build</span> --packages-<span class="keyword">select</span> my_robot_interfaces </span><br></pre></td></tr></tbody></table></figure> 编译完需要source一下。 ##### 使用 根其他包一样，编译好的包会统一放在工作空间的<strong>install</strong>文件夹下面。 使用方法根使用ros提供的common interfaces一样，但是需要在vscode中配置auto complete的支持。 * python auto complete 在<strong>setting.json</strong>中的<strong>python.autoComplete.extraPaths</strong>和<strong>python.analysis.extraPaths</strong>配置中将编译好的路径添加进去，如下所示 <figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"/home/robot/ros2_ws/install/my_robot_interfaces/local/lib/python3.10/dist-packages"</span></span><br></pre></td></tr></tbody></table></figure> * cpp auto complete 在<strong>c_cpp_properties.json</strong>中将编译好的<strong>interfaces</strong>包路径添加进去。 <figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"/home/robot/ros2_ws/install/my_robot_interfaces/include/**"</span></span><br></pre></td></tr></tbody></table></figure> ##### service服务 一个Service服务为一个后缀为<strong>srv</strong>的文件，统一放在<strong>srv/</strong>文件夹下面。<p></p>
<h3 id="parameters">Parameters</h3>
<p><strong>Parameters</strong>模块可以在节点运行时提供参数配置。 #### Declare Parameters * Python </p><figure class="highlight lasso"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">self</span>.declare_parameter(<span class="string">"test123"</span>, <span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure> <strong>declare_parameter</strong>的python接口需要传入两个参数，一个是parameter的名称，另外一个是parameter的默认值。 * C++ <figure class="highlight lisp"><table><tbody><tr><td class="code"><pre><span class="line">this-&gt;declare_parameter(<span class="string">"test123"</span>, rclcpp:<span class="symbol">:ParameterType</span>:<span class="symbol">:PARAMETER_STRING</span>)<span class="comment">;</span></span><br></pre></td></tr></tbody></table></figure> <strong>declare_parameter</strong>的C++接口调用方式多样，除了parameter名称，还可以指定参数的类型。 #### Use Parameters * Python <figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.number_ = <span class="variable language_">self</span>.get_parameter(<span class="string">"number_to_publish"</span>).value</span><br></pre></td></tr></tbody></table></figure> <strong>get_parameter</strong>接口可以获取声明好的参数，用*value<strong>取出对应的值。 * C++ <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">number_</span> = this-&gt;get_parameter(<span class="string">"number_to_publish"</span>).as_int()<span class="comment">;</span></span><br></pre></td></tr></tbody></table></figure> </strong>get_parameter**接口需要显示返回指定类型的数据。<p></p>
<h3 id="launch-file">Launch File</h3>
<p><strong>Launch File</strong>用于配置多个节点的运行信息，可以很方便的管理每个节点的的名称、入参等信息。 #### Create Launch Package 跟<strong>interfaces</strong>类似，<strong>launch file</strong>也单独放在一个package中进行管理。因此，首先使用以下命令创建package。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/ros2_ws/src</span><br><span class="line">ros2 pkg create my_robot_bringup</span><br></pre></td></tr></tbody></table></figure> 创建package不需要指定<strong>build-type</strong>和<strong>dependencies</strong>。默认创建的package文件夹是cpp结构的，将不需要的文件夹删除。 <figure class="highlight stata"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">rm</span> -rf <span class="keyword">include</span></span><br><span class="line"><span class="keyword">rm</span> -rf src</span><br></pre></td></tr></tbody></table></figure> 创建<strong>launch</strong>文件夹 <figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">mkdir <span class="built_in">launch</span></span><br></pre></td></tr></tbody></table></figure> 在<strong>CMakeLists.txt</strong>中配置编译后的安装目录。 <figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">install</span>(DIRECTORY</span><br><span class="line">  launch</span><br><span class="line">  DESTINATION share/<span class="variable">${PROJECT_NAME}</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure> 上述配置将在/home/robot/ros2_ws/install/my_robot_bringup/share/my_robot_bringup/文件夹下面创建<strong>launch</strong>文件夹，所有的launch file都在这个文件夹中。<p></p>
<h4 id="create-launch-file">Create Launch File</h4>
<p>在<strong>launch</strong>文件夹下面，创建后缀为.launch.py的文件，并使其变成可执行文件。 </p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">touch number_app<span class="selector-class">.launch</span><span class="selector-class">.py</span></span><br><span class="line">chmod +x number_app<span class="selector-class">.launch</span><span class="selector-class">.py</span></span><br><span class="line"><span class="selector-tag">code</span> number_app<span class="selector-class">.launch</span>.py</span><br></pre></td></tr></tbody></table></figure> <strong>launch file</strong>为一个特殊的python文件，具体如下所示： <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> launch import LaunchDescription</span><br><span class="line"><span class="keyword">from</span> launch_ros.actions import Node</span><br><span class="line"></span><br><span class="line">def generate_launch_description():</span><br><span class="line">    ld = LaunchDescription()</span><br><span class="line">    remap_number_topic = (<span class="string">"number"</span>, <span class="string">"my_number"</span>)</span><br><span class="line">    number_publisher_node = Node(</span><br><span class="line">        <span class="attribute">package</span>=<span class="string">"test_py_pkg"</span>,</span><br><span class="line">        <span class="attribute">executable</span>=<span class="string">"number_publisher"</span>,</span><br><span class="line">        <span class="attribute">name</span>=<span class="string">"my_number_publisher"</span>,</span><br><span class="line">        remappings=[</span><br><span class="line">            remap_number_topic</span><br><span class="line">        ],</span><br><span class="line">        parameters=[</span><br><span class="line">            {<span class="string">"number_to_publish"</span>: 4}</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    number_counter_node = Node(</span><br><span class="line">        <span class="attribute">package</span>=<span class="string">"test_cpp_pkg"</span>,</span><br><span class="line">        <span class="attribute">executable</span>=<span class="string">"number_counter"</span>,</span><br><span class="line">        <span class="attribute">name</span>=<span class="string">"my_number_counter"</span>,</span><br><span class="line">        remappings=[</span><br><span class="line">            remap_number_topic,</span><br><span class="line">            (<span class="string">"number_count"</span>, <span class="string">"my_number_count"</span>)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    ld.add_action(number_publisher_node)</span><br><span class="line">    ld.add_action(number_counter_node)</span><br><span class="line">    return ld</span><br></pre></td></tr></tbody></table></figure> 从<strong>launch</strong>中引入<strong>LaunchDescription</strong>，从<strong>launch_ros.actions</strong>中引入<strong>Node</strong>。在python文件中创建固定名为<strong>generate_launch_description</strong>的函数，所有的launch description都在该函数中。 使用<strong>Node</strong>创建启动节点的配置，具体具体如下所示。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">number_publisher_node = Node(</span><br><span class="line">    <span class="attribute">package</span>=<span class="string">"test_py_pkg"</span>,</span><br><span class="line">    <span class="attribute">executable</span>=<span class="string">"number_publisher"</span>,</span><br><span class="line">    <span class="attribute">name</span>=<span class="string">"my_number_publisher"</span>,</span><br><span class="line">    remappings=[</span><br><span class="line">        remap_number_topic</span><br><span class="line">    ],</span><br><span class="line">    parameters=[</span><br><span class="line">        {<span class="string">"number_to_publish"</span>: 4}</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure> <strong>package</strong>参数指定运行节点的包名称； <strong>executable</strong>指定节点的可执行文件名称； <strong>name</strong>指定节点的名称，不提供该参数，则使用节点的默认名；提供该参数，则等同于使用remap参数重命名节点名称； <strong>remappings</strong>对topic名称进行重命名，通过tuple进行remap，例如("old_name", "new_name")； <strong>parameters</strong>对节点内定义的parameters进行赋值，传入的是一个map，key是parameters的名称，value是parameter值。<p></p>
<p>创建完节点的launch description之后，需要在<strong>package.xml</strong>中添加依赖，具体如下所示： </p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>test_py_pkg<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>test_cpp_pkg<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> 因为是运行节点的配置，所以添加<strong>exec_depend</strong>即可。<p></p>
<h4 id="编译launch-file">编译launch file</h4>
<p>使用<strong>colcon build</strong>命令编译包 </p><figure class="highlight n1ql"><table><tbody><tr><td class="code"><pre><span class="line">colcon <span class="keyword">build</span> --packages-<span class="keyword">select</span> my_robot_bringup</span><br></pre></td></tr></tbody></table></figure> 编译并source配置之后，即可使用命令行运行。 <figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">launch</span> my_robot_bringup number_app.<span class="built_in">launch</span>.py</span><br></pre></td></tr></tbody></table></figure> ### Data Bag <strong>bag</strong>命令用于记录ros的topic数据。 <figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">ros2 bag record <span class="selector-attr">[topic_name1]</span> <span class="selector-attr">[topic_name2]</span> <span class="attr">--output</span> <span class="selector-attr">[record name]</span></span><br></pre></td></tr></tbody></table></figure> 上述指令用于记录指定<strong>topics</strong>的数据，并将其记录在指定文件夹中。<p></p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">ros2 bag <span class="keyword">info</span> [<span class="type">record</span> <span class="type">name</span>]</span><br></pre></td></tr></tbody></table></figure>
<p>上述指令用于查看记录的<strong>record</strong>信息。</p>
<figure class="highlight delphi"><table><tbody><tr><td class="code"><pre><span class="line">ros2 bag play [<span class="keyword">record</span> <span class="keyword">name</span>]</span><br></pre></td></tr></tbody></table></figure>
<p>上述指令用于重新播放<strong>record</strong>的数据。</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">ros2 bag record <span class="attr">--all</span> <span class="attr">--output</span> <span class="selector-attr">[record name]</span></span><br></pre></td></tr></tbody></table></figure>
<p>上述指令用于记录所有的<strong>topic</strong>数据。</p>
<h3 id="函数接口">函数接口</h3>
<h4 id="日志接口">日志接口</h4>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">self.get_logger().<span class="built_in">info</span>(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="基本指令">基本指令</h2>
<h3 id="运行节点">运行节点</h3>
<figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">ros2 run [package name] [<span class="keyword">node</span> <span class="title">name</span>]</span><br></pre></td></tr></tbody></table></figure>
<p>示例： </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">run</span> demo_nodes_cpp talker</span><br></pre></td></tr></tbody></table></figure> 上述指令会运行<strong>demo_nodes_cpp</strong>包下面的<strong>talker</strong>节点。<p></p>
<figure class="highlight stata"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="keyword">run</span> my_cpp_pkg cpp_node --ros-<span class="keyword">args</span> --<span class="keyword">remap</span> __node:=abs</span><br></pre></td></tr></tbody></table></figure>
<p>上述指令运行节点并且将节点重命名为<strong>abs</strong>.</p>
<figure class="highlight stata"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="keyword">run</span> my_cpp_pkg robot_news_station --ros-<span class="keyword">args</span> --<span class="keyword">remap</span> __node:=my_station --<span class="keyword">remap</span> robot_news:=my_news</span><br><span class="line">ros2 <span class="keyword">run</span> my_cpp_pkg smartphone --ros-<span class="keyword">args</span> -<span class="keyword">remap</span> robot_news:=my_news</span><br></pre></td></tr></tbody></table></figure>
<p><strong>remap</strong>指令除了可以将节点重命名，还可以将topic命名。</p>
<h3 id="查看节点graph">查看节点graph</h3>
<figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">rqt_graph</span></span><br></pre></td></tr></tbody></table></figure>
<p>可以以graph的形式中展示了所有运行的节点，以及节点之间的关系。 <strong>注意：rqt_graph不能查看Services</strong> ### 查看节点 * 列举正在运行的所有node </p><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="keyword">node</span> <span class="title">list</span></span><br></pre></td></tr></tbody></table></figure> * 查看指定node的信息 <figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="keyword">node</span> <span class="title">info</span> [<span class="keyword">node</span> <span class="title">name</span>]</span><br></pre></td></tr></tbody></table></figure> ### 查看服务 * 列举正在运行的所有服务 <figure class="highlight lsl"><table><tbody><tr><td class="code"><pre><span class="line">ros2 service <span class="type">list</span></span><br></pre></td></tr></tbody></table></figure> * 查看指定service的类型信息 <figure class="highlight ada"><table><tbody><tr><td class="code"><pre><span class="line">ros2 service <span class="keyword">type</span> <span class="type">[<span class="keyword">type</span> </span>name]</span><br></pre></td></tr></tbody></table></figure> * 调用指定的service <figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">ros2 service <span class="keyword">call</span> [<span class="keyword">type</span> <span class="type">name</span>] [<span class="keyword">type</span>] [<span class="keyword">values</span>]</span><br><span class="line">ros2 service <span class="keyword">call</span> /add_two_ints example_interfaces/srv/AddTwoInts "{'a':1, 'b':2}"</span><br></pre></td></tr></tbody></table></figure> 传入的values是json格式的数据。<p></p>
<h3 id="turtlesim-package">turtlesim package</h3>
<p>运行turtlesim 仿真环境 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">run</span> turtlesim turtlesim_node</span><br></pre></td></tr></tbody></table></figure> 运行键盘控制节点 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">run</span> turtlesim turtle_teleop_key</span><br></pre></td></tr></tbody></table></figure> ### 查看topic <strong>topic</strong>用于ros节点之间通信，<strong>publisher</strong>向<strong>topic</strong>发送信息，<strong>subscriber</strong>从<strong>topic</strong>接收信息。<strong>topic</strong>保证了ros节点之间是独立运行的。<p></p>
<p><strong>topic</strong>一般由三部分组成：topic类型、发布者、监听者。</p>
<p><strong>topic</strong>是匿名的，<strong>subscriber</strong>可以通过名字订阅<strong>topic</strong>，但是并不知道是哪个<strong>publisher</strong>发布的。 </p><figure class="highlight lsl"><table><tbody><tr><td class="code"><pre><span class="line">ros2 topic <span class="type">list</span></span><br></pre></td></tr></tbody></table></figure> 上述指令可以列举正在运行的topic。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 topic <span class="built_in">info</span> [topic name]</span><br><span class="line">ros2 topic <span class="built_in">info</span> /chatter</span><br></pre></td></tr></tbody></table></figure> 上述指令查看指定topic的详细信息，包括topic的数据类型，publisher的数量和subscriber的数量。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ros2 topic <span class="built_in">echo</span> [topic name]</span><br><span class="line">ros2 topic <span class="built_in">echo</span> /chatter</span><br></pre></td></tr></tbody></table></figure> 上述指令可以打印指定topic的内容。 <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">ros2 topic hz [topic name]</span><br><span class="line">ros2 topic hz <span class="regexp">/turtle1/</span>pose</span><br></pre></td></tr></tbody></table></figure> 上述指令可以监听指定topic的周期。 <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">ros2 topic bw [topic name]</span><br><span class="line">ros2 topic bw <span class="regexp">/turtle1/</span>pose</span><br></pre></td></tr></tbody></table></figure> 上述指令可以监听指定topic的消息的带宽。 <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">ros2 topic pub -r <span class="number">10</span> <span class="regexp">/robot_news  example_interfaces/m</span>sg/String <span class="string">"{data: 'This is a test.'}"</span></span><br><span class="line">ros2 topic pub <span class="regexp">/cmd_vel geometry_msgs/m</span>sg/Twist <span class="string">"{linear: {x: 0.1, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.0}}"</span></span><br></pre></td></tr></tbody></table></figure> 上述指令可以向指定topic发送消息。<p></p>
<h3 id="查看接口定义">查看接口定义</h3>
<figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="keyword">interface</span> <span class="symbol">show</span> [<span class="symbol">Object</span>]</span><br><span class="line"><span class="symbol">ros2</span> <span class="symbol">interface</span> <span class="symbol">show</span> <span class="symbol">std_msgs</span>/<span class="symbol">msg</span>/<span class="symbol">String</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用上述指令可以查看制定内容的接口信息。例如可以查看数据类型的详细定义。</p>
<figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="keyword">interface</span> <span class="symbol">list</span></span><br></pre></td></tr></tbody></table></figure>
<p>展示所有的<strong>msg</strong>和<strong>srv</strong>，包括ros官方定义的和自定义的。</p>
<figure class="highlight ada"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="keyword">interface</span> <span class="keyword">package</span> <span class="title">geometry_msgs</span></span><br></pre></td></tr></tbody></table></figure>
<p>展示指定package下面的所有<strong>msg</strong>和<strong>srv</strong>。</p>
<h3 id="parameter">Parameter</h3>
<ul>
<li>查看节点的所有参数 <figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">param</span> list</span><br></pre></td></tr></tbody></table></figure> 可以列举所有节点的所有参数。</li>
<li>查看指定节点指定参数的值 <figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">param</span> <span class="built_in">get</span> [node_name] [param_name]</span><br><span class="line">ros2 <span class="built_in">param</span> <span class="built_in">get</span> /number_publisher test123</span><br></pre></td></tr></tbody></table></figure></li>
<li>运行节点，提供参数值 <figure class="highlight dsconfig"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">ros2</span> <span class="string">run</span> <span class="string">test_cpp_pkg</span>  <span class="string">number_publisher</span> <span class="built_in">--ros-args</span> <span class="built_in">--param</span> <span class="string">test123</span>:=<span class="string">"Hello"</span></span><br><span class="line"><span class="string">ros2</span> <span class="string">run</span> <span class="string">my_cpp_pkg</span> <span class="string">led_panel</span> <span class="built_in">--ros-args</span> <span class="built_in">--param</span> <span class="string">led_states</span>:=<span class="string">"[3,4,5]"</span></span><br></pre></td></tr></tbody></table></figure> 第一条指令传入了“Hello”字符串给<strong>test123</strong>，第二条指令传入了{3,4,5}的int类型的array给<strong>led_states</strong>。</li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>Make Operation System ISO Installation File Using Systemback</title>
    <url>/2023/12/25/Make-Operation-System-ISO-Installation-File-Using-Systemback/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要讲解如何使用<strong>systemback</strong>打包操作系统，并制作U盘启动盘。 <span id="more"></span> ### 安装systemback 通过以下指令安装： </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo bash -c <span class="string">'echo "deb [arch=amd64] https://mirrors.bwbot.org/ stable main" &gt; /etc/apt/sources.list.d/systemback.list'</span></span><br><span class="line">sudo apt-key adv --keyserver <span class="string">'hkp://keyserver.ubuntu.com:80'</span> --recv-key 50B2C005A67B264F</span><br><span class="line">sudo apt-<span class="built_in">get</span> update</span><br><span class="line">sudo apt-<span class="built_in">get</span><span class="built_in"> upgrade</span></span><br><span class="line"><span class="built_in"></span>sudo apt-<span class="built_in">get</span> install systemback</span><br></pre></td></tr></tbody></table></figure> ### 删除firefox <strong>FireFox</strong>浏览器会导致<strong>systemback</strong>制作系统盘报错，因此删除之。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo snap remove firefox</span><br><span class="line"><span class="built_in">cd</span> snap</span><br><span class="line"><span class="built_in">rm</span> -rf firefox</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="制作系统盘">制作系统盘</h3>
<p>在terminal中输入以下指令打开<strong>systemback</strong> </p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">systemback-sustart</span></span><br></pre></td></tr></tbody></table></figure> 在弹出的对话框中选择<strong>Live system create</strong>按钮。 <img data-src="/2023/12/25/Make-Operation-System-ISO-Installation-File-Using-Systemback/live-system-create.png"> 在弹出的对话框中将安装iso文件重命名为<strong>ubuntu-22.04-robot</strong>，勾选<strong>include user data files</strong>，然后点击<strong>create new</strong>。 <img data-src="/2023/12/25/Make-Operation-System-ISO-Installation-File-Using-Systemback/create-new.png"><p></p>
<h3 id="写入u盘">写入U盘</h3>
<p>在iso文件制作成功后，插入U盘，可以将其写入U盘。 <img data-src="/2023/12/25/Make-Operation-System-ISO-Installation-File-Using-Systemback/write-to-target"></p>
<h3 id="安装">安装</h3>
<p>U盘启动后，选择第一项进入系统后，在terminal中使用<strong>systemback-sustart</strong>命令启动，然后选在<strong>system install</strong>即可安装系统。 <img data-src="/2023/12/25/Make-Operation-System-ISO-Installation-File-Using-Systemback/system-install.png"></p>
</body></html>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 2204 Installatson and Development Environment Setups</title>
    <url>/2023/12/25/Ubuntu-2204-Installatson-and-Development-Environment-Setups/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要记录Ubuntu22.04的系统安装和配置步骤。 <span id="more"></span> ### 下载Ubuntu22.04 推荐到<a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">清华源</a>下载，速度很快。 ### 安装Cuda &amp; Cudnn <strong>cuda</strong>和<strong>cudnn</strong>是使用<strong>tensorflow</strong>GPU版本的基础，因此在安装<strong>tensorflow</strong>之前，首先安装配置<strong>cuda</strong>和<strong>cudnn</strong>。 #### 安装Nvidia Driver 打开<strong>Software Updater</strong>，点击<strong>setting</strong>, 点击<strong>Additional Drivers</strong>，刷新后选择<strong>Using NVIDIA driver metapackage from nvidia-driver-525(proprietary)</strong>，然后点击<strong>Apply Changes</strong>，按照要求重启电脑。 <img data-src="/2023/12/25/Ubuntu-2204-Installatson-and-Development-Environment-Setups/nvidia-drivers.png"> 重启后在<strong>terminal</strong>中验证显卡驱动是否安装成功。 </p><figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">nvidia-smi</span></span><br></pre></td></tr></tbody></table></figure> <img data-src="/2023/12/25/Ubuntu-2204-Installatson-and-Development-Environment-Setups/nvidia-smi.png"><p></p>
<h4 id="安装cuda">安装CUDA</h4>
<p>选择安装的CUDA版本是<strong>cuda_11.8.0_520.61.05_linux.run</strong>，到Nvidia官网下载<a href="https://developer.nvidia.com/cuda-11-8-0-download-archive">CUDA Toolkit 11.8 Downloads</a>，根据操作系统版本选择，使用以下指令下载安装： </p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://developer.download.nvidia.com/compute/cuda/<span class="number">11</span>.<span class="number">8</span>.<span class="number">0</span>/local_installers/cuda_11.<span class="number">8</span>.<span class="number">0</span>_520.<span class="number">61</span>.<span class="number">05</span>_linux.run</span><br><span class="line"><span class="attribute">sudo</span> sh cuda_11.<span class="number">8</span>.<span class="number">0</span>_520.<span class="number">61</span>.<span class="number">05</span>_linux.run</span><br></pre></td></tr></tbody></table></figure> 安装的时候需要将<strong>drivers</strong>注释掉，否则会安装出错。 安装成功之后设置环境变量，将以下内容写入<strong>zshrc</strong>的配置文件中 <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line">export PATH=<span class="regexp">/usr/</span>local<span class="regexp">/cuda/</span>bin<span class="variable">${PATH:+:${PATH}</span>}</span><br><span class="line">export LD_LIBRARY_PATH=<span class="regexp">/usr/</span>local<span class="regexp">/cuda-11.8/</span>lib64<span class="variable">${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}</span>}</span><br></pre></td></tr></tbody></table></figure> #### 安装cudnn 与<strong>cuda 11.8</strong>适配的<strong>cudnn</strong>版本是8.6，到nvidia官网<a href="https://developer.nvidia.com/rdp/cudnn-archive">cudnn-archive</a>下载对应安装包，然后使用以下指令安装。 <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">tar -xvf cudnn-linux-x86_64-<span class="number">8.6</span>.<span class="number">0.163</span>_cuda11-archive.tar.xz</span><br><span class="line">sudo cp cudnn-linux-x86_64-<span class="number">8.6</span>.<span class="number">0.163</span>_cuda11-archive<span class="regexp">/include/</span>cudnn*.h <span class="regexp">/usr/</span>local<span class="regexp">/cuda/i</span>nclude</span><br><span class="line">sudo cp -p cudnn-linux-x86_64-<span class="number">8.6</span>.<span class="number">0.163</span>_cuda11-archive<span class="regexp">/lib/</span>libcudnn* <span class="regexp">/usr/</span>local<span class="regexp">/cuda/</span>lib64</span><br><span class="line">sudo chmod a+r <span class="regexp">/usr/</span>local<span class="regexp">/cuda/i</span>nclude<span class="regexp">/cudnn*.h /u</span>sr<span class="regexp">/local/</span>cuda<span class="regexp">/lib64/</span>libcudnn*</span><br></pre></td></tr></tbody></table></figure> 主要是将cudnn的include和lib文件拷贝到cuda目录下面。<p></p>
<h3 id="tensorflow">Tensorflow</h3>
<p>不同版本的<strong>tensorflow</strong>对应不同版本的<strong>cuda</strong>和<strong>cudnn</strong>，具体可到<a href="https://www.tensorflow.org/install/source#gpu">tensorflow source</a>查看。 使用以下指令安装： </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br><span class="line">sudo apt-<span class="built_in">get</span> update</span><br><span class="line">sudo apt-<span class="built_in">get</span><span class="built_in"> upgrade</span></span><br><span class="line"><span class="built_in"></span>sudo apt-<span class="built_in">get</span> install python3-pip</span><br><span class="line">pip install <span class="attribute">tensorflow</span>==2.12.0</span><br><span class="line">pip install tensorflow_datasets</span><br></pre></td></tr></tbody></table></figure> 安装完之后使用以下指令检查是否安装成功和是否支持GPU。也可以运行以下文件检测是否调用gpu进行训练。 <a href="tf_gpu_test.py">tf_gpu_test.py</a> <figure class="highlight gcode"><table><tbody><tr><td class="code"><pre><span class="line">pytho<span class="symbol">n3</span> -c <span class="string">"import tensorflow as tf; print(tf.config.list_physical_devices('GPU'))"</span></span><br></pre></td></tr></tbody></table></figure> 打印的日志中有以下信息，则证明安装成功。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">[PhysicalDevice(<span class="attribute">name</span>=<span class="string">'/physical_device:GPU:0'</span>, <span class="attribute">device_type</span>=<span class="string">'GPU'</span>)]</span><br></pre></td></tr></tbody></table></figure> * 报错 可能不需要处理。 <figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">uccessful NUMA <span class="keyword">node</span> <span class="title">read</span> from SysFS had negative value (-<span class="number">1</span>), but there must be at least one NUMA <span class="keyword">node</span><span class="title">, so</span> returning NUMA <span class="keyword">node</span> <span class="title">zero</span>. </span><br></pre></td></tr></tbody></table></figure> 使用以下指令解决。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> /sys/bus/pci/devices/*; <span class="keyword">do</span> <span class="built_in">echo</span> 0 | sudo <span class="built_in">tee</span> -a <span class="variable">$a</span>/numa_node; <span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="pytorch">PyTorch</h3>
<p>直接使用pip安装支持cuda的pytorch即可。 </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># pip install torch==2.1.2 torchvision==0.16.2 torchaudio==2.1.2 --index-url https://download.pytorch.org/whl/cu118 -i https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line">pip install torch torchvision torchaudio --index-url https:<span class="regexp">//</span>download.pytorch.org<span class="regexp">/whl/</span>cu118</span><br></pre></td></tr></tbody></table></figure> 安装完成后，可以验证安装的版本 <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">pip</span> list | grep torch</span><br><span class="line"><span class="attribute">torch</span>                                <span class="number">2</span>.<span class="number">2</span>.<span class="number">1</span>+cu118</span><br><span class="line"><span class="attribute">torchaudio</span>                           <span class="number">2</span>.<span class="number">2</span>.<span class="number">1</span>+cu118</span><br><span class="line"><span class="attribute">torchvision</span>                          <span class="number">0</span>.<span class="number">17</span>.<span class="number">1</span>+cu118</span><br></pre></td></tr></tbody></table></figure> 验证是否支持cuda。 <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">torch<span class="selector-class">.cuda</span><span class="selector-class">.is_available</span>()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(torch.cuda.get_device_name(<span class="number">0</span>)</span></span>)</span><br></pre></td></tr></tbody></table></figure> 打印True，则表示支持cuda。可以正常输出显卡型号。 使用以下代码验证反向推理是否可正常使用GPU。 <figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">t = torch<span class="selector-class">.nn</span><span class="selector-class">.Linear</span>(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">t<span class="selector-class">.to</span>(<span class="string">"cuda:0"</span>)</span><br><span class="line">input=torch<span class="selector-class">.randn</span>((<span class="number">3</span>,<span class="number">3</span>))<span class="selector-class">.requires_grad_</span>()<span class="selector-class">.to</span>(<span class="string">"cuda:0"</span>)</span><br><span class="line">output=<span class="built_in">t</span>(input)</span><br><span class="line">loss = torch<span class="selector-class">.sum</span>(output)</span><br><span class="line">torch<span class="selector-class">.autograd</span><span class="selector-class">.grad</span>(loss, <span class="selector-tag">input</span>, retain_graph=True)</span><br><span class="line">loss<span class="selector-class">.backward</span>()</span><br></pre></td></tr></tbody></table></figure> 若代码正常执行且没有打印异常信息，表明可使用GPU进行反向推理。<p></p>
<h3 id="设置中文输入法">设置中文输入法</h3>
<h4 id="安装更新">安装更新</h4>
<p>打开<strong>Settings</strong>，依次点击<strong>Region &amp; Language</strong>--&gt;<strong>Manage Installed Languages</strong>，更新数据。 <img data-src="/2023/12/25/Ubuntu-2204-Installatson-and-Development-Environment-Setups/manage-installed-languiages.png"> 点击<strong>Language</strong>，选择中文。之后重启。 <img data-src="/2023/12/25/Ubuntu-2204-Installatson-and-Development-Environment-Setups/select-chinese.png"> #### 设置中文输入法 依次点击<strong>Keyboard</strong>--&gt;<strong>Input Sources</strong>--&gt;<strong>+</strong>，选择中文输入法。</p>
<h3 id="其他工具包安装">其他工具包安装</h3>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install git</span><br><span class="line">sudo apt-<span class="built_in">get</span> install curl</span><br><span class="line">sudo apt-<span class="built_in">get</span> install zsh</span><br><span class="line">sudo apt-<span class="built_in">get</span> install vim</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ssh</span><br><span class="line">sudo apt-<span class="built_in">get</span> install gcc</span><br><span class="line">sudo apt-<span class="built_in">get</span> install cmake</span><br><span class="line">sudo apt-<span class="built_in">get</span> install python3-pip</span><br><span class="line">sudo apt-<span class="built_in">get</span> install tmux</span><br><span class="line">sudo apt-<span class="built_in">get</span> install tree</span><br><span class="line">sudo apt-<span class="built_in">get</span> install htop</span><br></pre></td></tr></tbody></table></figure>
<h4 id="安装oh-my-zsh">安装oh-my-zsh</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<p>若是在国内，无法访问github，则运行以下脚本使用国内的源安装。 <embed src="install_oh_my_zsh.sh"> #### 设置git </p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">"zhaoyongsheng@zju.edu.cn"</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">"Alex"</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="安装微信">安装微信</h4>
<p>腾讯官方推出了<a href="https://linux.weixin.qq.com/en">Linux版微信</a>，直接下载安装即可。 </p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://archive.ubuntukylin.com/software/pool/partner/weixin_2.1.1_amd64.deb</span></span><br><span class="line"><span class="attribute">sudo</span> dpkg -i weixin_2.<span class="number">1</span>.<span class="number">1</span>_amd64.deb</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="安装zotero">安装Zotero</h4>
<p><a href="https://github.com/retorquere/zotero-deb">Zotero</a> </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">wget -qO- https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/retorquere/</span>zotero-deb<span class="regexp">/master/i</span>nstall.sh | sudo bash</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install zotero</span><br></pre></td></tr></tbody></table></figure> 安装后登陆账号，设置坚果云同步即可。<p></p>
<h4 id="安装typora">安装Typora</h4>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install typora</span><br></pre></td></tr></tbody></table></figure>
<h4 id="安装vscode">安装VSCode</h4>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">sudo snap install <span class="attr">--classic</span> <span class="selector-tag">code</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="安装anaconda">安装Anaconda</h4>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://repo.anaconda.com/archive/Anaconda3-<span class="number">2023</span>.<span class="number">03</span>-Linux-x86_64.sh</span><br><span class="line"><span class="attribute">bash</span> Anaconda3-<span class="number">2023</span>.<span class="number">03</span>-Linux-x86_64.sh</span><br></pre></td></tr></tbody></table></figure>
<h4 id="安装ros">安装ROS</h4>
<figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">#### 设置vim</span><br><span class="line">Ubuntu自带vi，需要配置以下，方便使用：</span><br></pre></td></tr></tbody></table></figure>
<p>touch .vimrc vi .vimrc set nocompatible set backspace=2 </p><figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">#### libserial-dev</span><br><span class="line">在ROS中会用到这个库。</span><br></pre></td></tr></tbody></table></figure> sudo apt-get install libserial-dev sudo pip install pyserial <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">#### flask</span><br><span class="line">在ROS中会用到这个库。</span><br></pre></td></tr></tbody></table></figure> pip install flask pip install flask-ask-sdk pip install ask-sdk <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 调整微信分辨率</span><br><span class="line">在**terminal**中输入以下指令，打开设置界面。</span><br><span class="line">* deepin-wine6-stable</span><br></pre></td></tr></tbody></table></figure> WINEPREFIX=~/.deepinwine/Deepin-WeChat deepin-wine6-stable winecfg <figure class="highlight asciidoc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>ukylin-wine</span><br></pre></td></tr></tbody></table></figure> WINEPREFIX=~/.ukylin-wine/wechat /usr/bin/ukylin-wine winecfg <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">在**graphics**tab页中，调整分辨率大小即可。分辨率调整完成后，需要重启微信才能需要。</span><br><span class="line"></span><br><span class="line">#### 安装截图工具</span><br><span class="line">##### 安装</span><br><span class="line">推荐的截图工具是**flameshot**，使用以下命令安装：</span><br></pre></td></tr></tbody></table></figure> sudo apt-get install flameshot <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">##### 设置快捷键</span><br><span class="line">打开**Settings**，依次点击**Keyboard**--&gt;**View and Customize Shortcuts**--&gt;**Custom Shortcuts**--&gt;**Add Shortcut**。</span><br><span class="line"></span><br><span class="line">#### 安装Shadowsocks</span><br><span class="line">Ubuntu22<span class="number">.04</span>软件商店中自带**shadowsocks-electron**，点击安装即可。</span><br><span class="line"></span><br><span class="line">#### 安装google chrome</span><br></pre></td></tr></tbody></table></figure> wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb ls sudo dpkg -i google-chrome-stable_current_amd64.deb <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 创建ssh key</span><br></pre></td></tr></tbody></table></figure> ssh-keygen -t rsa cat ~/.ssh/id_rsa.pub <figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">将public key拷贝到github中。</span><br><span class="line"></span><br><span class="line">#### 映射CAPS按键</span><br><span class="line">首先使用以下指令查看支持的映射关系。</span><br></pre></td></tr></tbody></table></figure> cat /usr/share/X11/xkb/rules/base.lst | grep caps <figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">然后打开配置文件。</span><br></pre></td></tr></tbody></table></figure> sudo gedit /etc/default/keyboard <figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">添加以下配置</span><br></pre></td></tr></tbody></table></figure> # KEYBOARD CONFIGURATION FILE<p></p>
<h1 id="consult-the-keyboard5-manual-page.">Consult the keyboard(5) manual page.</h1>
<p>XKBMODEL="pc105" XKBLAYOUT="us" XKBVARIANT="" XKBOPTIONS="caps:shift"</p>
<p>BACKSPACE="guess" ``` 重启之后生效。</p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Environment</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS2 Learning Notes RViz &amp; Gazebo</title>
    <url>/2023/12/24/ROS2-Learning-Notes-RViz-Gazebo/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要为<strong>ROS2 Humble</strong>的学习笔记，主要包括如何使用<strong>URDF</strong>在仿真环境<strong>Gazebo</strong>中控制机器人。* * 使用<strong>URDF</strong>定义机器人 * 在<strong>Gazebo</strong>中仿真机器人 * 使用<strong>Gazebo</strong>的插件控制机器人运动 * 打包整个机器人应用 <span id="more"></span> ## Transform ### Visualize a robot tfs in RViz2 安装urdf tutorial package 和 tf2 tools. </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-urdf-tutorial</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-tf2-tools</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>安装成功后，可以到以下路径查看已经定义好的urdf文件。 </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">cd <span class="regexp">/opt/</span>ros<span class="regexp">/humble/</span>share<span class="regexp">/urdf_tutorial/u</span>rdf</span><br></pre></td></tr></tbody></table></figure> <strong>share</strong>文件夹是所有ros package放置的地方。<p></p>
<p>使用以下命令可以查看一个指定的urdf文件定义的robot。 </p><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">launch</span> urdf_tutorial display.<span class="built_in">launch</span>.py model:=urdf/<span class="number">08</span>-macroed.urdf.xacro</span><br></pre></td></tr></tbody></table></figure> 启动机器人后，会在<strong>RViz</strong>中显示机器人以及机器人的<strong>tf</strong>。并会有一个<strong>tf</strong>的topic，以array的形式实时发布每个关节的<strong>tf</strong>值。 <figure class="highlight nestedtext"><table><tbody><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">header:</span></span><br><span class="line">    <span class="attribute">stamp</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">sec</span><span class="punctuation">:</span> <span class="string">1703555328</span></span><br><span class="line">      <span class="attribute">nanosec</span><span class="punctuation">:</span> <span class="string">545975035</span></span><br><span class="line">    <span class="attribute">frame_id</span><span class="punctuation">:</span> <span class="string">gripper_pole</span></span><br><span class="line">  <span class="attribute">child_frame_id</span><span class="punctuation">:</span> <span class="string">left_gripper</span></span><br><span class="line">  <span class="attribute">transform</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">translation</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">x</span><span class="punctuation">:</span> <span class="string">0.2</span></span><br><span class="line">      <span class="attribute">y</span><span class="punctuation">:</span> <span class="string">0.01</span></span><br><span class="line">      <span class="attribute">z</span><span class="punctuation">:</span> <span class="string">0.0</span></span><br><span class="line">    <span class="attribute">rotation</span><span class="punctuation">:</span></span><br><span class="line">      <span class="attribute">x</span><span class="punctuation">:</span> <span class="string">0.0</span></span><br><span class="line">      <span class="attribute">y</span><span class="punctuation">:</span> <span class="string">0.0</span></span><br><span class="line">      <span class="attribute">z</span><span class="punctuation">:</span> <span class="string">0.0</span></span><br><span class="line">      <span class="attribute">w</span><span class="punctuation">:</span> <span class="string">1.0</span></span><br></pre></td></tr></tbody></table></figure> 消息结构主要有三部分，<strong>header</strong>主要包括时间戳和帧id，<strong>child_frame_id</strong>主要是与当前<strong>tf</strong>刚性关联的子<strong>tf</strong>，<strong>transform</strong>表示了当前<strong>tf</strong>和child <strong>tf</strong>的平移旋转关系。 机器人的所有<strong>tf</strong>会以树状结构显示，具体可以使用以下指令查看。 <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">ros2</span> run tf2_tools view_frames</span><br><span class="line"><span class="attribute">open</span> frames_2023-<span class="number">12</span>-<span class="number">26</span>_09.<span class="number">52</span>.<span class="number">01</span>.pdf</span><br></pre></td></tr></tbody></table></figure> 除了查看<strong>urdf</strong>所定义的<strong>tf tree</strong>，我们还可以查看两个关节之间的变换关系。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">run</span> tf2_ros tf2_echo base_link horizontal_arm</span><br></pre></td></tr></tbody></table></figure> 上述指令可以实时查看两个关节之间的变换关系。<p></p>
<h3 id="create-a-urdf-file">Create a URDF File</h3>
<ul>
<li>Unified Robot Description Format</li>
<li>Used to generate TFs</li>
<li>XML format #### Create and Visualize a Link <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">"my_robot"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"green"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">"0 0.5 0 1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"blue"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">"0 0.0 0.5 1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"grey"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">"0.5 0.5 0.5 1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">"0.6 0.4 0.2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0.1"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"green"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"second_link"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">"0.1"</span> <span class="attr">length</span>=<span class="string">"0.2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0.1"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"grey"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"third_link"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">"0.1 0.1 0.1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0.05"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"blue"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"base_second_joint"</span> <span class="attr">type</span>=<span class="string">"fixed"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"second_link"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0.2"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"second_third_joint"</span> <span class="attr">type</span>=<span class="string">"fixed"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"second_link"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"third_link"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0.2"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> 第一句标明urdf文件的xml版本。 ##### 基本结构</li>
<li>robot, 定义了一个机器人，名称使用name属性标签命名
<ul>
<li>link，定义了机器人的一个部位，内部包含一个visual标签
<ul>
<li>geometry, 定义了几何形状，例如box，cylinder等等</li>
<li>origin，定义了几何体的中心原点相对于link坐标系的相对位置关系，二者默认重叠。</li>
<li>material，定义了link的材料，例如颜色等等</li>
</ul></li>
<li>joint，定义了两个link之间的关系，用name标识命名，还有type属性值。
<ul>
<li>parent，定义了父link</li>
<li>child，定义了子link</li>
<li>origin，定义了子link坐标系与父link坐标系之间的相对位置关系</li>
</ul></li>
<li>material，定义了材料属性，使用name命名标识，例如颜色等等。</li>
</ul></li>
</ul>
<h5 id="joint-类型">joint 类型</h5>
<p><strong>joint</strong>定义了两个刚体之间的运动，因此其类型是多种多样的。 * fixed 两个刚体之间是固定的，无法移动，因此只需要定义<strong>parent link</strong>、<strong>child link</strong>和<strong>origin</strong>即可。</p>
<ul>
<li><p>revolute </p><figure class="highlight abnf"><table><tbody><tr><td class="code"><pre><span class="line">&lt;joint name<span class="operator">=</span><span class="string">"base_second_joint"</span> type<span class="operator">=</span><span class="string">"revolute"</span>&gt;</span><br><span class="line">    &lt;parent link<span class="operator">=</span><span class="string">"base_link"</span>/&gt;</span><br><span class="line">    &lt;child link<span class="operator">=</span><span class="string">"second_link"</span>/&gt;</span><br><span class="line">    &lt;origin xyz<span class="operator">=</span><span class="string">"0 0 0.2"</span> rpy<span class="operator">=</span><span class="string">"0 0 0"</span>/&gt;</span><br><span class="line">    &lt;axis xyz<span class="operator">=</span><span class="string">"0 0 1"</span>/&gt;</span><br><span class="line">    &lt;limit lower<span class="operator">=</span><span class="string">"-1.57"</span> upper<span class="operator">=</span><span class="string">"1.57"</span> velocity<span class="operator">=</span><span class="string">"100"</span> effort<span class="operator">=</span><span class="string">"100"</span> /&gt;</span><br><span class="line">&lt;/joint&gt;</span><br></pre></td></tr></tbody></table></figure> 子刚体是旋转的，需要指定旋转轴<strong>axis</strong>以及旋转运动的<strong>limit</strong>。旋转轴<strong>axis</strong>需要用xyz向量表示；<strong>limit</strong>使用下限<strong>lower</strong>、上限<strong>upper</strong>、速度<strong>velocity</strong>、加速度<strong>effort</strong>。<p></p></li>
<li><p>continuous </p><figure class="highlight abnf"><table><tbody><tr><td class="code"><pre><span class="line">&lt;joint name<span class="operator">=</span><span class="string">"base_second_joint"</span> type<span class="operator">=</span><span class="string">"continuous"</span>&gt;</span><br><span class="line">    &lt;parent link<span class="operator">=</span><span class="string">"base_link"</span>/&gt;</span><br><span class="line">    &lt;child link<span class="operator">=</span><span class="string">"second_link"</span>/&gt;</span><br><span class="line">    &lt;origin xyz<span class="operator">=</span><span class="string">"0 0 0.2"</span> rpy<span class="operator">=</span><span class="string">"0 0 0"</span>/&gt;</span><br><span class="line">    &lt;axis xyz<span class="operator">=</span><span class="string">"0 0 1"</span>/&gt;</span><br><span class="line">    &lt;limit lower<span class="operator">=</span><span class="string">"-1.57"</span> upper<span class="operator">=</span><span class="string">"1.57"</span> velocity<span class="operator">=</span><span class="string">"100"</span> effort<span class="operator">=</span><span class="string">"100"</span> /&gt;</span><br><span class="line">&lt;/joint&gt;</span><br></pre></td></tr></tbody></table></figure> <strong>continuous</strong>类型与<strong>revolute</strong>类似，但是没有<strong>limit</strong>限制，因此只需要提供一个<strong>axis</strong>即可。<p></p></li>
<li><p>prismatic </p><figure class="highlight abnf"><table><tbody><tr><td class="code"><pre><span class="line">&lt;joint name<span class="operator">=</span><span class="string">"base_second_joint"</span> type<span class="operator">=</span><span class="string">"prismatic"</span>&gt;</span><br><span class="line">    &lt;parent link<span class="operator">=</span><span class="string">"base_link"</span>/&gt;</span><br><span class="line">    &lt;child link<span class="operator">=</span><span class="string">"second_link"</span>/&gt;</span><br><span class="line">    &lt;origin xyz<span class="operator">=</span><span class="string">"0 0 0.2"</span> rpy<span class="operator">=</span><span class="string">"0 0 0"</span>/&gt;</span><br><span class="line">    &lt;axis xyz<span class="operator">=</span><span class="string">"1 0 0"</span>/&gt;</span><br><span class="line">    &lt;limit lower<span class="operator">=</span><span class="string">"0.0"</span> upper<span class="operator">=</span><span class="string">"0.2"</span> velocity<span class="operator">=</span><span class="string">"100"</span> effort<span class="operator">=</span><span class="string">"100"</span> /&gt;</span><br><span class="line">&lt;/joint&gt;</span><br></pre></td></tr></tbody></table></figure> 定义了刚体之间的平移运动，需要平移的方向<strong>axis</strong>和平移的限制<strong>limit</strong><p></p></li>
</ul>
<h4 id="create-a-robot">Create a Robot</h4>
<p>我已经创建好了一个robot的urdf文件，<img alt="my_robot.urdf" data-src="/2023/12/24/ROS2-Learning-Notes-RViz-Gazebo/my_robot.urdf"> 使用以下指令可视化已经定义好的机器人。 </p><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">launch</span> urdf_tutorial display.<span class="built_in">launch</span>.py model:=/home/robot/my_robot.urdf</span><br></pre></td></tr></tbody></table></figure> <strong>model</strong>参数需要提供完整的绝对路径。 在RViz中即可显示机器人。 <img data-src="/2023/12/24/ROS2-Learning-Notes-RViz-Gazebo/my-robot.png"> 使用以下指令可以查看定义好的tf树状结构。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">run</span> tf2_tools view_frames</span><br></pre></td></tr></tbody></table></figure> <img data-src="/2023/12/24/ROS2-Learning-Notes-RViz-Gazebo/my-robot-view.png"><p></p>
<h4 id="launch-urdf-step-by-step">Launch URDF Step by Step</h4>
<p>除了使用<strong>urdf_tutorial</strong>提供的<strong>display.launch.py</strong>运行定义好的urdf，我们还可以使用ros的命令行一步一步地运行。 <img data-src="/2023/12/24/ROS2-Learning-Notes-RViz-Gazebo/urdf-rqt-graph.png"> 如上图所是，可视化<strong>urdf</strong>之后，ros会默认发起两个节点，<strong>robot_state_publisher</strong>和<strong>joint_state_publisher</strong>。</p>
<h5 id="robot_state_publisher">robot_state_publisher</h5>
<p><strong>robot_state_publisher</strong>负责解析机器人的<strong>urdf</strong>文件，并将解析结果向两个<strong>topic</strong>发送。一个是<strong>robot_description</strong>，包含了<strong>urdf</strong>提供的机器人描述信息，例如机器人的<strong>link</strong>和<strong>joint</strong>；另外一个是<strong>tf</strong>，包含了机器人机器人所有的<strong>tf</strong>信息。与此同时，该节点还监听一个<strong>topic</strong>，名字为<strong>joint_states</strong>，主要监听可运动关节的实时状态信息，并根据这些信息实时计算<strong>tf</strong>结果。 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">run</span> robot_state_publisher robot_state_publisher --ros-args --param robot_description:=<span class="string">"<span class="variable">$(xacro my_robot.urdf)</span>"</span></span><br></pre></td></tr></tbody></table></figure> 上述指令需要传入事先定义好的<strong>urdf</strong>文件。如果不是在统一目录下运行，则需要传入完整的<strong>path</strong>。 ##### joint_state_publisher <strong>joint_state_publisher</strong>监听<strong>robot_description</strong>的信息，并生成提供驱动机器人关节运动的接口，驱动机器人的关节运动，并将运动结果发送到<strong>joint_states</strong>。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">run</span> joint_state_publisher_gui joint_state_publisher_gui</span><br></pre></td></tr></tbody></table></figure> ##### rviz <strong>RViz</strong>默认可以解析上述<strong>topic</strong>的结果，因此启动后可以在界面手动添加<strong>robot model</strong>和<strong>tf</strong>。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">run</span> rviz2 rviz2</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="launch-file">Launch File</h3>
<h4 id="xml">XML</h4>
<figure class="highlight abnf"><table><tbody><tr><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">    &lt;let name<span class="operator">=</span><span class="string">"urdf_path"</span> value<span class="operator">=</span><span class="string">"$(find-pkg-share my_robot_description)/urdf/my_robot.urdf"</span>/&gt;</span><br><span class="line">    &lt;node pkg<span class="operator">=</span><span class="string">"robot_state_publisher"</span> exec<span class="operator">=</span><span class="string">"robot_state_publisher"</span>&gt;</span><br><span class="line">        &lt;param name<span class="operator">=</span><span class="string">"robot_description"</span> value<span class="operator">=</span><span class="string">"$(command 'xacro $(var urdf_path)')"</span>/&gt;</span><br><span class="line">    &lt;/node&gt;</span><br><span class="line">    &lt;node pkg<span class="operator">=</span><span class="string">"joint_state_publisher_gui"</span> exec<span class="operator">=</span><span class="string">"joint_state_publisher_gui"</span>/&gt;</span><br><span class="line">    &lt;node pkg<span class="operator">=</span><span class="string">"rviz2"</span> exec<span class="operator">=</span><span class="string">"rviz2"</span> output<span class="operator">=</span><span class="string">"screen"</span>/&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>所有的定义在<strong>launch</strong>标签内。 变量的定义在<strong>let</strong>标签内，变量名为name，变量值为value。 <strong>$()</strong>可以提供可执行函数逻辑，<strong>find-pkg-share my_robot_description</strong>可以提供当前package安装的绝对路径，<strong>command ''</strong>可以运行命令行指令，具体命令行在单引号内。 节点的定义在<strong>node</strong>标签内，需要至少提供两个参数，一个是<strong>pkg</strong>指定节点包的名字，另外一个是<strong>exec</strong>制定可执行文件的名字。 参数的定义在<strong>param</strong>标签内，标签需要放置在<strong>node</strong>标签内，需要提供<strong>name</strong>和<strong>value</strong>两个属性值。 #### Python </p><figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> launch <span class="keyword">import</span> LaunchDescription</span><br><span class="line"><span class="keyword">from</span> launch.substitutions <span class="keyword">import</span> Command</span><br><span class="line"><span class="keyword">from</span> launch_ros.parameter_descriptions <span class="keyword">import</span> ParameterValue</span><br><span class="line"><span class="keyword">from</span> launch_ros.actions <span class="keyword">import</span> Node</span><br><span class="line"><span class="keyword">from</span> ament_index_python.packages <span class="keyword">import</span> get_package_share_path</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> generate_launch_description():</span><br><span class="line">    ld = LaunchDescription()</span><br><span class="line">    urdf_path = os.path.<span class="keyword">join</span>(get_package_share_path(<span class="string">'my_robot_description'</span>), <span class="string">'urdf'</span>, <span class="string">'my_robot.urdf'</span>)</span><br><span class="line">    rviz_config_path = os.path.<span class="keyword">join</span>(get_package_share_path(<span class="string">'my_robot_description'</span>), <span class="string">'rviz'</span>, <span class="string">'default.rviz'</span>)</span><br><span class="line">    robot_description = ParameterValue(Command([<span class="string">'xacro '</span>, urdf_path]), value_type=str)</span><br><span class="line">    </span><br><span class="line">    robot_state_publisher_node = Node(</span><br><span class="line">        <span class="keyword">package</span>=<span class="string">"robot_state_publisher"</span>,</span><br><span class="line">        executable=<span class="string">"robot_state_publisher"</span>,</span><br><span class="line">        parameters=[</span><br><span class="line">            {<span class="string">'robot_description'</span>: robot_description}</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    joint_state_publisher_node = Node(</span><br><span class="line">        <span class="keyword">package</span>=<span class="string">"joint_state_publisher_gui"</span>,</span><br><span class="line">        executable=<span class="string">"joint_state_publisher_gui"</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    rviz2_node = Node(</span><br><span class="line">        <span class="keyword">package</span>=<span class="string">"rviz2"</span>,</span><br><span class="line">        executable=<span class="string">"rviz2"</span>,</span><br><span class="line">        arguments=[</span><br><span class="line">            rviz_config_path</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    ld.add_action(robot_state_publisher_node)</span><br><span class="line">    ld.add_action(joint_state_publisher_node)</span><br><span class="line">    ld.add_action(rviz2_node)</span><br><span class="line">    <span class="keyword">return</span> ld</span><br></pre></td></tr></tbody></table></figure> Python版本的launch文件内必须有一个名为<strong>generate_launch_description</strong>的文件。然后从<strong>launch</strong>引入<strong>LaunchDescription</strong>，从<strong>launch_ros.actions</strong>引入<strong>Node</strong>。 <strong>get_package_share_path</strong>函数可以帮助我们发现指定包的安装路径。 <strong>ParameterValue</strong>可以定义一个parameter参数，并且使用<strong>Command</strong>指令。<p></p>
<h3 id="improve-urdf-with-xacro">Improve URDF with Xacro</h3>
<h4 id="support-for-xacro">Support for Xacro</h4>
<p>首先将urdf文件名的后缀由.urdf修改为.urdf.xacro </p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">mv my_robot<span class="selector-class">.urdf</span> my_robot<span class="selector-class">.urdf</span>.xacro</span><br></pre></td></tr></tbody></table></figure> 然后在<strong>robot</strong>标签添加一行代码。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">&lt;robot <span class="attribute">name</span>=<span class="string">"my_robot"</span>&gt;</span><br><span class="line">&lt;robot <span class="attribute">name</span>=<span class="string">"my_robot"</span> xmlns:<span class="attribute">xacro</span>=<span class="string">"http://wwww.ros.org/wiki/xacro"</span>&gt;</span><br></pre></td></tr></tbody></table></figure> #### Create Variables with Xacro Properties * 定义变量 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">&lt;xacro:property <span class="attribute">name</span>=<span class="string">"base_length"</span> <span class="attribute">value</span>=<span class="string">"0.6"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure> 使用<strong>xacro:property</strong>标签定义变量，变量名用<strong>name</strong>标识，变量值用<strong>value</strong>标识。 * 使用变量 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">&lt;origin <span class="attribute">xyz</span>=<span class="string">"<span class="variable">${-base_length/4.0}</span> -0.225 0"</span> <span class="attribute">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure> 使用${}表达式引用变量。<p></p>
<h4 id="create-functions-with-xacro-properties">Create Functions with Xacro Properties</h4>
<p>除了可以使用<strong>property</strong>定义变量，<strong>xacro</strong>还提供了<strong>macro</strong>用于定义函数体， 定义好的函数体可以像函数一样重复使用。 </p><figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">"example_macro"</span> <span class="attr">params</span>=<span class="string">"a b c"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"dummy_link"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">"$</span></span></span><span class="template-variable">{a}</span><span class="language-xml"><span class="tag"><span class="string"> $</span></span></span><span class="template-variable">{b}</span><span class="language-xml"><span class="tag"><span class="string"> $</span></span></span><span class="template-variable">{c}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure> 上述代码定义了一个名为<strong>example_macro</strong>的函数体，需要传入a、b和c三个参数。<p></p>
<p>使用函数体。 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">&lt;xacro:example_macro <span class="attribute">a</span>=<span class="string">"2"</span> <span class="attribute">b</span>=<span class="string">"3"</span> <span class="attribute">c</span>=<span class="string">"4"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure> 直接使用<strong>xacro</strong>引用函数体，并传入参数即可。<p></p>
<h4 id="include-xacro-files-in-another-xacro-file">Include Xacro Files in Another Xacro File</h4>
<p>首先定义好xacro文件，然后利用<strong>xacro:include</strong>引入文件即可。 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">&lt;xacro:include <span class="attribute">filename</span>=<span class="string">"mobile_base.xacro"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="meshes-for-realrobot">Meshes for RealRobot</h3>
<p><strong>urdf</strong>通过<strong>geometry</strong>的<strong>mesh</strong>接口引入真实的机器人形状结构，需要提供<strong>stl</strong>文件。</p>
<h3 id="simulate-robot-with-gazebo">Simulate Robot with Gazebo</h3>
<p><strong>RViz</strong>不是一个仿真工具，而仅仅是一个3D可视化工具。<strong>Gazebo</strong>是仿真工具，可以模拟重力和物理属性。 <strong>Gazebo</strong>是一个独立的工具，可以直接在terminal中启动。 </p><figure class="highlight 1c"><table><tbody><tr><td class="code"><pre><span class="line">gazebo <span class="meta">&amp;</span></span><br></pre></td></tr></tbody></table></figure> <strong>Gazebo</strong>通过<strong>gazebo_ros</strong>工具与ros环境通信。 <strong>Gazebo</strong>有很多插件，例如<strong>Control plugin</strong>和<strong>Joint State Publisher plugin</strong>等等。 #### Add Inertia Tags in URDF 要想在<strong>Gazebo</strong>中仿真，除了提供可视化的<strong>visual</strong>标签，还需要提供跟运动相关的<strong>inertial</strong>标签。规则且质量分布均匀的几何体的惯量一般可以根据其几何形状计算出来，因此我们通过<strong>xacro:macro</strong>定义惯量函数。 <strong>inertial</strong>一般包含三部分： 1. <strong>origin</strong>，一般跟可视化的<strong>origin</strong>保持一致。 2. <strong>mass</strong>，质量大小，提供value即可。 3. <strong>inertia</strong>，转动惯量矩阵，通常是一个3x3的对称矩阵，为了方便，通常只需要提供上三角矩阵的数值。<p></p>
<ul>
<li><p>立方体 </p><figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">"box_inertia"</span> <span class="attr">params</span>=<span class="string">"m l w h xyz rpy"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"$</span></span></span><span class="template-variable">{xyz}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">rpy</span>=<span class="string">"$</span></span></span><span class="template-variable">{rpy}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">{m}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">"$</span></span></span><span class="template-variable">{(m/12)*(h*h+l*l)}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">ixy</span>=<span class="string">"0"</span> <span class="attr">ixz</span>=<span class="string">"0"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">iyy</span>=<span class="string">"$</span></span></span><span class="template-variable">{(m/12)*(w*w+l*l)}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">iyz</span>=<span class="string">"0"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">izz</span>=<span class="string">"$</span></span></span><span class="template-variable">{(m/12)*(w*w+h*h)}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure> 需要提供以下入参：m--质量，l--长度，w--宽度，h--高度，xyz--origin的原点平移向量，rpy--origin的旋转角度。<p></p></li>
<li><p>圆柱体 </p><figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">"cylinder_inertia"</span> <span class="attr">params</span>=<span class="string">"m r l xyz rpy"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"$</span></span></span><span class="template-variable">{xyz}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">rpy</span>=<span class="string">"$</span></span></span><span class="template-variable">{rpy}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">{m}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">"$</span></span></span><span class="template-variable">{(m/12.0)*(3*r*r+l*l)}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">ixy</span>=<span class="string">"$</span></span></span><span class="template-variable">{0}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">ixz</span>=<span class="string">"$</span></span></span><span class="template-variable">{0}</span><span class="language-xml"><span class="tag"><span class="string">"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">iyy</span>=<span class="string">"$</span></span></span><span class="template-variable">{(m/12.0)*(3*r*r+l*l)}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">iyz</span>=<span class="string">"$</span></span></span><span class="template-variable">{0}</span><span class="language-xml"><span class="tag"><span class="string">"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">izz</span>=<span class="string">"$</span></span></span><span class="template-variable">{(m/2.0)*(r*r)}</span><span class="language-xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure> 需要提供以下入参：m--质量，r--圆柱的半径，l--圆柱的高度，xyz和rpy同上。<p></p></li>
<li><p>球体 </p><figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">"sphere_inertia"</span> <span class="attr">params</span>=<span class="string">"m r xyz rpy"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"$</span></span></span><span class="template-variable">{xyz}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">rpy</span>=<span class="string">"$</span></span></span><span class="template-variable">{rpy}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">{m}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">"$</span></span></span><span class="template-variable">{(2/5*m)*(r*r)}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">ixy</span>=<span class="string">"0"</span> <span class="attr">ixz</span>=<span class="string">"0"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">iyy</span>=<span class="string">"$</span></span></span><span class="template-variable">{(2/5*m)*(r*r)}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">iyz</span>=<span class="string">"0"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">izz</span>=<span class="string">"$</span></span></span><span class="template-variable">{(2/5*m)*(r*r)}</span><span class="language-xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure> 需要提供以下入参：m--质量，r--球的半径，xyz和rpy同上。<p></p></li>
</ul>
<p>上述函数调用直接在<strong>link</strong>标签内通过<strong>xacro</strong>调用即可，传入名字和入参，具体如下所示。 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">&lt;xacro:box_inertia <span class="attribute">m</span>=<span class="string">"5"</span> <span class="attribute">l</span>=<span class="string">"0.6"</span> <span class="attribute">w</span>=<span class="string">"0.4"</span> <span class="attribute">h</span>=<span class="string">"0.2"</span> <span class="attribute">xyz</span>=<span class="string">"0 0 0"</span> <span class="attribute">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure> #### Add Collision Tags in URDF 碰撞检测在仿真中同样重要，用<strong>collision</strong>标签定义，一般与<strong>visual</strong>标签内定义的几何形状相同或者是简化的几何形状。 <figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">"$</span></span></span><span class="template-variable">{base_length}</span><span class="language-xml"><span class="tag"><span class="string"> $</span></span></span><span class="template-variable">{base_width}</span><span class="language-xml"><span class="tag"><span class="string"> $</span></span></span><span class="template-variable">{base_height}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 $</span></span></span><span class="template-variable">{base_height/2.0}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure> #### Spawn Robot in Gazebo ##### Step by Step 根<strong>RViz</strong>一样，<strong>Gazebo</strong>同样需要监听<strong>robot_description</strong>来获取机器人的信息，因此需要启动<strong>robot_states_publisher</strong>节点。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">run</span> robot_state_publisher robot_state_publisher --ros-args --param robot_description:=<span class="string">"<span class="variable">$(xacro ~/ros2_ws/src/my_robot_description/urdf/my_robot.urdf.xacro)</span>"</span></span><br></pre></td></tr></tbody></table></figure> 节点需要传入机器人的<strong>urdf</strong>信息。<p></p>
<p>然后启动支持<strong>ROS</strong>接口的<strong>Gazebo</strong>。 </p><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">launch</span> gazebo_ros gazebo.<span class="built_in">launch</span>.py</span><br></pre></td></tr></tbody></table></figure> 需要启动<strong>gazebo_ros</strong>包的接口。<p></p>
<p>最后用<strong>gazebo_ros</strong>包的<strong>spawn_entity</strong>节点生成机器人。 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">run</span> gazebo_ros spawn_entity.py -topic robot_description -entity my_robot</span><br></pre></td></tr></tbody></table></figure> 需要监听<strong>robot_description</strong>主体，生成<strong>my_robot</strong>的<strong>entity</strong>。 ##### Using a Launch File <figure class="highlight abnf"><table><tbody><tr><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">    &lt;let name<span class="operator">=</span><span class="string">"urdf_path"</span> value<span class="operator">=</span><span class="string">"$(find-pkg-share my_robot_description)/urdf/my_robot.urdf.xacro"</span>/&gt;</span><br><span class="line">    &lt;let name<span class="operator">=</span><span class="string">"rviz_config_path"</span> value<span class="operator">=</span><span class="string">"$(find-pkg-share my_robot_description)/rviz/default.rviz"</span>/&gt;</span><br><span class="line">    &lt;node pkg<span class="operator">=</span><span class="string">"robot_state_publisher"</span> exec<span class="operator">=</span><span class="string">"robot_state_publisher"</span>&gt;</span><br><span class="line">        &lt;param name<span class="operator">=</span><span class="string">"robot_description"</span> value<span class="operator">=</span><span class="string">"$(command 'xacro $(var urdf_path)')"</span>/&gt;</span><br><span class="line">    &lt;/node&gt;</span><br><span class="line">    &lt;include file<span class="operator">=</span><span class="string">"$(find-pkg-share gazebo_ros)/launch/gazebo.launch.py"</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;node pkg<span class="operator">=</span><span class="string">"gazebo_ros"</span> exec<span class="operator">=</span><span class="string">"spawn_entity.py"</span> args<span class="operator">=</span><span class="string">"-topic robot_description -entity my_robot"</span>/&gt;</span><br><span class="line">    &lt;node pkg<span class="operator">=</span><span class="string">"rviz2"</span> exec<span class="operator">=</span><span class="string">"rviz2"</span> output<span class="operator">=</span><span class="string">"screen"</span> args<span class="operator">=</span><span class="string">"$(var rviz_config_path)"</span>/&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></tbody></table></figure> <strong>launch</strong>文件的结构跟之前的类似，不过添加了两个新的内容。 1. 可以在launch文件中引入其他的launch文件，直接用include标签提供文件的目录即可。 2. 运行节点传入args（不是param）,可以直接使用args属性。<p></p>
<h5 id="add-colors-in-gazebo">Add Colors in Gazebo</h5>
<p>要想在<strong>Gazebo</strong>中显示每个刚体的颜色，需要使用<strong>gazebo</strong>标签对刚体的定义进行额外描述。 </p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">"http://wwww.ros.org/wiki/xacro"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">"base_link"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Blue<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">"right_wheel_link"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Green<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">"left_wheel_link"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Green<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">"caster_wheel_link"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Grey<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> 用<strong>reference</strong>指明要描述的刚体（link）,然后用<strong>material</strong>标签去定义颜色。 还可以使用<strong>mu</strong>标签定义摩擦系数。 <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">"caster_wheel_link"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">material</span>&gt;</span>Gazebo/Grey<span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mu1</span> <span class="attr">value</span>=<span class="string">"0.1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mu2</span> <span class="attr">value</span>=<span class="string">"0.1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h5 id="add-a-gazebo-control-plugin-to-control-robot">Add a Gazebo Control Plugin to Control Robot</h5>
<p><a href="https://classic.gazebosim.org/tutorials?tut=ros_gzplugins">官网教程</a> <a href="git@github.com:ros-simulation/gazebo_ros_pkgs.git">Gazebo ros pkg源码</a> </p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">"diff_drive_controller"</span> <span class="attr">filename</span>=<span class="string">"libgazebo_ros_diff_drive.so"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Update rate in Hz --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">update_rate</span>&gt;</span>50<span class="tag">&lt;/<span class="name">update_rate</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- wheels --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">left_joint</span>&gt;</span>base_left_wheel_joint<span class="tag">&lt;/<span class="name">left_joint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">right_joint</span>&gt;</span>base_right_wheel_joint<span class="tag">&lt;/<span class="name">right_joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- kinematics --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wheel_separation</span>&gt;</span>0.45<span class="tag">&lt;/<span class="name">wheel_separation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wheel_diameter</span>&gt;</span>0.2<span class="tag">&lt;/<span class="name">wheel_diameter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- limits --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;max_wheel_torque&gt;200&lt;/max_wheel_torque&gt;</span></span><br><span class="line"><span class="comment">        &lt;max_wheel_acceleration&gt;10.0&lt;/max_wheel_acceleration&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- input --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;command_topic&gt;cmd_vel&lt;/command_topic&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- output --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">publish_odom</span>&gt;</span>true<span class="tag">&lt;/<span class="name">publish_odom</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">publish_odom_tf</span>&gt;</span>true<span class="tag">&lt;/<span class="name">publish_odom_tf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">publish_wheel_tf</span>&gt;</span>true<span class="tag">&lt;/<span class="name">publish_wheel_tf</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">odometry_topic</span>&gt;</span>odom<span class="tag">&lt;/<span class="name">odometry_topic</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">odometry_frame</span>&gt;</span>odom<span class="tag">&lt;/<span class="name">odometry_frame</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">robot_base_frame</span>&gt;</span>base_footprint<span class="tag">&lt;/<span class="name">robot_base_frame</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> 直接使用<strong>gazebo</strong>标签和<strong>plugin</strong>标签定义插件。<p></p>
<h5 id="create-a-world-in-gazebo">Create a World in Gazebo</h5>
<p>在Gazebo中编辑后保存即可。编辑既可以在<strong>insert</strong>页面插入物体，也可以在<strong>edit</strong>--&gt;<strong>Building Edit</strong>中插入建筑物。最后保存为一个后缀为<strong>world</strong>的文件。</p>
<h5 id="launch-the-robot-in-the-world">Launch the Robot in the World</h5>
<figure class="highlight abnf"><table><tbody><tr><td class="code"><pre><span class="line">&lt;include file<span class="operator">=</span><span class="string">"$(find-pkg-share gazebo_ros)/launch/gazebo.launch.py"</span>&gt;</span><br><span class="line">    &lt;arg name<span class="operator">=</span><span class="string">"world"</span> value<span class="operator">=</span><span class="string">"$(find-pkg-share my_robot_description)/world/my_world.world"</span>/&gt;</span><br><span class="line">&lt;/include&gt;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="add-a-camera-in-urdf">Add a Camera in URDF</h4>
<h3 id="control-robot-in-gazebo">Control Robot in Gazebo</h3>
<p>使用<strong>ros2_control</strong>库控制硬件设备，具体逻辑见下图。 <img alt="ROS2 controller &amp; hardware" data-src="/2023/12/24/ROS2-Learning-Notes-RViz-Gazebo/controller-manager-hardware.png"> 控制器的控制逻辑如下所示。 <img alt="控制器逻辑图" data-src="/2023/12/24/ROS2-Learning-Notes-RViz-Gazebo/ros2-controller.png"> 控制一般分为3种： * position * velocity * effort #### URDF <strong>urdf</strong>包括三部分，第一部分是机器人自身相关的<strong>robot.urdf.xacro</strong>，开始是<strong>xml</strong>文件的版本号，一般是<strong>1.0</strong>版本。 </p><figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">"http://www.ros.org/wiki/xacro"</span> <span class="attr">name</span>=<span class="string">"robot"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">"$(find robot_description)/urdf/robot_gazebo.xacro"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">"$(find robot_description)/urdf/robot_ros2_control.xacro"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">"effort"</span> <span class="attr">value</span>=<span class="string">"30.0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">"velocity"</span> <span class="attr">value</span>=<span class="string">"10.0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">"default_inertial"</span> <span class="attr">params</span>=<span class="string">"mass"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">{mass}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">"1.0"</span> <span class="attr">ixy</span>=<span class="string">"0.0"</span> <span class="attr">ixz</span>=<span class="string">"0.0"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                     <span class="attr">iyy</span>=<span class="string">"1.0"</span> <span class="attr">iyz</span>=<span class="string">"0.0"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                     <span class="attr">izz</span>=<span class="string">"1.0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">"default_transmission"</span> <span class="attr">params</span>=<span class="string">"number"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">"transmission_$</span></span></span><span class="template-variable">{number}</span><span class="language-xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">"motor_$</span></span></span><span class="template-variable">{number}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">role</span>=<span class="string">"actuator1"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"joint_$</span></span></span><span class="template-variable">{number}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">role</span>=<span class="string">"joint1"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mechanical_reduction</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">mechanical_reduction</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"world"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/basement.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.5 -0.5 0"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/basement.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.5 -0.5 0"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">xacro:default_inertial</span> <span class="attr">mass</span>=<span class="string">"1.0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"virtual_joint"</span> <span class="attr">type</span>=<span class="string">"fixed"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"world"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_plate"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/base_plate.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span> <span class="attr">xyz</span>=<span class="string">"-0.39 -0.39 -0.56"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/base_plate.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span> <span class="attr">xyz</span>=<span class="string">"-0.39 -0.39 -0.56"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">xacro:default_inertial</span> <span class="attr">mass</span>=<span class="string">"1.0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"joint_1"</span> <span class="attr">type</span>=<span class="string">"revolute"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"base_plate"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">"0 0 1"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span> <span class="attr">xyz</span>=<span class="string">"0 0 0.307"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">limit</span> <span class="attr">lower</span>=<span class="string">"-$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">upper</span>=<span class="string">"$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">effort</span>=<span class="string">"$</span></span></span><span class="template-variable">{effort}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">velocity</span>=<span class="string">"$</span></span></span><span class="template-variable">{velocity}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"forward_drive_arm"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/forward_drive_arm.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 -$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string"> $</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">xyz</span>=<span class="string">"0.19 0.06 -0.08"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/forward_drive_arm.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 -$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string"> $</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">xyz</span>=<span class="string">"0.19 0.06 -0.08"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">xacro:default_inertial</span> <span class="attr">mass</span>=<span class="string">"1.0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"joint_2"</span> <span class="attr">type</span>=<span class="string">"revolute"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"base_plate"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"forward_drive_arm"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">"1 0 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span> <span class="attr">xyz</span>=<span class="string">"-0.02 0 0.35"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">limit</span> <span class="attr">lower</span>=<span class="string">"-$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">upper</span>=<span class="string">"$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">effort</span>=<span class="string">"$</span></span></span><span class="template-variable">{effort}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">velocity</span>=<span class="string">"$</span></span></span><span class="template-variable">{velocity}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"horizontal_arm"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/horizontal_arm.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string"> 0 $</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">xyz</span>=<span class="string">"-0.03 -0.4 -0.06"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/horizontal_arm.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string"> 0 $</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">xyz</span>=<span class="string">"-0.03 -0.4 -0.06"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">xacro:default_inertial</span> <span class="attr">mass</span>=<span class="string">"1.0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"joint_3"</span> <span class="attr">type</span>=<span class="string">"revolute"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"forward_drive_arm"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"horizontal_arm"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">"1 0 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span> <span class="attr">xyz</span>=<span class="string">"0 0 0.8"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">limit</span> <span class="attr">lower</span>=<span class="string">"-$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">upper</span>=<span class="string">"$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">effort</span>=<span class="string">"$</span></span></span><span class="template-variable">{effort}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">velocity</span>=<span class="string">"$</span></span></span><span class="template-variable">{velocity}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"claw_support"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/claw_support.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 $</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">xyz</span>=<span class="string">"0 -0.05 -0.15"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">collsion</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/claw_support.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 $</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">xyz</span>=<span class="string">"0 -0.05 -0.15"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">collsion</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">xacro:default_inertial</span> <span class="attr">mass</span>=<span class="string">"0.05"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"horizontal_arm_to_claw_support"</span> <span class="attr">type</span>=<span class="string">"fixed"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"horizontal_arm"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"claw_support"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span> <span class="attr">xyz</span>=<span class="string">"0 0.82 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"gripper_right"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/right_finger.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.1 0.5 -0.1"</span> <span class="attr">rpy</span>=<span class="string">"0 0 -$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/right_finger.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.1 0.5 -0.1"</span> <span class="attr">rpy</span>=<span class="string">"0 0 -$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">xacro:default_inertial</span> <span class="attr">mass</span>=<span class="string">"0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"gripper_left"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/left_finger.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.04 0.5 -0.1"</span> <span class="attr">rpy</span>=<span class="string">"0 0 -$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/left_finger.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.04 0.5 -0.1"</span> <span class="attr">rpy</span>=<span class="string">"0 0 -$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">xacro:default_inertial</span> <span class="attr">mass</span>=<span class="string">"0.01"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"joint_4"</span> <span class="attr">type</span>=<span class="string">"revolute"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"claw_support"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"gripper_right"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.04 0.13 -0.1"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">"0 0 1"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">limit</span> <span class="attr">lower</span>=<span class="string">"-$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">upper</span>=<span class="string">"0"</span> <span class="attr">effort</span>=<span class="string">"$</span></span></span><span class="template-variable">{effort}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">velocity</span>=<span class="string">"$</span></span></span><span class="template-variable">{velocity}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"joint_5"</span> <span class="attr">type</span>=<span class="string">"revolute"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"claw_support"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"gripper_left"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.22 0.13 -0.1"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">"0 0 1"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">mimic</span> <span class="attr">joint</span>=<span class="string">"joint_4"</span> <span class="attr">multiplier</span>=<span class="string">"-1"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">limit</span> <span class="attr">lower</span>=<span class="string">"0"</span> <span class="attr">upper</span>=<span class="string">"$</span></span></span><span class="template-variable">{pi/2}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">effort</span>=<span class="string">"$</span></span></span><span class="template-variable">{effort}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">velocity</span>=<span class="string">"$</span></span></span><span class="template-variable">{velocity}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">xacro:default_transmission</span> <span class="attr">number</span>=<span class="string">"1"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">xacro:default_transmission</span> <span class="attr">number</span>=<span class="string">"2"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">xacro:default_transmission</span> <span class="attr">number</span>=<span class="string">"3"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">xacro:default_transmission</span> <span class="attr">number</span>=<span class="string">"4"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure> 具体参照<a href="robot.urdf.xacro">robot.urdf.xacro</a>，<a href="robot_gazebo.xacro">robot_gazebo.xacro</a>和<a href="robot_ros2_control.xacro">robot_ros2_control.xacro</a>。 #### Controller 然后单独创建一个<strong>robot_controller</strong>包，在包中分别创建<strong>config</strong>和<strong>launch</strong>文件夹。 <figure class="highlight lua"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">-- rcl</span></span><br><span class="line">ros2 pkg <span class="built_in">create</span> robot_controller <span class="comment">--build-type ament_cmake</span></span><br><span class="line">rm -rf include src</span><br><span class="line">mkdir <span class="built_in">config</span></span><br><span class="line">mkdir launch</span><br><span class="line"><span class="comment">-- CMakeLists.txt</span></span><br><span class="line">install(</span><br><span class="line">  DIRECTORY <span class="built_in">config</span> launch</span><br><span class="line">  DESTINATION share/${PROJECT_NAME}</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure> #### Yaml Configuration <strong>Yaml</strong>可读性很强，可以用于配置参数，具体可以参照<a href=""></a><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>RViz</tag>
        <tag>Gazebo</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS2 Learning Notes Navigation 2 Stack</title>
    <url>/2023/12/29/ROS2-Learning-Notes-Navigation-2-Stack/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要为ROS2导航功能模块的学习笔记。 <span id="more"></span> ### Navigation2 Stack * 安装工具包 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-navigation2</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-nav2-bringup</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-turtlebot3</span><br></pre></td></tr></tbody></table></figure> * 修复依赖问题 <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> http://archive.ubuntu.com/ubuntu/pool/universe/l/lua5.<span class="number">2</span>/liblua5.<span class="number">2</span>-<span class="number">0</span>_5.<span class="number">2</span>.<span class="number">4</span>-<span class="number">2</span>_amd64.deb</span><br><span class="line"><span class="attribute">sudo</span> dpkg -i liblua5.<span class="number">2</span>-<span class="number">0</span>_5.<span class="number">2</span>.<span class="number">4</span>-<span class="number">2</span>_amd64.deb</span><br></pre></td></tr></tbody></table></figure> ### Generate a map with SLAM #### Make a Robot Move in the World * 配置环境变量 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo vi ~/.zshrc</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">TURTLEBOT3_MODEL</span>=waffle</span><br></pre></td></tr></tbody></table></figure> * 启动gazebo环境 <figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">launch</span> turtlebot3_gazebo turtlebot3_world.<span class="built_in">launch</span>.py</span><br></pre></td></tr></tbody></table></figure> * 启动键盘控制 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">run</span> turtlebot3_teleop teleop_keyboard</span><br></pre></td></tr></tbody></table></figure> #### Create and Save a Map with SLAM 首先启动gazebo仿真环境，生成机器人。 然后启动<strong>cartographer</strong>。 <figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">launch</span> turtlebot3_cartographer cartographer.<span class="built_in">launch</span>.py use_sim_time:=True</span><br></pre></td></tr></tbody></table></figure> 启动键盘控制机器人在环境中移动就可以建图。 最后保存地图。 <figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="keyword">run</span><span class="language-bash"> nav2_map_server map_saver_cli -f maps/my_map</span></span><br></pre></td></tr></tbody></table></figure> 地图保存后可以使用<strong>gimp</strong>编辑保存。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install gimp</span><br><span class="line">gimp</span><br></pre></td></tr></tbody></table></figure> ### Navigation in Map #### Fix Some Errors <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-rmw-cyclonedds-cpp</span><br><span class="line">sudo vi ~/.zshrc</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">RMW_IMPLEMENTATION</span>=rmw_cyclonedds_cpp</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">cd <span class="regexp">/opt/</span>ros<span class="regexp">/humble/</span>share<span class="regexp">/turtlebot3_navigation2/</span>param</span><br><span class="line">sudo vi waffle.yaml</span><br><span class="line"><span class="comment"># robot_model_type: "differential"</span></span><br><span class="line">robot_model_type: <span class="string">"nav2_amcl::DifferentialMotionModel"</span></span><br></pre></td></tr></tbody></table></figure> #### Navigation 首先运行机器人的仿真环境，然后开启<strong>navigation</strong>节点 <figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">launch</span> turtlebot3_gazebo turtlebot3_world.<span class="built_in">launch</span>.py</span><br><span class="line">cd</span><br><span class="line">ros2 <span class="built_in">launch</span> turtlebot3_navigation2 navigation2.<span class="built_in">launch</span>.py use_sim_time:=True map:=maps/my_map.yaml</span><br></pre></td></tr></tbody></table></figure> 需要提供地图的配置文件，成功载入后使用<strong>2D Pose Estimation</strong>工具初始化机器人的位置。<p></p>
<h4 id="use-experiences">Use Experiences</h4>
<p>在<strong>rqt</strong>的插件里面可以配置参数。</p>
<p>Nav2架构</p>
<p>输入：TF, Map, Sensor Data 目标： global planner --&gt; local planner(controller) --&gt; hardware controller</p>
<p>Behavior Tree--&gt;决策树 #### Odometry 根据底盘的运动信息定位机器人。 随着时间和距离有累积误差，但是短时间内定位很稳定。 map frame -&gt; odom frame -&gt; base_link。 根据轮子的编码器计算，根据速度计算位置。也可以使用<strong>diff_drive_controller</strong>实现。 还可以使用<strong>robot_localization</strong>包自己实现更复杂的算法, 发布<strong>filtered topic</strong>。 Topic名称为：<strong>odom</strong>，数据类型为<strong>nav_msgs/Odometry.msg</strong>。</p>
<h4 id="sensor-data">Sensor Data</h4>
<ul>
<li>wheel encoder</li>
<li>lidar 发布<strong>sensor_msgs/msg/LaserScan</strong>消息，名字为<strong>scan</strong>。</li>
<li>camera 发布<strong>sensor_msgs/msg/Image</strong>消息，名字为<strong>camera/image_raw</strong>。</li>
</ul>
<h4 id="hardware-controller">Hardware Controller</h4>
<p>发布的消息类型为<strong>geometry_msgs/Twist</strong>。 既可以自己实现电机驱动器，在这样的情况下，需要自己实现<strong>Odometry</strong>。 也可以使用ros2自带的<strong>diff_drive_controller</strong>。</p>
<h4 id="slam_toolbox">slam_toolbox</h4>
<p>除了使用<strong>cartographer</strong>建图，我们还可以使用<strong>slam_toolbox</strong>建图。步骤如下所示： </p><figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">ros2 <span class="built_in">launch</span> turtlebot3_gazebo turtlebot3_world.<span class="built_in">launch</span>.py</span><br><span class="line">ros2 <span class="built_in">launch</span> nav2_bringup navigation_launch.py use_sim_time:=True</span><br><span class="line">ros2 <span class="built_in">launch</span> slam_toolbox online_async_launch.py use_sim_time:=True</span><br><span class="line">ros2 <span class="built_in">run</span> rviz2 rviz2</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="tf_transformations">tf_transformations</h4>
<ul>
<li>安装 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-tf-transformations</span><br><span class="line">sudo apt-<span class="built_in">get</span> install python3-transforms3d</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h4 id="通过程序发送初始位置">通过程序发送初始位置</h4>
<p>使用<strong>nav2</strong>提供的命令接口实现。 </p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="attribute">import</span> rclpy</span><br><span class="line"><span class="attribute">from</span> nav2_simple_commander.robot_navigator import BasicNavigator</span><br><span class="line"><span class="attribute">from</span> geometry_msgs.msg import PoseStamped</span><br><span class="line"><span class="attribute">import</span> tf_transformations</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">def</span> main():</span><br><span class="line">    <span class="comment"># init</span></span><br><span class="line">    <span class="attribute">rclpy</span>.init()</span><br><span class="line">    <span class="attribute">nav</span> = BasicNavigator()</span><br><span class="line">    <span class="comment"># set initial pose</span></span><br><span class="line">    <span class="attribute">q_x</span>, q_y, q_z, q_w = tf_transformations.quaternion_from_euler(<span class="number">0</span>.<span class="number">0</span>, <span class="number">0</span>.<span class="number">0</span>, <span class="number">0</span>.<span class="number">0</span>)</span><br><span class="line">    <span class="attribute">initial_pose</span> = PoseStamped()</span><br><span class="line">    <span class="attribute">initial_pose</span>.header.frame_id = 'map'</span><br><span class="line">    <span class="attribute">initial_pose</span>.header.stamp = nav.get_clock().now().to_msg()</span><br><span class="line">    <span class="attribute">initial_pose</span>.pose.position.x = <span class="number">0</span>.<span class="number">0</span></span><br><span class="line">    <span class="attribute">initial_pose</span>.pose.position.y = <span class="number">0</span>.<span class="number">0</span></span><br><span class="line">    <span class="attribute">initial_pose</span>.pose.position.z = <span class="number">0</span>.<span class="number">0</span></span><br><span class="line">    <span class="attribute">initial_pose</span>.pose.orientation.x = q_x</span><br><span class="line">    <span class="attribute">initial_pose</span>.pose.orientation.y = q_y</span><br><span class="line">    <span class="attribute">initial_pose</span>.pose.orientation.z = q_z</span><br><span class="line">    <span class="attribute">initial_pose</span>.pose.orientation.w = q_w</span><br><span class="line"></span><br><span class="line">    <span class="attribute">nav</span>.setInitialPose(initial_pose=initial_pose)</span><br><span class="line">    <span class="attribute">nav</span>.waitUntilNav2Active()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># shutdown</span></span><br><span class="line">    <span class="attribute">rclpy</span>.shutdown()</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="通过程序发送目标位置">通过程序发送目标位置</h4>
<figure class="highlight gams"><table><tbody><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">import rclpy</span><br><span class="line">from nav2_simple_commander.robot_navigator import BasicNavigator</span><br><span class="line">from geometry_msgs.msg import PoseStamped</span><br><span class="line">import tf_transformations</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # init</span><br><span class="line">    rclpy.init()</span><br><span class="line">    nav = BasicNavigator()</span><br><span class="line">    # <span class="keyword">set</span> initial <span class="comment">pose</span></span><br><span class="line">    q_x, q_y, q_z, q_w <span class="comment">= tf_transformations.quaternion_from_euler(0.0, 0.0, 0.0)</span></span><br><span class="line">    initial_pose <span class="comment">= PoseStamped()</span></span><br><span class="line">    initial_pose.header.frame_id <span class="comment">=</span> <span class="comment">'map'</span></span><br><span class="line">    initial_pose.header.stamp <span class="comment">= nav.get_clock().now().to_msg()</span></span><br><span class="line">    initial_pose.pose.position.x <span class="comment">= 0.0</span></span><br><span class="line">    initial_pose.pose.position.y <span class="comment">= 0.0</span></span><br><span class="line">    initial_pose.pose.position.z <span class="comment">= 0.0</span></span><br><span class="line">    initial_pose.pose.orientation.x <span class="comment">= q_x</span></span><br><span class="line">    initial_pose.pose.orientation.y <span class="comment">= q_y</span></span><br><span class="line">    initial_pose.pose.orientation.z <span class="comment">= q_z</span></span><br><span class="line">    initial_pose.pose.orientation.w <span class="comment">= q_w</span></span><br><span class="line"></span><br><span class="line">    nav.setInitialPose(initial_pose=initial_pose)</span><br><span class="line">    nav.waitUntilNav2Active()</span><br><span class="line"></span><br><span class="line">    # <span class="keyword">set</span> <span class="comment">goal pose</span></span><br><span class="line">    q_x, q_y, q_z, q_w <span class="comment">= tf_transformations.quaternion_from_euler(0.0, 0.0, 1.57)</span></span><br><span class="line">    goal_pose <span class="comment">= PoseStamped()</span></span><br><span class="line">    goal_pose.header.frame_id <span class="comment">=</span> <span class="comment">'map'</span></span><br><span class="line">    goal_pose.header.stamp <span class="comment">= nav.get_clock().now().to_msg()</span></span><br><span class="line">    goal_pose.pose.position.x <span class="comment">= 3.5</span></span><br><span class="line">    goal_pose.pose.position.y <span class="comment">= 1.0</span></span><br><span class="line">    goal_pose.pose.position.z <span class="comment">= 0.0</span></span><br><span class="line">    goal_pose.pose.orientation.x <span class="comment">= q_x</span></span><br><span class="line">    goal_pose.pose.orientation.y <span class="comment">= q_y</span></span><br><span class="line">    goal_pose.pose.orientation.z <span class="comment">= q_z</span></span><br><span class="line">    goal_pose.pose.orientation.w <span class="comment">= q_w</span></span><br><span class="line">    nav.goToPose(goal_pose)</span><br><span class="line"></span><br><span class="line">    while <span class="comment">not nav.isTaskComplete():</span></span><br><span class="line">        feedback <span class="comment">= nav.getFeedback()</span></span><br><span class="line">        # print(feedback)</span><br><span class="line">    </span><br><span class="line">    # shutdown</span><br><span class="line">    rclpy.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if <span class="comment">__name__ ==</span> <span class="comment">'__main__'</span><span class="comment">:</span></span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>
<h4 id="waypoints发送一系列点">Waypoints发送一系列点</h4>
<p><embed src="nav2_test.py"> #### 继续学习 * ros2_control * robotic arm (moveit 2) * advanced ros2 core concepts</p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Navigation</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS2 Learning Notes Advanced Concepts</title>
    <url>/2024/01/14/ROS2-Learning-Notes-Advanced-Concepts/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要记录<strong>ROS2</strong>的高级概念，包括<strong>ROS2</strong>的核心概念，例如<strong>Action</strong>, <strong>Lifecycle Nodes</strong>, <strong>Executors</strong>和<strong>Components</strong>。 <span id="more"></span> ## 环境 </p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">Ubuntu</span> <span class="number">22</span>.<span class="number">04</span></span><br><span class="line"><span class="attribute">ROS2</span> Humble</span><br></pre></td></tr></tbody></table></figure> ## Actions <strong>Actions</strong>服务于执行时间较长的人物，同样以<strong>client/server</strong>的模式运行，执行过程中可以取消，也可以发送反馈信息。 通常是由三个<strong>Services</strong>和两个<strong>Topic</strong>组成。 * Services * Send Goal * Cancel Goal Request * Request Result * Topics * Feedback * Goal status <strong>Actions</strong>可以有多个<strong>Clients</strong>，同一个<strong>Client</strong>也可发送多个<strong>Goal</strong>。 ### 定义Action #### Server <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> result</span><br><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br><span class="line"><span class="keyword">from</span> rclpy.action <span class="keyword">import</span> ActionServer</span><br><span class="line"><span class="keyword">from</span> rclpy.action.server <span class="keyword">import</span> ServerGoalHandle</span><br><span class="line"><span class="keyword">from</span> my_robot_interfaces.action <span class="keyword">import</span> CountUntil</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountUntilServerNode</span>(<span class="title class_ inherited__">Node</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">"count_until_server"</span>)</span><br><span class="line">        self.count_until_server_ = ActionServer(self, CountUntil, <span class="string">"count_until"</span>, execute_callback=self.execute_callback)</span><br><span class="line">        self.get_logger().info(<span class="string">"Action server has been started."</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute_callback</span>(<span class="params">self, goal_handle: ServerGoalHandle</span>):</span><br><span class="line">        <span class="comment"># Get request from goal</span></span><br><span class="line">        target_number = goal_handle.request.target_number</span><br><span class="line">        period = goal_handle.request.period</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Execute the action</span></span><br><span class="line">        self.get_logger().info(<span class="string">"Executing the goal"</span>)</span><br><span class="line">        counter = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(target_number):</span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">            self.get_logger().info(<span class="string">"counter = "</span> + <span class="built_in">str</span>(counter))</span><br><span class="line">            time.sleep(period)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Once done, set goal final state</span></span><br><span class="line">        goal_handle.succeed()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># and send the result</span></span><br><span class="line">        result = CountUntil.Result()</span><br><span class="line">        result.reached_number = counter</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):</span><br><span class="line">    rclpy.init(args=args)</span><br><span class="line">    node = CountUntilServerNode()</span><br><span class="line">    rclpy.spin(node)</span><br><span class="line">    rclpy.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure> 使用<strong>ActionServer</strong>创建server, 指定类型、名称和回调函数。类型定义了Action数据传输的数据类型，名称为唯一的辨识符，回调函数则定义了server收到goal之后的处理逻辑。 回调函数的处理逻辑包含三部分，1. 处理goal中的request参数，2. 执行action， 3. 返回执行结果。 #### Client <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> cgitb <span class="keyword">import</span> reset</span><br><span class="line"><span class="keyword">import</span> rclpy</span><br><span class="line"><span class="keyword">from</span> rclpy.node <span class="keyword">import</span> Node</span><br><span class="line"><span class="keyword">from</span> rclpy.action <span class="keyword">import</span> ActionClient</span><br><span class="line"><span class="keyword">from</span> rclpy.action.server <span class="keyword">import</span> ServerGoalHandle</span><br><span class="line"><span class="keyword">from</span> rclpy.action.client <span class="keyword">import</span> ClientGoalHandle</span><br><span class="line"><span class="keyword">from</span> my_robot_interfaces.action <span class="keyword">import</span> CountUntil</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountUntilClientNode</span>(<span class="title class_ inherited__">Node</span>): <span class="comment"># MODIFY NAME</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">"count_until_client"</span>) <span class="comment"># MODIFY NAME</span></span><br><span class="line">        self.count_until_client_ = ActionClient(self, CountUntil, <span class="string">"count_until"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_goal</span>(<span class="params">self, target_number, period</span>):</span><br><span class="line">        <span class="comment"># Wait for the server</span></span><br><span class="line">        self.count_until_client_.wait_for_server()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create a goal</span></span><br><span class="line">        goal = CountUntil.Goal()</span><br><span class="line">        goal.target_number = target_number</span><br><span class="line">        goal.period = period</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Send the goal</span></span><br><span class="line">        self.get_logger().info(<span class="string">"Sending goal"</span>)</span><br><span class="line">        future = self.count_until_client_.send_goal_async(goal=goal)</span><br><span class="line">        future.add_done_callback(self.goal_response_callback)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">goal_response_callback</span>(<span class="params">self, future</span>):</span><br><span class="line">        self.goal_handle_: ClientGoalHandle = future.result()</span><br><span class="line">        <span class="keyword">if</span> self.goal_handle_.accepted:</span><br><span class="line">                self.goal_handle_.get_result_async().add_done_callback(self.goal_result_callback)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">goal_result_callback</span>(<span class="params">self, future</span>):</span><br><span class="line">         result = future.result().result</span><br><span class="line">         self.get_logger().info(<span class="string">"Result: "</span> + <span class="built_in">str</span>(result.reached_number))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args=<span class="literal">None</span></span>):</span><br><span class="line">    rclpy.init(args=args)</span><br><span class="line">    node = CountUntilClientNode()</span><br><span class="line">    node.send_goal(<span class="number">6</span>, <span class="number">1.0</span>)</span><br><span class="line">    rclpy.spin(node)</span><br><span class="line">    rclpy.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure> 使用<strong>ActionClient</strong>定义client, 主要包括类型，名称。发送goal的步骤是等待server就位，然后创建goal，赋值request参数，然后异步发送goal。异步发送接口会返回future对象，用来表明是未来才能执行完的。可是通过<strong>add_done_callback</strong>添加回调函数。回调函数有两层，第一层是server接收到goal之后accept/reject结果回调，第二层是accept之后，action执行结果的回调。<p></p>
<h4 id="acceptreject">Accept/Reject</h4>
<figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">self.count_until_server_ = <span class="constructor">ActionServer(<span class="params">self</span>, CountUntil, <span class="string">"count_until"</span>, <span class="params">goal_callback</span>=<span class="params">self</span>.<span class="params">goal_callback</span>, <span class="params">execute_callback</span>=<span class="params">self</span>.<span class="params">execute_callback</span>)</span></span><br><span class="line">def goal<span class="constructor">_callback(<span class="params">self</span>, <span class="params">goal_request</span>: CountUntil.Goal)</span>:</span><br><span class="line">    self.get<span class="constructor">_logger()</span>.info(<span class="string">"Received a goal"</span>)</span><br><span class="line">    # Validate the goal request</span><br><span class="line">    <span class="keyword">if</span> goal_request.target_number &lt;= <span class="number">0</span>:</span><br><span class="line">        self.get<span class="constructor">_logger()</span>.info(<span class="string">"Rejecting the goal"</span>)</span><br><span class="line">        return GoalResponse.REJECT</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.get<span class="constructor">_logger()</span>.info(<span class="string">"Accepting the goal"</span>)</span><br><span class="line">        return GoalResponse.ACCEPT</span><br></pre></td></tr></tbody></table></figure>
<p>在定义server的时候，添加<strong>goal_callback</strong>来根据request参数处理accept和reject参数的情况。</p>
<h4 id="goal-state-machine">Goal State Machine</h4>
<p>状态机是针对goal的，而不是针对client和server的。 ##### Goal * Accepted * Executing * Succeed * Aborted * Cancelled * Succeed * Aborted * Cancelled * Rejected</p>
<h4 id="set-goal-result">Set Goal Result</h4>
<ul>
<li>Server <figure class="highlight nix"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Once done, set goal final state</span></span><br><span class="line"><span class="comment"># goal_handle.succeed()</span></span><br><span class="line">goal_handle.<span class="built_in">abort</span>()</span><br></pre></td></tr></tbody></table></figure></li>
<li>Client <figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line">def <span class="built_in">goal_result_callback</span>(self, future):</span><br><span class="line">    status = future.<span class="built_in">result</span>().status</span><br><span class="line">    result = future.<span class="built_in">result</span>().result</span><br><span class="line">    if status == GoalStatus.STATUS_SUCCEEDED:</span><br><span class="line">        self.<span class="built_in">get_logger</span>().<span class="built_in">info</span>(<span class="string">"Goal succeeded."</span>)</span><br><span class="line">    elif status == GoalStatus.STATUS_ABORTED:</span><br><span class="line">        self.<span class="built_in">get_logger</span>().<span class="built_in">info</span>(<span class="string">"Goal aborted."</span>)</span><br><span class="line">    self.<span class="built_in">get_logger</span>().<span class="built_in">info</span>(<span class="string">"Result: "</span> + <span class="built_in">str</span>(result.reached_number))</span><br></pre></td></tr></tbody></table></figure> #### Send Goal Feedback</li>
<li>Server <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">execute_callback</span>(<span class="params">self, goal_handle: ServerGoalHandle</span>):</span><br><span class="line">    <span class="comment"># Get request from goal</span></span><br><span class="line">    target_number = goal_handle.request.target_number</span><br><span class="line">    period = goal_handle.request.period</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Execute the action</span></span><br><span class="line">    self.get_logger().info(<span class="string">"Executing the goal"</span>)</span><br><span class="line">    feedback = CountUntil.Feedback()</span><br><span class="line">    counter = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(target_number):</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        self.get_logger().info(<span class="string">"counter = "</span> + <span class="built_in">str</span>(counter))</span><br><span class="line">        feedback.current_number = counter</span><br><span class="line">        goal_handle.publish_feedback(feedback=feedback)</span><br><span class="line">        time.sleep(period)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Once done, set goal final state</span></span><br><span class="line">    <span class="comment"># goal_handle.succeed()</span></span><br><span class="line">    goal_handle.abort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># and send the result</span></span><br><span class="line">    result = CountUntil.Result()</span><br><span class="line">    result.reached_number = counter</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></tbody></table></figure></li>
<li>Client <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">future = self.count_until_client_.send<span class="constructor">_goal_async(<span class="params">goal</span>=<span class="params">goal</span>, <span class="params">feedback_callback</span>=<span class="params">self</span>.<span class="params">goal_feedback_callback</span>)</span></span><br><span class="line">def goal<span class="constructor">_feedback_callback(<span class="params">self</span>, <span class="params">feedback_msg</span>)</span>:</span><br><span class="line">    number = feedback_msg.feedback.current_number</span><br><span class="line">    self.get<span class="constructor">_logger()</span>.info(<span class="string">"Got feedback: "</span> + str(number))</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h4 id="cancel-goal">Cancel Goal</h4>
<ul>
<li>Server <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">self.count_until_server_ = <span class="constructor">ActionServer(<span class="params">self</span>, CountUntil, <span class="string">"count_until"</span>, <span class="params">goal_callback</span>=<span class="params">self</span>.<span class="params">goal_callback</span>, <span class="params">cancel_callback</span>=<span class="params">self</span>.<span class="params">cancel_callback</span>, <span class="params">execute_callback</span>=<span class="params">self</span>.<span class="params">execute_callback</span>, <span class="params">callback_group</span>=ReentrantCallbackGroup()</span>)</span><br><span class="line"></span><br><span class="line">def cancel<span class="constructor">_callback(<span class="params">self</span>, <span class="params">goal_handle</span>: ServerGoalHandle)</span>:</span><br><span class="line">    self.get<span class="constructor">_logger()</span>.info(<span class="string">"Received a cancel request."</span>)</span><br><span class="line">    return CancelResponse.ACCEPT # <span class="keyword">or</span> REJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(target_number):</span><br><span class="line"><span class="keyword">if</span> goal_handle.is_cancel_requested:</span><br><span class="line">    self.get<span class="constructor">_logger()</span>.info(<span class="string">"Canceling the goal"</span>)</span><br><span class="line">    goal_handle.canceled<span class="literal">()</span></span><br><span class="line">    result.reached_number = counter</span><br><span class="line">    return result</span><br></pre></td></tr></tbody></table></figure></li>
<li>Client <figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.timer_ = <span class="variable language_">self</span>.create_timer(<span class="number">2.0</span>, <span class="variable language_">self</span>.cancel_goal)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cancel_goal</span>(<span class="params"><span class="variable language_">self</span></span>):</span><br><span class="line">    <span class="variable language_">self</span>.get_logger().info(<span class="string">"Send a cancel request"</span>)</span><br><span class="line">    <span class="variable language_">self</span>.goal_handle_.cancel_goal_async()</span><br><span class="line">    <span class="variable language_">self</span>.timer_.cancel()</span><br></pre></td></tr></tbody></table></figure></li>
<li>多线程</li>
</ul>
<h2 id="lifecycle-nodes">Lifecycle Nodes</h2>
<p>四种种状态： unconfigured, inactive, active, finalized 五种转换： on_configure, on_activate, on_deactivate, on_cleanup，on_shutdown 存在的意义： * 适用于硬件通信 * 重新配置更容易 * 按照顺序初始化 * 提前分配资源和内存 * 多节点之前同步初始化</p>
<p><strong>Lifecycle Node</strong>在<strong>nav2</strong>和<strong>ros2_control</strong>中经常使用。 ### 实现Lifecycle Node #### on_configure 起到初始化的作用 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on_configure</span>(<span class="params">self, previous_state: LifecycleState</span>):</span><br><span class="line">    self.get_logger().info(<span class="string">"In on_configure."</span>)</span><br><span class="line">    self.number_publisher_ = self.create_publisher(Int64, <span class="string">"number"</span>, <span class="number">10</span>)</span><br><span class="line">    self.number_timer_ = self.create_timer(</span><br><span class="line">        <span class="number">1.0</span> / self.publish_frequency_, self.publish_number)</span><br><span class="line">    self.get_logger().info(<span class="string">"Number publisher has been started."</span>)</span><br><span class="line">    <span class="keyword">return</span> TransitionCallbackReturn.SUCCESS</span><br></pre></td></tr></tbody></table></figure> #### on_cleanup 节点结束后，释放资源 <figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Destroy ROS2 communications , disconnect from HW</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_cleanup</span>(<span class="params"><span class="variable language_">self</span>, <span class="symbol">previous_state:</span> <span class="title class_">LifecycleState</span></span>):</span><br><span class="line">    <span class="variable language_">self</span>.get_logger().info(<span class="string">"In on_cleanup."</span>)</span><br><span class="line">    <span class="variable language_">self</span>.destroy_lifecycle_publisher(<span class="variable language_">self</span>.number_publisher_)</span><br><span class="line">    <span class="variable language_">self</span>.destroy_timer(<span class="variable language_">self</span>.number_timer_)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">TransitionCallbackReturn</span>.<span class="variable constant_">SUCCESS</span></span><br></pre></td></tr></tbody></table></figure> #### on_activate <figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Activate/Enable HW</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_activate</span>(<span class="params"><span class="variable language_">self</span>, <span class="symbol">previous_state:</span> <span class="title class_">LifecycleState</span></span>):</span><br><span class="line">    <span class="variable language_">self</span>.get_logger().info(<span class="string">"In on_activate."</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>().on_activate(previous_state)</span><br></pre></td></tr></tbody></table></figure> #### on_deactivate <figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Deactivate/Disable HW</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_deactivate</span>(<span class="params"><span class="variable language_">self</span>, <span class="symbol">previous_state:</span> <span class="title class_">LifecycleState</span></span>):</span><br><span class="line">    <span class="variable language_">self</span>.get_logger().info(<span class="string">"In on_deactivate."</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>().on_deactivate(previous_state)</span><br></pre></td></tr></tbody></table></figure> #### on_shutdown <figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">def on<span class="constructor">_shutdown(<span class="params">self</span>, <span class="params">previous_state</span>: LifecycleState)</span>:</span><br><span class="line">    self.get<span class="constructor">_logger()</span>.info(<span class="string">"In on_shutdown."</span>)</span><br><span class="line">    self.destroy<span class="constructor">_lifecycle_publisher(<span class="params">self</span>.<span class="params">number_publisher_</span>)</span></span><br><span class="line">    self.destroy<span class="constructor">_timer(<span class="params">self</span>.<span class="params">number_timer_</span>)</span></span><br><span class="line">    return TransitionCallbackReturn.SUCCESS</span><br></pre></td></tr></tbody></table></figure> #### on_error <figure class="highlight ruby"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Process errors, deactivate + cleanup</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_error</span>(<span class="params"><span class="variable language_">self</span>, <span class="symbol">previous_state:</span> <span class="title class_">LifecycleState</span></span>):</span><br><span class="line">    <span class="variable language_">self</span>.get_logger().info(<span class="string">"In on_error."</span>)</span><br><span class="line">    <span class="variable language_">self</span>.destroy_lifecycle_publisher(<span class="variable language_">self</span>.number_publisher_)</span><br><span class="line">    <span class="variable language_">self</span>.destroy_timer(<span class="variable language_">self</span>.number_timer_)</span><br><span class="line">    <span class="comment"># do some checks, if ok then return SUCCESS, if not FAILURE</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">TransitionCallbackReturn</span>.<span class="variable constant_">FAILURE</span></span><br></pre></td></tr></tbody></table></figure> ### 使用Lifecycle Node 我们可是使用命令行控制<strong>Lifecycle Node</strong>的状态切换。 <figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">ros2 lifecycle nodes <span class="comment">--查看所有lifecycle nodes</span></span><br><span class="line">ros2 lifecycle <span class="built_in">list</span> /number_publisher <span class="comment">--查看指定lifecycle node可以接受的命令</span></span><br><span class="line">ros2 lifecycle <span class="keyword">set</span> /number_publisher configure/<span class="built_in">activate</span>/deactivate/cleanup/shutdown <span class="comment">--设置指定lifecycle node的状态</span></span><br><span class="line">ros2 lifecycle <span class="keyword">get</span> /number_publisher <span class="comment">--查看指定lifecycle的状态</span></span><br></pre></td></tr></tbody></table></figure> <strong>Lifecycle Node</strong>的接口都是<strong>service</strong>，所以可以使用<strong>service client</strong>访问。<p></p>
<h2 id="executors">Executors</h2>
<p><strong>Executors</strong>用于阻塞程序，等待程序的执行,分为<strong>SingleThreadExecutor</strong>和<strong>MultiThreadExecutor</strong>。 <strong>rclpy.spin()</strong>默认调用的是<strong>SingleThreadExecutor</strong>。 <strong>MultiThreadExecutor</strong>需要提供<strong>callback_groups</strong>。 * ReentrantCallbackGroup 真正的多线程，可以重新进入，无需等待callback执行完成 * MutuallyExclusiveCallbackGroup 单线程，需要等待callback执行完成才能再进入</p>
<h2 id="components">Components</h2>
<p>在一个可执行文件中，可以启动多个节点，</p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Advanced Concepts</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS2 Learning Notes URDF &amp; Xacro</title>
    <url>/2024/01/21/ROS2-Learning-Notes-URDF-Xacro/</url>
    <content><![CDATA[<html><head></head><body><p><strong>URDF</strong>是“<strong>Unified Robot Description Format</strong>”的缩写，在<strong>ROS</strong>中用于定义机器人，格式为<strong>xml</strong>。<a href="http://wiki.ros.org/xacro">xacro</a>是"<strong>XML Macros</strong>"的缩写，可以扩展<strong>xml</strong>语言，通过定义变量、函数，引入文件的形式提升代码的可读性。本文主要讲解<strong>urdf</strong>和<strong>xacro</strong>的基本用法。 <span id="more"></span> ## URDF ### URDF的基本结构 </p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">xmlns:xacro</span>=<span class="string">"http://www.ros.org/wiki/xacro"</span> <span class="attr">name</span>=<span class="string">"arduinobot"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"world"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/basement.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.5 -0.5 0"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/basement.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.5 -0.5 0"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xacro:default_inertial</span> <span class="attr">mass</span>=<span class="string">"1.0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"virtual_joint"</span> <span class="attr">type</span>=<span class="string">"fixed"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">"world"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">"base_link"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> 开头的第一句声明<strong>xml</strong>文件的版本和编码格式。 最顶层的标签是<strong>robot</strong>，需要指明两个属性，一个是<strong>name</strong>，另外一个是<strong>xmlns:xacro</strong>。使用<strong>xacro</strong>，我们可以很方便地定义变量、函数，引入文件，提升xml文件的可读性和可扩展性。 里面的内容包含<strong>link</strong>，<strong>joint</strong>等模块，为机器人的具体定义。 ### Link <strong>Link</strong>定义基本的刚体结构，主要包括三部分内容： <strong>visual</strong>,<strong>collision</strong>和<strong>inertial</strong>三部分。 <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">"base_link"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collision</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collision</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> #### visual <strong>visual</strong>标签主要用于定义刚体的几何形状，用于在<strong>rviz2</strong>中可视化。几何形状可以是简单的几何体，例如<strong>box</strong>, <strong>sphere</strong>和<strong>cylinder</strong>，也可以是负责的几何形状，通过<strong>mesh</strong>标签，引入<strong>STL</strong>文件。 ##### box <figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">box</span> <span class="attr">size</span>=<span class="string">"$</span></span></span><span class="template-variable">{arm_base_length}</span><span class="language-xml"><span class="tag"><span class="string"> $</span></span></span><span class="template-variable">{arm_base_width}</span><span class="language-xml"><span class="tag"><span class="string"> $</span></span></span><span class="template-variable">{arm_base_height}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 $</span></span></span><span class="template-variable">{arm_base_height/2.0}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"orange"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure> ##### cylinder <figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">"$</span></span></span><span class="template-variable">{forearm_radius}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">length</span>=<span class="string">"$</span></span></span><span class="template-variable">{forearm_length}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 $</span></span></span><span class="template-variable">{forearm_length/2.0}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"yellow"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure> ##### sphere <figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">"$</span></span></span><span class="template-variable">{wheel_radius/2.0}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"0 0 0"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">"blue"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure> ##### mesh <figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mesh</span> <span class="attr">filename</span>=<span class="string">"package://robot_description/meshes/basement.STL"</span> <span class="attr">scale</span>=<span class="string">"0.01 0.01 0.01"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">"-0.5 -0.5 0"</span> <span class="attr">rpy</span>=<span class="string">"0 0 0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure> 可视化部分除了定义几何形状，还需要指明坐标系。默认的坐标系为几何中心，通过<strong>origin</strong>标签去定义坐标系与默认坐标系的关系，<strong>xyz</strong>指明两个坐标系之间的平移关系，<strong>rpy</strong>指明两个坐标系之间的旋转关系。 #### collision <strong>collision</strong>标签主要用于定义碰撞检测的范围，在<strong>gazebo</strong>仿真中使用。其定义内容一般与<strong>visual</strong>部分相同，也可以使用简单的几何体代替复杂形状，以提升碰撞检测的性能。 #### inertial <strong>inertial</strong>标签主要用于定义刚体的转动惯量，在<strong>gazebo</strong>仿真中用于运动建模。几何体的转动惯量由其质量分布和几何形状共同决定，计算复杂。对于质量分布均匀的简单几何体，其转动惯量有具体的公式表达。一般使用<strong>xacro:macro</strong>定义函数实现，具体可以参见后面章节。<p></p>
<h3 id="joint">Joint</h3>
<p>关节主要定义两个<strong>link</strong>之间的坐标系相对位置关系和相对运动关系。 </p><figure class="highlight abnf"><table><tbody><tr><td class="code"><pre><span class="line">&lt;joint name<span class="operator">=</span><span class="string">"joint_4"</span> type<span class="operator">=</span><span class="string">"revolute"</span>&gt;</span><br><span class="line">    &lt;parent link<span class="operator">=</span><span class="string">"claw_support"</span>/&gt;</span><br><span class="line">    &lt;child link<span class="operator">=</span><span class="string">"gripper_right"</span>/&gt;</span><br><span class="line">    &lt;origin xyz<span class="operator">=</span><span class="string">"-0.04 0.13 -0.1"</span> rpy<span class="operator">=</span><span class="string">"0 0 0"</span>/&gt;</span><br><span class="line">    &lt;axis xyz<span class="operator">=</span><span class="string">"0 0 1"</span>/&gt;</span><br><span class="line">    &lt;limit lower<span class="operator">=</span><span class="string">"-${pi/2}"</span> upper<span class="operator">=</span><span class="string">"0"</span> effort<span class="operator">=</span><span class="string">"${effort}"</span> velocity<span class="operator">=</span><span class="string">"${velocity}"</span>/&gt;</span><br><span class="line">&lt;/joint&gt;</span><br></pre></td></tr></tbody></table></figure> 其中<strong>parent</strong>和<strong>child</strong>分别指明了两个<strong>link</strong>，子link要在父link中运动。<strong>type</strong>指明了运动关系，包括固定式的<strong>fixed</strong>，关节旋转式的<strong>revolute</strong>等等。 #### fixed<p></p>
<h4 id="revolute">revolute</h4>
<h2 id="xacro">Xacro</h2>
<h3 id="定义变量">定义变量</h3>
<figure class="highlight dust"><table><tbody><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">"effort"</span> <span class="attr">value</span>=<span class="string">"30.0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">"velocity"</span> <span class="attr">value</span>=<span class="string">"10.0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">"default_inertial"</span> <span class="attr">params</span>=<span class="string">"mass"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">{mass}</span><span class="language-xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">"1.0"</span> <span class="attr">ixy</span>=<span class="string">"0.0"</span> <span class="attr">ixz</span>=<span class="string">"0.0"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">iyy</span>=<span class="string">"1.0"</span> <span class="attr">iyz</span>=<span class="string">"0.0"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">izz</span>=<span class="string">"1.0"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">"default_transmission"</span> <span class="attr">params</span>=<span class="string">"number"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">"transmission_$</span></span></span><span class="template-variable">{number}</span><span class="language-xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">"motor_$</span></span></span><span class="template-variable">{number}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">role</span>=<span class="string">"actuator1"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">"joint_$</span></span></span><span class="template-variable">{number}</span><span class="language-xml"><span class="tag"><span class="string">"</span> <span class="attr">role</span>=<span class="string">"joint1"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">mechanical_reduction</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">mechanical_reduction</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="定义函数">定义函数</h3>
<figure class="highlight clean"><table><tbody><tr><td class="code"><pre><span class="line">```</span><br><span class="line">### 引入文件</span><br></pre></td></tr></tbody></table></figure>
<p><xacro:include filename="$(find robot_description)/urdf/robot_gazebo.xacro"> <xacro:include filename="$(find robot_description)/urdf/robot_ros2_control.xacro"> ``` <link name="base_plate"> <visual> <geometry> <mesh filename="package://robot_description/meshes/base_plate.STL" scale="0.01 0.01 0.01"> </mesh></geometry> <origin rpy="0 0 0" xyz="-0.39 -0.39 -0.56"> </origin></visual> <collision> <geometry> <mesh filename="package://robot_description/meshes/base_plate.STL" scale="0.01 0.01 0.01"> </mesh></geometry> <origin rpy="0 0 0" xyz="-0.39 -0.39 -0.56"> </origin></collision> <xacro:default_inertial mass="1.0">  <joint name="joint_1" type="revolute"> <parent link="base_link"> <child link="base_plate"> <axis xyz="0 0 1"> <origin rpy="0 0 0" xyz="0 0 0.307"> <limit lower="-${pi/2}" upper="${pi/2}" effort="${effort}" velocity="${velocity}"> </limit></origin></axis></child></parent></joint></xacro:default_inertial></xacro:include></xacro:include></p>
<pre><code>&lt;link name="forward_drive_arm"&gt;
    &lt;visual&gt;
        &lt;geometry&gt;
            &lt;mesh filename="package://robot_description/meshes/forward_drive_arm.STL" scale="0.01 0.01 0.01"/&gt;
        &lt;/geometry&gt;
        &lt;origin rpy="0 -${pi/2} ${pi/2}" xyz="0.19 0.06 -0.08"/&gt;
    &lt;/visual&gt;
    &lt;collision&gt;
        &lt;geometry&gt;
            &lt;mesh filename="package://robot_description/meshes/forward_drive_arm.STL" scale="0.01 0.01 0.01"/&gt;
        &lt;/geometry&gt;
        &lt;origin rpy="0 -${pi/2} ${pi/2}" xyz="0.19 0.06 -0.08"/&gt;
    &lt;/collision&gt;
    &lt;xacro:default_inertial mass="1.0"/&gt;
&lt;/link&gt;

&lt;joint name="joint_2" type="revolute"&gt;
    &lt;parent link="base_plate"/&gt;
    &lt;child link="forward_drive_arm"/&gt;
    &lt;axis xyz="1 0 0"/&gt;
    &lt;origin rpy="0 0 0" xyz="-0.02 0 0.35"/&gt;
    &lt;limit lower="-${pi/2}" upper="${pi/2}" effort="${effort}" velocity="${velocity}"/&gt;
&lt;/joint&gt;

&lt;link name="horizontal_arm"&gt;
    &lt;visual&gt;
        &lt;geometry&gt;
            &lt;mesh filename="package://robot_description/meshes/horizontal_arm.STL" scale="0.01 0.01 0.01"/&gt;
        &lt;/geometry&gt;
        &lt;origin rpy="${pi/2} 0 ${pi/2}" xyz="-0.03 -0.4 -0.06"/&gt;
    &lt;/visual&gt;
    &lt;collision&gt;
        &lt;geometry&gt;
            &lt;mesh filename="package://robot_description/meshes/horizontal_arm.STL" scale="0.01 0.01 0.01"/&gt;
        &lt;/geometry&gt;
        &lt;origin rpy="${pi/2} 0 ${pi/2}" xyz="-0.03 -0.4 -0.06"/&gt;

    &lt;/collision&gt;
    &lt;xacro:default_inertial mass="1.0"/&gt;
&lt;/link&gt;
&lt;joint name="joint_3" type="revolute"&gt;
    &lt;parent link="forward_drive_arm"/&gt;
    &lt;child link="horizontal_arm"/&gt;
    &lt;axis xyz="1 0 0"/&gt;
    &lt;origin rpy="0 0 0" xyz="0 0 0.8"/&gt;
    &lt;limit lower="-${pi/2}" upper="${pi/2}" effort="${effort}" velocity="${velocity}"/&gt;
&lt;/joint&gt;

&lt;link name="claw_support"&gt;
    &lt;visual&gt;
        &lt;geometry&gt;
            &lt;mesh filename="package://robot_description/meshes/claw_support.STL" scale="0.01 0.01 0.01"/&gt;
        &lt;/geometry&gt;
        &lt;origin rpy="0 0 ${pi/2}" xyz="0 -0.05 -0.15"/&gt;
    &lt;/visual&gt;
    &lt;collsion&gt;
        &lt;geometry&gt;
            &lt;mesh filename="package://robot_description/meshes/claw_support.STL" scale="0.01 0.01 0.01"/&gt;
        &lt;/geometry&gt;
        &lt;origin rpy="0 0 ${pi/2}" xyz="0 -0.05 -0.15"/&gt;
    &lt;/collsion&gt;
    &lt;xacro:default_inertial mass="0.05"/&gt;
&lt;/link&gt;
&lt;joint name="horizontal_arm_to_claw_support" type="fixed"&gt;
    &lt;parent link="horizontal_arm"/&gt;
    &lt;child link="claw_support"/&gt;
    &lt;origin rpy="0 0 0" xyz="0 0.82 0"/&gt;
&lt;/joint&gt;

&lt;link name="gripper_right"&gt;
    &lt;visual&gt;
        &lt;geometry&gt;
            &lt;mesh filename="package://robot_description/meshes/right_finger.STL" scale="0.01 0.01 0.01"/&gt;
        &lt;/geometry&gt;
        &lt;origin xyz="-0.1 0.5 -0.1" rpy="0 0 -${pi/2}"/&gt;
    &lt;/visual&gt;
    &lt;collision&gt;
        &lt;geometry&gt;
            &lt;mesh filename="package://robot_description/meshes/right_finger.STL" scale="0.01 0.01 0.01"/&gt;
        &lt;/geometry&gt;
        &lt;origin xyz="-0.1 0.5 -0.1" rpy="0 0 -${pi/2}"/&gt;
    &lt;/collision&gt;
    &lt;xacro:default_inertial mass="0.01"/&gt;
&lt;/link&gt;
&lt;link name="gripper_left"&gt;
    &lt;visual&gt;
        &lt;geometry&gt;
            &lt;mesh filename="package://robot_description/meshes/left_finger.STL" scale="0.01 0.01 0.01"/&gt;
        &lt;/geometry&gt;
        &lt;origin xyz="-0.04 0.5 -0.1" rpy="0 0 -${pi/2}"/&gt;
    &lt;/visual&gt;
    &lt;collision&gt;
        &lt;geometry&gt;
            &lt;mesh filename="package://robot_description/meshes/left_finger.STL" scale="0.01 0.01 0.01"/&gt;
        &lt;/geometry&gt;
        &lt;origin xyz="-0.04 0.5 -0.1" rpy="0 0 -${pi/2}"/&gt;
    &lt;/collision&gt;
    &lt;xacro:default_inertial mass="0.01"/&gt;
&lt;/link&gt;
&lt;joint name="joint_5" type="revolute"&gt;
    &lt;parent link="claw_support"/&gt;
    &lt;child link="gripper_left"/&gt;
    &lt;origin xyz="-0.22 0.13 -0.1" rpy="0 0 0"/&gt;
    &lt;axis xyz="0 0 1"/&gt;
    &lt;mimic joint="joint_4" multiplier="-1"/&gt;
    &lt;limit lower="0" upper="${pi/2}" effort="${effort}" velocity="${velocity}"/&gt;
&lt;/joint&gt;
&lt;xacro:default_transmission number="1"/&gt;
&lt;xacro:default_transmission number="2"/&gt;
&lt;xacro:default_transmission number="3"/&gt;
&lt;xacro:default_transmission number="4"/&gt;</code></pre>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>URDF</tag>
        <tag>Xacro</tag>
      </tags>
  </entry>
  <entry>
    <title>Config Frp Client And Auto-Start As A Service</title>
    <url>/2024/02/02/Config-Frp-Client-And-Auto-Start-As-A-Service/</url>
    <content><![CDATA[<html><head></head><body><p><strong>Frp</strong>是一个搭建隧道实现内网穿透的常用工具，在之前的<a href="https://youngsonzhao.github.io/2023/02/15/Expose-Local-Devices-Behind-A-NAT-To-The-Internet-Using-FRP/">笔记</a>中我们已经讲了如何在服务器配置<strong>frps</strong>和在路由器配置<strong>frpc</strong>。今天主要记录一下如何在<strong>Ubuntu 22.04</strong>系统上配置<strong>frpc</strong>，实现<strong>ssh</strong>远程登陆访问。 <span id="more"></span> ### Download <a href="https://github.com/fatedier/frp">Frp</a>代码托管在github上，我们可以到<a href="https://github.com/fatedier/frp/releases">release</a>下载对应操作系统版本的最新包。 </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/fatedier/</span>frp<span class="regexp">/releases/</span>download<span class="regexp">/v0.54.0/</span>frp_0.<span class="number">54.0</span>_linux_amd64.tar.gz</span><br></pre></td></tr></tbody></table></figure> ### Install 下载好的包是已经编译好的可执行文件，我们只需要将其放置在指定文件夹下即可. <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">mkdir</span> .frp</span><br><span class="line"><span class="attribute">cd</span> .frp</span><br><span class="line"><span class="attribute">tar</span> -xzf frp_0.<span class="number">54</span>.<span class="number">0</span>_linux_amd64.tar.gz</span><br><span class="line"><span class="attribute">cd</span> frp_0.<span class="number">54</span>.<span class="number">0</span>_linux_amd64</span><br></pre></td></tr></tbody></table></figure> ### Config 配置客户端需要创建一个<strong>frpc.ini</strong>的配置文件，在配置中首先配置<strong>frps</strong>的ip地址，端口号和token，然后配置本地的端口号和服务端的转发端口即可。 <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">192.168</span>.<span class="number">1.1</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for authentication</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">2222</span></span><br></pre></td></tr></tbody></table></figure> 由于需要ssh登陆，所以本地端口为22，服务端端口为2222。 ### Service 将<strong>frpc</strong>设置为服务的形式，可以保证开启自启动。 首先进入到目录内。 <figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/systemd/system</span><br><span class="line">sudo <span class="built_in">touch</span> frpc.service</span><br><span class="line">sudo gedit frpc.service</span><br></pre></td></tr></tbody></table></figure> 然后配置服务。 <figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=My Frp Client Service - %i</span><br><span class="line"><span class="attr">After</span>=network.target syslog.target</span><br><span class="line"><span class="attr">Wants</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">5</span>s</span><br><span class="line"><span class="attr">ExecStart</span>=/bin/bash -c <span class="string">'/home/robot/.frp/frp_0.54.0_linux_amd64/frpc -c /home/robot/.frp/frp_0.54.0_linux_amd64/frpc.ini'</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></tbody></table></figure> 最后运行服务。 <figure class="highlight nsis"><table><tbody><tr><td class="code"><pre><span class="line">sudo <span class="params">system</span>ctl enable frpc.service</span><br><span class="line">sudo <span class="params">system</span>ctl start frpc.service</span><br><span class="line">sudo <span class="params">system</span>ctl status frpc.service</span><br></pre></td></tr></tbody></table></figure> ### SSH Ubuntu 22.04默认ssh连接是关闭的，需要打开端口，开启ssh连接。 首先明确指明ssh连接的端口为22。 <figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">sudo vi <span class="regexp">/etc/</span>ssh/ssh_config</span><br><span class="line">port <span class="number">22</span></span><br></pre></td></tr></tbody></table></figure> 然后开启22端口。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install openssh-server</span><br><span class="line">ufw <span class="built_in">enable</span></span><br><span class="line">sudo ufw <span class="built_in">enable</span></span><br><span class="line">sudo ufw allow 22/tcp</span><br></pre></td></tr></tbody></table></figure> 上述配置完成后，在任意终端，通过ssh指令登陆即可。 <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span> robot@<span class="number">192.168.1.2</span> -p <span class="number">2222</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Ubuntu</category>
        <category>Frp</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>SSH</tag>
        <tag>Frp</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS2 Learning Notes - Moveit</title>
    <url>/2024/02/03/ROS2-Learning-Notes-Moveit/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://moveit.ros.org/">MoveIt</a>是机器人运动规划与控制的重要开源包，本文主要讲解<strong>MoveIt</strong>的使用步骤和经验。 <span id="more"></span> ### Installation </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-joint-trajectory-controller</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-forward-command-controller</span><br><span class="line">sudo apt-<span class="built_in">get</span> install ros-humble-joint-state-broadcaster</span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>Tutorials</tag>
        <tag>ROS</tag>
        <tag>Moveit</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Python Virtual Environment</title>
    <url>/2024/02/21/Using-Python-Virtual-Environment/</url>
    <content><![CDATA[<html><head></head><body><p>在Python中使用虚拟环境可以将包安装在独立的环境中，既不会污染主环境，也不会相互影响。因此在跑测试环境的时候，推荐使用虚拟环境。本文主要介绍虚拟环境的使用方法。 <span id="more"></span> ### 安装 使用以下指令安装虚拟环境： </p><figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> virtualenv</span><br><span class="line">sudo apt-get <span class="keyword">install</span> python3.<span class="number">10</span>-venv</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="使用">使用</h3>
<h4 id="初始化环境">初始化环境</h4>
<p>安装成功后，使用以下指令可以创建一个虚拟环境。 </p><figure class="highlight jboss-cli"><table><tbody><tr><td class="code"><pre><span class="line">python -m venv <span class="string">.venv</span></span><br></pre></td></tr></tbody></table></figure> 所创建的虚拟环境目录为：<strong>.venv</strong> #### 激活环境 创建环境后，可以使用以下指令激活环境，让Python在虚拟环境中运行。 <figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> ~<span class="regexp">/.venv/</span>bin/active</span><br></pre></td></tr></tbody></table></figure> 激活后，我们可以在虚拟环境中正常运行python代码以及使用pip安装包。 #### 失活环境 <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">deactive</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Tutorials</tag>
        <tag>Python</tag>
        <tag>Venv</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Python Virtual Environment In Jupyter Notebook</title>
    <url>/2024/06/27/Using-Python-Virtual-Environment-In-Jupyter-Notebook/</url>
    <content><![CDATA[<html><head></head><body><p>介绍如何在<strong>Jupyter Notebook</strong>中使用Python的虚拟环境。 <span id="more"></span> ### 安装 </p><figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">pip install --<span class="keyword">user</span> <span class="title">ipykernel</span> -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></tbody></table></figure> ### 添加虚拟环境 创建python虚拟环境请参照<a href="https://youngsonzhao.github.io/2024/02/21/Using-Python-Virtual-Environment/">Using Python Virtual Environment</a> 创建好虚拟环境后，可以使用一下命令在Jupyter中注册虚拟环境。 <figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">python -m ipykernel install --<span class="keyword">user</span> <span class="title">--name</span>=.sam</span><br></pre></td></tr></tbody></table></figure> ### 在Jupyter Notebook中使用虚拟环境 在<strong>Jupyter Notebook</strong>页面的左下角按钮，可以切换kernel，如下图所示： <img alt="切换kernel" data-src="/2024/06/27/Using-Python-Virtual-Environment-In-Jupyter-Notebook/ipykernel.png"><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Python</category>
        <category>Jupyter Notebook</category>
      </categories>
      <tags>
        <tag>Tutorials</tag>
        <tag>Python</tag>
        <tag>Jupyter Notebook</tag>
        <tag>Venv</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Baidu Yun Python Client In Ubuntu Server</title>
    <url>/2024/06/28/Using-Baidu-Yun-Python-Client-In-Ubuntu-Server/</url>
    <content><![CDATA[<html><head></head><body><p>百度云盘为Ubuntu Server提供了一个Python客户端<strong>pyby</strong>，可以在服务器上上传和下载百度云盘里面的文件。 <span id="more"></span> ### 安装 </p><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">pip install requests bypy -i https:<span class="regexp">//</span>pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></tbody></table></figure> ### 授权 运行以下指令会生成一个用于授权的链接，复制链接在浏览器中打开并登陆，则会生成授权码，按照提示复制到terminal中即可。 <figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> -m bypy <span class="literal">info</span></span><br></pre></td></tr></tbody></table></figure> ### 使用 百度云盘会为<strong>bypy</strong>客户端单独生成一个文件夹，使用相关指令可以查看文件夹的信息、上传文件、下载文件等。 #### 查看百度云盘的空间 <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">bypy</span> info</span><br><span class="line"><span class="attribute">Quota</span>: <span class="number">5</span>.<span class="number">005</span>TB</span><br><span class="line"><span class="attribute">Used</span>: <span class="number">2</span>.<span class="number">416</span>GB</span><br></pre></td></tr></tbody></table></figure> #### 查看百度云盘的列表 <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">bypy list</span></span><br></pre></td></tr></tbody></table></figure> #### 上传文件 <figure class="highlight applescript"><table><tbody><tr><td class="code"><pre><span class="line">bypy -v upload <span class="built_in">file</span>.path /remote_dir</span><br></pre></td></tr></tbody></table></figure> #### 其他指令 <figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$</span> bypy downdir k8s <span class="comment">#直接下载bypy目录下k8s</span></span><br><span class="line"><span class="variable">$</span> bypy syncup <span class="comment">#把当前目录同步到云盘</span></span><br><span class="line"><span class="variable">$</span> bypy syncdown <span class="comment">#把云盘内容同步到当前目录</span></span><br><span class="line"><span class="variable">$</span> bypy downdir / <span class="comment">#把云盘内容同步到当前目录</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$</span> bypy <span class="built_in">compare</span> <span class="comment">#比较本地当前目录和云盘（程序的）根目录</span></span><br><span class="line"><span class="variable">$</span> bypy <span class="literal">-v</span> <span class="comment">#运行时添加-v参数，会显示进度详情。</span></span><br><span class="line"><span class="variable">$</span> bypy <span class="literal">-d</span> <span class="comment">#运行时添加-d，会显示一些调试信息</span></span><br><span class="line"><span class="variable">$</span> bypy <span class="literal">-ddd</span> <span class="comment">#显示更多http通讯信息</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Tutorials</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Ngnix To Deploy A File Share Service</title>
    <url>/2024/06/28/Using-Ngnix-To-Deploy-A-File-Share-Service/</url>
    <content><![CDATA[<html><head></head><body><p>使用Nginx，可以在服务器上搭建一个文件分享服务，通过网络可以下载指定文件夹下的文件。 <span id="more"></span> ### 安装 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install nginx</span><br></pre></td></tr></tbody></table></figure> ### 配置服务 安装后nginx会自动运行，监听80端口，我们需要修改默认配置，指定端口和root目录，并开启autoindex。 <figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-enabled/</span><span class="keyword">default</span></span><br></pre></td></tr></tbody></table></figure> <figure class="highlight nginx"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">server</span> {</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">30001</span> default_server;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">30001</span> default_server;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># SSL configuration</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># listen 443 ssl default_server;</span></span><br><span class="line">        <span class="comment"># listen [::]:443 ssl default_server;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Note: You should disable gzip for SSL traffic.</span></span><br><span class="line">        <span class="comment"># See: https://bugs.debian.org/773332</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Read up on ssl_ciphers to ensure a secure configuration.</span></span><br><span class="line">        <span class="comment"># See: https://bugs.debian.org/765782</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Self signed certs generated by the ssl-cert package</span></span><br><span class="line">        <span class="comment"># Don't use them in a production server!</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># include snippets/snakeoil.conf;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> /apprun/datasets/;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_name</span> _;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / {</span><br><span class="line">                <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">                <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">                <span class="comment"># try_files $uri $uri/ =404;</span></span><br><span class="line">                <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass PHP scripts to FastCGI server</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ {</span></span><br><span class="line">        <span class="comment">#       include snippets/fastcgi-php.conf;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#       # With php-fpm (or other unix sockets):</span></span><br><span class="line">        <span class="comment">#       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;</span></span><br><span class="line">        <span class="comment">#       # With php-cgi (or other tcp sockets):</span></span><br><span class="line">        <span class="comment">#       fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#}</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht {</span></span><br><span class="line">        <span class="comment">#       deny all;</span></span><br><span class="line">        <span class="comment">#}</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure> ### 重启服务 <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">sudo nginx -t</span></span><br><span class="line"><span class="attribute">sudo nginx -s reload</span></span><br></pre></td></tr></tbody></table></figure><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Ubuntu</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Tutorials</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Training A Model Using Pytorch</title>
    <url>/2024/07/01/Training-A-Model-Using-Pytorch/</url>
    <content><![CDATA[<html><head></head><body><p><strong>Pytorch</strong>是目前主流的深度学习框架，本文主要介绍使用<strong>Pytorch</strong>训练模型的主要流程，包括超参数定义、训练数据准备、配置GPU、加载模型、加在模型参数、训练日志打印、模型参数保存等步骤。 <span id="more"></span> ## 主流程 训练模型的主流程一般定义一个<strong>main</strong>函数作为函数执行的入口函数，具体如下所示： </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># train.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="定义训练模型的超参数">定义训练模型的超参数</h3>
<p>通过<strong>argparser</strong>定义模型训练的超参数，具体如下所示： </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"><span class="comment"># Required parameters</span></span><br><span class="line">parser.add_argument(<span class="string">"--name"</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Name of this run. Used for monitoring."</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--dataset"</span>, choices=[<span class="string">"cifar10"</span>, <span class="string">"cifar100"</span>], default=<span class="string">"cifar10"</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Which downstream task."</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--model_type"</span>, choices=[<span class="string">"ViT-B_16"</span>, <span class="string">"ViT-B_32"</span>, <span class="string">"ViT-L_16"</span>,</span><br><span class="line">                                                <span class="string">"ViT-L_32"</span>, <span class="string">"ViT-H_14"</span>, <span class="string">"R50-ViT-B_16"</span>],</span><br><span class="line">                    default=<span class="string">"ViT-B_16"</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Which variant to use."</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--pretrained_dir"</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">"checkpoint/ViT-B_16.npz"</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Where to search for pretrained ViT models."</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--output_dir"</span>, default=<span class="string">"output"</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"The output directory where checkpoints will be written."</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">"--img_size"</span>, default=<span class="number">224</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Resolution size"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--train_batch_size"</span>, default=<span class="number">512</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Total batch size for training."</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--eval_batch_size"</span>, default=<span class="number">64</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Total batch size for eval."</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--eval_every"</span>, default=<span class="number">100</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Run prediction on validation set every so many steps."</span></span><br><span class="line">                            <span class="string">"Will always run one evaluation at the end of training."</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">"--learning_rate"</span>, default=<span class="number">3e-2</span>, <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"The initial learning rate for SGD."</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--weight_decay"</span>, default=<span class="number">0</span>, <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Weight deay if we apply some."</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--num_steps"</span>, default=<span class="number">10000</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Total number of training epochs to perform."</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--decay_type"</span>, choices=[<span class="string">"cosine"</span>, <span class="string">"linear"</span>], default=<span class="string">"cosine"</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"How to decay the learning rate."</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--warmup_steps"</span>, default=<span class="number">500</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Step of training to perform learning rate warmup for."</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--max_grad_norm"</span>, default=<span class="number">1.0</span>, <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Max gradient norm."</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">"--local_rank"</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=-<span class="number">1</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"local_rank for distributed training on gpus"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--seed'</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">42</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"random seed for initialization"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--gradient_accumulation_steps'</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Number of updates steps to accumulate before performing a backward/update pass."</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--fp16'</span>, action=<span class="string">'store_true'</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Whether to use 16-bit float precision instead of 32-bit"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--fp16_opt_level'</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">'O2'</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3']."</span></span><br><span class="line">                            <span class="string">"See details at https://nvidia.github.io/apex/amp.html"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--loss_scale'</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=<span class="number">0</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">"Loss scaling to improve fp16 numeric stability. Only used when fp16 set to True.\n"</span></span><br><span class="line">                            <span class="string">"0 (default value): dynamic loss scaling.\n"</span></span><br><span class="line">                            <span class="string">"Positive power of 2: static loss scaling value.\n"</span>)</span><br><span class="line">args = parser.parse_args()</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="配置训练模型的gpu显卡">配置训练模型的GPU显卡</h3>
<p>支持多卡和单卡训练，配置方法略有差异。</p>
<h4 id="单卡训练">单卡训练</h4>
<p>单卡训练，默认的local_rank=-1 </p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">device = torch<span class="selector-class">.device</span>(<span class="string">"cuda"</span> <span class="keyword">if</span> torch<span class="selector-class">.cuda</span><span class="selector-class">.is_available</span>() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line">args<span class="selector-class">.n_gpu</span> = torch<span class="selector-class">.cuda</span><span class="selector-class">.device_count</span>()</span><br><span class="line">args<span class="selector-class">.device</span> = device</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="多卡训练">多卡训练</h4>
<p>多卡训练的实现方式有多种，推荐使用<strong>分布式数据并行（Distributed Data Parallel）</strong>方式，既可以用于单机多卡训练，又可以用于多机多卡训练。由多进程实现，可以从以下方面理解： 1. 从一开始就会启动多个进程(进程数等于GPU数)，每个进程独享一个GPU，每个进程都会独立地执行代码。这意味着每个进程都独立地初始化模型、训练，当然，在每次迭代过程中会通过进程间通信共享梯度，整合梯度，然后独立地更新参数。</p>
<ol start="2" type="1">
<li><p>每个进程都会初始化一份训练数据集，当然它们会使用数据集中的不同记录做训练，这相当于同样的模型喂进去不同的数据做训练，也就是所谓的数据并行。这是通过torch.utils.data.distributed.DistributedSampler函数实现的，不过逻辑上也不难想到，只要做一下数据partition，不同进程拿到不同的partition就可以了。</p></li>
<li><p>进程通过local_rank变量来标识自己，local_rank为0的为master，其他是slave。local_rank表示的是当前的进程在当前节点的编号，因为我们设置了2个进程，因此进程的编号就是0和1。在使用启动命令时，torch.distributed.launch工具会默认地根据nproc_per_node传入local_rank参数。</p></li>
</ol>
<ul>
<li><p><a href="https://blog.csdn.net/Mr_health/article/details/122822483">pytorch多GPU训练的两种模式</a></p></li>
<li><p><a href="https://github.com/jia-zhuang/pytorch-multi-gpu-training">pytorch-multi-gpu-training</a></p></li>
<li><p>通过<strong>argparser</strong>定义local_rank参数 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">pars<span class="number">*e</span>r.add_argument(<span class="string">"--local_rank"</span>, <span class="attribute">type</span>=int, <span class="attribute">default</span>=-1,</span><br><span class="line">                    <span class="attribute">help</span>=<span class="string">"local_rank for distributed training on gpus"</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>命令行注入local_rank参数 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">python -m torch.distributed.launch <span class="attribute">--nproc_per_node</span>=4 <span class="attribute">--nnodes</span>=1 train.py</span><br></pre></td></tr></tbody></table></figure> 上述命令表示启动一个训练节点，每个节点4张GPU卡。<strong>torch.distributed.launch</strong>就以命令行参数的方式将args.local_rank变量注入到每个进程中，每个进程得到的变量值都不相同。比如使用 4 个GPU的话，则 4 个进程获得的args.local_rank值分别为0、1、2、3。<p></p></li>
<li><p>调用GPU显卡 </p><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">torch.cuda.set<span class="constructor">_device(<span class="params">args</span>.<span class="params">local_rank</span>)</span></span><br><span class="line">device = torch.device(<span class="string">"cuda"</span>, args.local_rank)</span><br><span class="line">torch.distributed.init<span class="constructor">_process_group(<span class="params">backend</span>='<span class="params">nccl</span>', <span class="params">timeout</span>=<span class="params">timedelta</span>(<span class="params">minutes</span>=60)</span>)</span><br><span class="line">args.n_gpu = <span class="number">1</span></span><br><span class="line">args.device = device</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ul>
<h3 id="设置随机数种子">设置随机数种子</h3>
<p>随机数影响了模型初始化，进而影响模型的训练效果，为了保证多次训练的结果一致性，通常将随机数种子设置为固定值。 </p><figure class="highlight maxima"><table><tbody><tr><td class="code"><pre><span class="line">def set_seed(<span class="built_in">args</span>):</span><br><span class="line">    <span class="built_in">random</span>.seed(<span class="built_in">args</span>.seed)</span><br><span class="line">    <span class="built_in">np</span>.<span class="built_in">random</span>.seed(<span class="built_in">args</span>.seed)</span><br><span class="line">    torch.manual_seed(<span class="built_in">args</span>.seed)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">args</span>.n_gpu &gt; <span class="number">0</span>:</span><br><span class="line">        torch.cuda.manual_seed_all(<span class="built_in">args</span>.seed)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="配置模型">配置模型</h3>
<p>同一个模型结构，一般会预留一些超参数，用于生成模型参数量的模型。</p>
<h4 id="配置模型参数">配置模型参数</h4>
<p>推荐使用<strong>ml_collections</strong>实现模型参数配置，具体如下所示： </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ml_collections</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_model_config</span>():</span><br><span class="line">    <span class="string">"""Returns a minimal configuration for testing."""</span></span><br><span class="line">    config = ml_collections.ConfigDict()</span><br><span class="line">    config.patches = ml_collections.ConfigDict({<span class="string">'size'</span>: (<span class="number">16</span>, <span class="number">16</span>)})</span><br><span class="line">    config.hidden_size = <span class="number">1</span></span><br><span class="line">    config.transformer = ml_collections.ConfigDict()</span><br><span class="line">    config.transformer.mlp_dim = <span class="number">1</span></span><br><span class="line">    config.transformer.num_heads = <span class="number">1</span></span><br><span class="line">    config.transformer.num_layers = <span class="number">1</span></span><br><span class="line">    config.transformer.attention_dropout_rate = <span class="number">0.0</span></span><br><span class="line">    config.transformer.dropout_rate = <span class="number">0.1</span></span><br><span class="line">    config.classifier = <span class="string">'token'</span></span><br><span class="line">    config.representation_size = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>上述代码可以生成如下所示的配置。 </p><figure class="highlight nestedtext"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">classifier</span><span class="punctuation">:</span> <span class="string">token</span></span><br><span class="line"><span class="attribute">hidden_size</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line"><span class="attribute">patches</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">size</span><span class="punctuation">:</span> <span class="string">!!python/tuple</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">16</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">16</span></span><br><span class="line"><span class="attribute">representation_size</span><span class="punctuation">:</span> <span class="string">null</span></span><br><span class="line"><span class="attribute">transformer</span><span class="punctuation">:</span></span><br><span class="line">  <span class="attribute">attention_dropout_rate</span><span class="punctuation">:</span> <span class="string">0.0</span></span><br><span class="line">  <span class="attribute">dropout_rate</span><span class="punctuation">:</span> <span class="string">0.1</span></span><br><span class="line">  <span class="attribute">mlp_dim</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line">  <span class="attribute">num_heads</span><span class="punctuation">:</span> <span class="string">1</span></span><br><span class="line">  <span class="attribute">num_layers</span><span class="punctuation">:</span> <span class="string">1</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p>模型的多个配置，可以使用一个dict记录。 </p><figure class="highlight stylus"><table><tbody><tr><td class="code"><pre><span class="line">CONFIGS = {</span><br><span class="line">    <span class="string">'ViT-B_16'</span>: configs<span class="selector-class">.get_b16_config</span>(),</span><br><span class="line">    <span class="string">'ViT-B_32'</span>: configs<span class="selector-class">.get_b32_config</span>(),</span><br><span class="line">    <span class="string">'ViT-L_16'</span>: configs<span class="selector-class">.get_l16_config</span>(),</span><br><span class="line">    <span class="string">'ViT-L_32'</span>: configs<span class="selector-class">.get_l32_config</span>(),</span><br><span class="line">    <span class="string">'ViT-H_14'</span>: configs<span class="selector-class">.get_h14_config</span>(),</span><br><span class="line">    <span class="string">'R50-ViT-B_16'</span>: configs<span class="selector-class">.get_r50_b16_config</span>(),</span><br><span class="line">    <span class="string">'testing'</span>: configs<span class="selector-class">.get_testing</span>(),</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="生成并加载模型">生成并加载模型</h4>
<p>首先，将配置传入模型构造函数中，生成模型；其次，模型可以载入之前保存好的参数；最后，将模型加载到device中。 </p><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line">model = <span class="constructor">VisionTransformer(<span class="params">config</span>, <span class="params">args</span>.<span class="params">img_size</span>, <span class="params">zero_head</span>=True, <span class="params">num_classes</span>=<span class="params">num_classes</span>)</span></span><br><span class="line">model.load<span class="constructor">_from(<span class="params">np</span>.<span class="params">load</span>(<span class="params">args</span>.<span class="params">pretrained_dir</span>)</span>)</span><br><span class="line">model.<span class="keyword">to</span>(args.device)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="统计模型参数量">统计模型参数量</h4>
<p>模型参数一般指的是有梯度的参数。 </p><figure class="highlight stan"><table><tbody><tr><td class="code"><pre><span class="line">def count_parameters(<span class="title">model</span>):</span><br><span class="line">    params = <span class="built_in">sum</span>(p.numel() <span class="keyword">for</span> p <span class="keyword">in</span> <span class="title">model</span>.<span class="title">parameters</span>() <span class="keyword">if</span> p.requires_grad)</span><br><span class="line">    <span class="keyword">return</span> params/<span class="number">1000000</span> <span class="comment"># in million（M）</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="训练模型">训练模型</h3>
<p>模型训练一般由一个<strong>train</strong>函数实现。 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">args, model</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="保存训练过程">保存训练过程</h4>
<ul>
<li><p>通过<strong>SummaryWriter</strong>保存训练过程数据日志，并可以通过<strong>TensorBoard</strong>查看。 一般由单卡或者master卡保存训练日志，多卡训练的slave节点不保存日志。 </p><figure class="highlight reasonml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> args.local_rank <span class="keyword">in</span> <span class="literal">[-<span class="number">1</span>, <span class="number">0</span>]</span>:</span><br><span class="line">    os.makedirs(args.output_dir, exist_ok=True)</span><br><span class="line">    writer = <span class="constructor">SummaryWriter(<span class="params">log_dir</span>=<span class="params">os</span>.<span class="params">path</span>.<span class="params">join</span>(<span class="string">"logs"</span>, <span class="params">args</span>.<span class="params">name</span>)</span>)</span><br><span class="line"></span><br><span class="line"># train loop</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.local_rank <span class="keyword">in</span> <span class="literal">[-<span class="number">1</span>, <span class="number">0</span>]</span>:</span><br><span class="line">        writer.close<span class="literal">()</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>在terminal中打印日志 推荐使用<strong>logging</strong>包实现，具体如下所示： </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">import<span class="built_in"> logging</span></span><br><span class="line"><span class="built_in"></span>logger = logging.getLogger(__name__)</span><br><span class="line">logger.<span class="built_in">info</span>(<span class="string">"***** Running training *****"</span>)</span><br><span class="line">logger.<span class="built_in">info</span>(<span class="string">"  Total optimization steps = %d"</span>, args.num_steps)</span><br><span class="line">logger.<span class="built_in">info</span>(<span class="string">"  Instantaneous batch size per GPU = %d"</span>, args.train_batch_size)</span><br><span class="line">logger.<span class="built_in">info</span>(<span class="string">"  Total train batch size (w. parallel, distributed &amp; accumulation) = %d"</span>,</span><br><span class="line">                args.train_batch_size * args.gradient_accumulation_steps * (</span><br><span class="line">                    torch.distributed.get_world_size() <span class="keyword">if</span> args.local_rank != -1 <span class="keyword">else</span> 1))</span><br><span class="line">logger.<span class="built_in">info</span>(<span class="string">"  Gradient Accumulation steps = %d"</span>, args.gradient_accumulation_steps)</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ul>
<h4 id="准备数据集">准备数据集</h4>
<p>通过一个<strong>data_loader</strong>函数实现，返回<strong>train_loader</strong>和<strong>test_loader</strong>，具体参照！(数据集准备)[] </p><figure class="highlight autohotkey"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">train_loader,</span> test_loader = dat<span class="built_in">a_loader</span>(args)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="准备优化器和训练计划">准备优化器和训练计划</h4>
<p>需要使用<strong>apex</strong>库。 </p><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> apex import amp</span><br><span class="line"><span class="keyword">from</span> apex.parallel import DistributedDataParallel as DDP</span><br><span class="line"><span class="comment"># Prepare optimizer and scheduler</span></span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(),</span><br><span class="line">                            <span class="attribute">lr</span>=args.learning_rate,</span><br><span class="line">                            <span class="attribute">momentum</span>=0.9,</span><br><span class="line">                            <span class="attribute">weight_decay</span>=args.weight_decay)</span><br><span class="line">t_total = args.num_steps</span><br><span class="line"><span class="keyword">if</span> args.decay_type == <span class="string">"cosine"</span>:</span><br><span class="line">   <span class="built_in"> scheduler </span>= WarmupCosineSchedule(optimizer, <span class="attribute">warmup_steps</span>=args.warmup_steps, <span class="attribute">t_total</span>=t_total)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in"> scheduler </span>= WarmupLinearSchedule(optimizer, <span class="attribute">warmup_steps</span>=args.warmup_steps, <span class="attribute">t_total</span>=t_total)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.fp16:</span><br><span class="line">    model, optimizer = amp.initialize(<span class="attribute">models</span>=model,</span><br><span class="line">                                        <span class="attribute">optimizers</span>=optimizer,</span><br><span class="line">                                        <span class="attribute">opt_level</span>=args.fp16_opt_level)</span><br><span class="line">    amp._amp_state.loss_scalers[0]._loss_scale = 2*<span class="number">*20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Distributed training</span></span><br><span class="line"><span class="keyword">if</span> args.local_rank != -1:</span><br><span class="line">    model = DDP(model, <span class="attribute">message_size</span>=250000000, <span class="attribute">gradient_predivide_factor</span>=get_world_size())</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="开始训练">开始训练</h4>
<ul>
<li>valid 在训练过程中一般会每隔一定时间用测试集评估一下模型的训练结果，过程如下所示： <figure class="highlight scss"><table><tbody><tr><td class="code"><pre><span class="line">def <span class="built_in">valid</span>(args, model, writer, test_loader, global_step):</span><br><span class="line">    # Validation!</span><br><span class="line">    eval_losses = <span class="built_in">AverageMeter</span>()</span><br><span class="line"></span><br><span class="line">    logger.<span class="built_in">info</span>(<span class="string">"***** Running Validation *****"</span>)</span><br><span class="line">    logger.<span class="built_in">info</span>(<span class="string">"  Num steps = %d"</span>, <span class="built_in">len</span>(test_loader))</span><br><span class="line">    logger.<span class="built_in">info</span>(<span class="string">"  Batch size = %d"</span>, args.eval_batch_size)</span><br><span class="line"></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    all_preds, all_label = [], []</span><br><span class="line">    epoch_iterator = <span class="built_in">tqdm</span>(test_loader,</span><br><span class="line">                          desc=<span class="string">"Validating... (loss=X.X)"</span>,</span><br><span class="line">                          bar_format=<span class="string">"{l_bar}{r_bar}"</span>,</span><br><span class="line">                          dynamic_ncols=True,</span><br><span class="line">                          disable=args.local_rank not in [-<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">    loss_fct = torch.nn.<span class="built_in">CrossEntropyLoss</span>()</span><br><span class="line">    for step, batch in <span class="built_in">enumerate</span>(epoch_iterator):</span><br><span class="line">        batch = <span class="built_in">tuple</span>(t.<span class="built_in">to</span>(args.device) for t in batch)</span><br><span class="line">        x, y = batch</span><br><span class="line">        with torch.<span class="built_in">no_grad</span>():</span><br><span class="line">            logits = <span class="built_in">model</span>(x)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            eval_loss = <span class="built_in">loss_fct</span>(logits, y)</span><br><span class="line">            eval_losses.<span class="built_in">update</span>(eval_loss.<span class="built_in">item</span>())</span><br><span class="line"></span><br><span class="line">            preds = torch.<span class="built_in">argmax</span>(logits, dim=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        if <span class="built_in">len</span>(all_preds) == <span class="number">0</span>:</span><br><span class="line">            all_preds.<span class="built_in">append</span>(preds.<span class="built_in">detach</span>().<span class="built_in">cpu</span>().<span class="built_in">numpy</span>())</span><br><span class="line">            all_label.<span class="built_in">append</span>(y.<span class="built_in">detach</span>().<span class="built_in">cpu</span>().<span class="built_in">numpy</span>())</span><br><span class="line">        else:</span><br><span class="line">            all_preds[<span class="number">0</span>] = np.<span class="built_in">append</span>(</span><br><span class="line">                all_preds[<span class="number">0</span>], preds.<span class="built_in">detach</span>().<span class="built_in">cpu</span>().<span class="built_in">numpy</span>(), axis=<span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">            all_label[<span class="number">0</span>] = np.<span class="built_in">append</span>(</span><br><span class="line">                all_label[<span class="number">0</span>], y.<span class="built_in">detach</span>().<span class="built_in">cpu</span>().<span class="built_in">numpy</span>(), axis=<span class="number">0</span></span><br><span class="line">            )</span><br><span class="line">        epoch_iterator.<span class="built_in">set_description</span>(<span class="string">"Validating... (loss=%2.5f)"</span> % eval_losses.val)</span><br><span class="line"></span><br><span class="line">    all_preds, all_label = all_preds[<span class="number">0</span>], all_label[<span class="number">0</span>]</span><br><span class="line">    accuracy = <span class="built_in">simple_accuracy</span>(all_preds, all_label)</span><br><span class="line"></span><br><span class="line">    logger.<span class="built_in">info</span>(<span class="string">"\n"</span>)</span><br><span class="line">    logger.<span class="built_in">info</span>(<span class="string">"Validation Results"</span>)</span><br><span class="line">    logger.<span class="built_in">info</span>(<span class="string">"Global Steps: %d"</span> % global_step)</span><br><span class="line">    logger.<span class="built_in">info</span>(<span class="string">"Valid Loss: %2.5f"</span> % eval_losses.avg)</span><br><span class="line">    logger.<span class="built_in">info</span>(<span class="string">"Valid Accuracy: %2.5f"</span> % accuracy)</span><br><span class="line"></span><br><span class="line">    writer.<span class="built_in">add_scalar</span>(<span class="string">"test/accuracy"</span>, scalar_value=accuracy, global_step=global_step)</span><br><span class="line">    return accuracy</span><br><span class="line"></span><br><span class="line">def <span class="built_in">simple_accuracy</span>(preds, labels):</span><br><span class="line">    return (preds == labels).<span class="built_in">mean</span>()</span><br></pre></td></tr></tbody></table></figure></li>
<li>train 首先，在while循环开始训练之前，定义loss, global_step, best_acc等全局变量；然后开启while循环，开始训练；最后通过global_step和total_step结束训练。训练过程中需要用到<strong>tqdm</strong>库。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">model.zero_grad()</span><br><span class="line">set_seed(args)  # Added here <span class="keyword">for</span> reproducibility (even between python 2 <span class="keyword">and</span> 3)</span><br><span class="line">losses = AverageMeter()</span><br><span class="line">global_step, best_acc = 0, 0</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    model.train()</span><br><span class="line">    epoch_iterator = tqdm(train_loader,</span><br><span class="line">                            <span class="attribute">desc</span>=<span class="string">"Training (X / X Steps) (loss=X.X)"</span>,</span><br><span class="line">                            <span class="attribute">bar_format</span>=<span class="string">"{l_bar}{r_bar}"</span>,</span><br><span class="line">                            <span class="attribute">dynamic_ncols</span>=<span class="literal">True</span>,</span><br><span class="line">                            <span class="attribute">disable</span>=args.local_rank <span class="keyword">not</span> <span class="keyword">in</span> [-1, 0])</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">step</span>, batch <span class="keyword">in</span> enumerate(epoch_iterator):</span><br><span class="line">        batch = tuple(t.<span class="keyword">to</span>(args.device) <span class="keyword">for</span> t <span class="keyword">in</span> batch)</span><br><span class="line">        x, y = batch</span><br><span class="line">        loss = model(x, y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> args.gradient_accumulation_steps &gt; 1:</span><br><span class="line">            loss = loss / args.gradient_accumulation_steps</span><br><span class="line">        <span class="keyword">if</span> args.fp16:</span><br><span class="line">            with amp.scale_loss(loss, optimizer) as scaled_loss:</span><br><span class="line">                scaled_loss.backward()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">step</span> + 1) % args.gradient_accumulation_steps == 0:</span><br><span class="line">            losses.update(loss.item()<span class="number">*a</span>rgs.gradient_accumulation_steps)</span><br><span class="line">            <span class="keyword">if</span> args.fp16:</span><br><span class="line">                torch.nn.utils.clip_grad_norm_(amp.master_params(optimizer), args.max_grad_norm)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                torch.nn.utils.clip_grad_norm_(model.parameters(), args.max_grad_norm)</span><br><span class="line">            scheduler.<span class="keyword">step</span>()</span><br><span class="line">            optimizer.<span class="keyword">step</span>()</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            global_step += 1</span><br><span class="line"></span><br><span class="line">            epoch_iterator.set_description(</span><br><span class="line">                <span class="string">"Training (%d / %d Steps) (loss=%2.5f)"</span> % (global_step, t_total, losses.val)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> args.local_rank <span class="keyword">in</span> [-1, 0]:</span><br><span class="line">                writer.add_scalar(<span class="string">"train/loss"</span>, <span class="attribute">scalar_value</span>=losses.val, <span class="attribute">global_step</span>=global_step)</span><br><span class="line">                writer.add_scalar(<span class="string">"train/lr"</span>, <span class="attribute">scalar_value</span>=scheduler.get_lr()[0], <span class="attribute">global_step</span>=global_step)</span><br><span class="line">            <span class="keyword">if</span> global_step % args.eval_every == 0 <span class="keyword">and</span> args.local_rank <span class="keyword">in</span> [-1, 0]:</span><br><span class="line">                accuracy = valid(args, model, writer, test_loader, global_step)</span><br><span class="line">                <span class="keyword">if</span> best_acc &lt; accuracy:</span><br><span class="line">                    save_model(args, model)</span><br><span class="line">                    best_acc = accuracy</span><br><span class="line">                model.train()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> global_step % t_total == 0:</span><br><span class="line">                break</span><br><span class="line">    losses.reset()</span><br><span class="line">    <span class="keyword">if</span> global_step % t_total == 0:</span><br><span class="line">        break</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Deep Learning</category>
        <category>Pytorch</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Tutorials</tag>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning Note Of Vision Transformer</title>
    <url>/2024/07/05/Learning-Note-Of-Vision-Transformer/</url>
    <content><![CDATA[<html><head></head><body><p><strong>Vision Transformer (ViT)</strong>是Transformer模型应用到视觉领域的开山之作,在分类识别领域取得了SOTA表现，在<a href="https://github.com/Alibaba-MIIL/ImageNet21K">ImageNet-21K</a>上训练的模型作为骨干基座，被广泛应用在了各个视觉任务中。本文主要介绍<strong>ViT</strong>的模型结构，<a href="https://github.com/jeonsworld/ViT-pytorch?tab=readme-ov-file">pytorch代码实现</a>和训练方法。</p>
<span id="more"></span>
<h2 id="vit整体结构">ViT整体结构</h2>
<p><img alt="Vision Transformer模型架构图" data-src="/2024/07/05/Learning-Note-Of-Vision-Transformer/vision_transformer.png"> <strong>Vision Transformer</strong>是在<strong>Transformer</strong>基础之上构建的，关键是如何将二维图像转换为<strong>Transformer</strong>模型可以处理的序列特征。<strong>ViT</strong>首先将图像用固定大小的patch切分，每一个patch作为一个Token，学习一组Embedding特征，图片的多个patch按照自上而下、从左到右的顺序排列，构成序列。然后后在序列最后拼接一个可以学习的类别Token，用于分类任务。最后在序列Embedding特征中增加位置编码，以保留图片patch的位置信息。</p>
<h2 id="vit核心模块">ViT核心模块</h2>
<h3 id="embedding">Embedding</h3>
<p>该模块是<strong>ViT</strong>模型的核心idea，主要是将二维图像转换为<strong>Transformer</strong>模型可以处理的序列特征。</p>
<ul>
<li><p>超参数 -- patch_size，决定了将图像切分为patch的大小 图像序列特征的序列长度，即patch的数量，由输入图像的尺寸<span class="math inline">\([width, height]\)</span>和patch的尺寸共同决定： <span class="math display">\[seq\_len = patch\_num = \frac{width}{patch\_size} * \frac{height}{patch\_size}\]</span></p></li>
<li><p>超参数 -- hidden_size，决定了embedding特征的长度</p></li>
<li><p>超参数 -- dropout_rate，决定了embedding特征dropout的比率</p></li>
</ul>
<p>切分的patch图像通过二维卷积操作提取Embedding特征，拼接上类目编码之后再加上位置编码。 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Embeddings</span>(nn.Module):</span><br><span class="line">    <span class="string">"""Construct the embeddings from patch, position embeddings.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, config, img_size, in_channels=<span class="number">3</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Embeddings, self).__init__()</span><br><span class="line">        self.hybrid = <span class="literal">None</span></span><br><span class="line">        img_size = _pair(img_size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> config.patches.get(<span class="string">"grid"</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            grid_size = config.patches[<span class="string">"grid"</span>]</span><br><span class="line">            patch_size = (img_size[<span class="number">0</span>] // <span class="number">16</span> // grid_size[<span class="number">0</span>], img_size[<span class="number">1</span>] // <span class="number">16</span> // grid_size[<span class="number">1</span>])</span><br><span class="line">            n_patches = (img_size[<span class="number">0</span>] // <span class="number">16</span>) * (img_size[<span class="number">1</span>] // <span class="number">16</span>)</span><br><span class="line">            self.hybrid = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            patch_size = _pair(config.patches[<span class="string">"size"</span>])</span><br><span class="line">            n_patches = (img_size[<span class="number">0</span>] // patch_size[<span class="number">0</span>]) * (img_size[<span class="number">1</span>] // patch_size[<span class="number">1</span>])</span><br><span class="line">            self.hybrid = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.hybrid:</span><br><span class="line">            self.hybrid_model = ResNetV2(block_units=config.resnet.num_layers,</span><br><span class="line">                                         width_factor=config.resnet.width_factor)</span><br><span class="line">            in_channels = self.hybrid_model.width * <span class="number">16</span></span><br><span class="line">        self.patch_embeddings = Conv2d(in_channels=in_channels,</span><br><span class="line">                                       out_channels=config.hidden_size,</span><br><span class="line">                                       kernel_size=patch_size,</span><br><span class="line">                                       stride=patch_size)</span><br><span class="line">        self.position_embeddings = nn.Parameter(torch.zeros(<span class="number">1</span>, n_patches+<span class="number">1</span>, config.hidden_size))</span><br><span class="line">        self.cls_token = nn.Parameter(torch.zeros(<span class="number">1</span>, <span class="number">1</span>, config.hidden_size))</span><br><span class="line"></span><br><span class="line">        self.dropout = Dropout(config.transformer[<span class="string">"dropout_rate"</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># input x shape is [b,c,h,w]</span></span><br><span class="line">        B = x.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># cls_token shape: [1, 1, emb_len] ==&gt; [b, 1, emb_len]</span></span><br><span class="line">        cls_tokens = self.cls_token.expand(B, -<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.hybrid:</span><br><span class="line">            x = self.hybrid_model(x)</span><br><span class="line">        <span class="comment"># x shape: [b,c,h,w] ==&gt; [b, emb_len, h//patch_size, w//patch_size]</span></span><br><span class="line">        x = self.patch_embeddings(x)</span><br><span class="line">        <span class="comment"># x shape: [b, emb_len, h_p, w_p] ==&gt; [b, emb_len, h_p * w_p] ==&gt; [b, emb_len, n_patches]</span></span><br><span class="line">        x = x.flatten(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># x shape: [b, emb_len, n_patches] ==&gt; [b, n_patches, emb_len]</span></span><br><span class="line">        x = x.transpose(-<span class="number">1</span>, -<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># x shape: [b, n_patches, emb_len] ==&gt; [b, n_patches+1, emb_len]</span></span><br><span class="line">        x = torch.cat((cls_tokens, x), dim=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># x shape: [b, n_patches+1, emb_len] ==&gt; [b, n_patches+1, emb_len], add is auto broadcasting</span></span><br><span class="line">        embeddings = x + self.position_embeddings</span><br><span class="line">        embeddings = self.dropout(embeddings)</span><br><span class="line">        <span class="keyword">return</span> embeddings</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="attention">Attention</h3>
<p><strong>Self-Attention</strong>模块是<strong>Transformer</strong>的核心基础模块。</p>
<ul>
<li>超参数 -- num_heads，多头注意力机制的头数量</li>
<li>超参数 -- hidden_size，决定了输入的embedding特征长度</li>
</ul>
<p><strong>hidden_size</strong>和<strong>num_heads</strong>共同决定了多头注意力机制每一头的特征长度。 <span class="math display">\[attention\_head\_size = \frac{hidden\_size}{num\_heads}\]</span> 一般需要确保上述公式是整除的。</p>
<ul>
<li>超参数 -- attention_dropout_rate，决定了attention_score和output的dropout比率 <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Attention</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, config, vis</span>):</span><br><span class="line">        <span class="built_in">super</span>(Attention, self).__init__()</span><br><span class="line">        self.vis = vis</span><br><span class="line">        self.num_attention_heads = config.transformer[<span class="string">"num_heads"</span>]</span><br><span class="line">        self.attention_head_size = <span class="built_in">int</span>(config.hidden_size / self.num_attention_heads)</span><br><span class="line">        self.all_head_size = self.num_attention_heads * self.attention_head_size</span><br><span class="line"></span><br><span class="line">        self.query = Linear(config.hidden_size, self.all_head_size)</span><br><span class="line">        self.key = Linear(config.hidden_size, self.all_head_size)</span><br><span class="line">        self.value = Linear(config.hidden_size, self.all_head_size)</span><br><span class="line"></span><br><span class="line">        self.out = Linear(config.hidden_size, config.hidden_size)</span><br><span class="line">        self.attn_dropout = Dropout(config.transformer[<span class="string">"attention_dropout_rate"</span>])</span><br><span class="line">        self.proj_dropout = Dropout(config.transformer[<span class="string">"attention_dropout_rate"</span>])</span><br><span class="line"></span><br><span class="line">        self.softmax = Softmax(dim=-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">transpose_for_scores</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># x size: [b, seq, all_head_len], new_x_shape: [b, seq, num_heads, head_len]</span></span><br><span class="line">        new_x_shape = x.size()[:-<span class="number">1</span>] + (self.num_attention_heads, self.attention_head_size)</span><br><span class="line">        <span class="comment"># reshape: [b, seq, all_head_len] ==&gt; [b, seq, num_heads, head_len]</span></span><br><span class="line">        x = x.view(*new_x_shape)</span><br><span class="line">        <span class="comment"># x: [b, seq, num_heads, head_len] ==&gt; [b, hum_heads, seq, head_len]</span></span><br><span class="line">        <span class="keyword">return</span> x.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, hidden_states</span>):</span><br><span class="line">        <span class="comment"># input: [b, seq, emb_len] ==&gt; [b, seq, all_head_len]</span></span><br><span class="line">        mixed_query_layer = self.query(hidden_states)</span><br><span class="line">        mixed_key_layer = self.key(hidden_states)</span><br><span class="line">        mixed_value_layer = self.value(hidden_states)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># transpose_for_scores: 切分为多头</span></span><br><span class="line">        <span class="comment"># input: [b, seq, all_head_len] ==&gt; [b, num_heads, seq, head_len]</span></span><br><span class="line">        query_layer = self.transpose_for_scores(mixed_query_layer)</span><br><span class="line">        key_layer = self.transpose_for_scores(mixed_key_layer)</span><br><span class="line">        value_layer = self.transpose_for_scores(mixed_value_layer)</span><br><span class="line">        <span class="comment"># [b, num_heads, seq, head_len] * [b, num_heads, head_len, seq] ==&gt; [b, num_heads, seq, seq]</span></span><br><span class="line">        <span class="comment"># 本质上是在num_heads个通道上，计算一个[seq, seq]维度的协方差矩阵，表征序列特征之间的相似度</span></span><br><span class="line">        attention_scores = torch.matmul(query_layer, key_layer.transpose(-<span class="number">1</span>, -<span class="number">2</span>))</span><br><span class="line">        <span class="comment"># scaling factor: sqrt(head_len)</span></span><br><span class="line">        attention_scores = attention_scores / math.sqrt(self.attention_head_size)</span><br><span class="line">        <span class="comment"># 在最后维度softmax</span></span><br><span class="line">        attention_probs = self.softmax(attention_scores)</span><br><span class="line">        <span class="comment"># 返回可视化的attention_score [b, num_heads, seq, seq]</span></span><br><span class="line">        weights = attention_probs <span class="keyword">if</span> self.vis <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="comment"># dropout</span></span><br><span class="line">        attention_probs = self.attn_dropout(attention_probs)</span><br><span class="line">        <span class="comment"># [b, num_heads, seq, seq] * [b, num_heads, seq, head_len] ==&gt; [b, num_heads, seq, head_len]</span></span><br><span class="line">        <span class="comment"># 本质上是用序列相似度加权平均序列特征</span></span><br><span class="line">        context_layer = torch.matmul(attention_probs, value_layer)</span><br><span class="line">        <span class="comment"># [b, num_heads, seq, head_len] ==&gt; [b, seq, num_heads, head_len]</span></span><br><span class="line">        context_layer = context_layer.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>).contiguous()</span><br><span class="line">        <span class="comment"># [b, seq, num_heads, head_len] ==&gt; [b, seq, all_head_size]</span></span><br><span class="line">        <span class="comment"># 合并多头，形成attention特征</span></span><br><span class="line">        new_context_layer_shape = context_layer.size()[:-<span class="number">2</span>] + (self.all_head_size,)</span><br><span class="line">        context_layer = context_layer.view(*new_context_layer_shape)</span><br><span class="line">        <span class="comment"># 线性变换</span></span><br><span class="line">        attention_output = self.out(context_layer)</span><br><span class="line">        <span class="comment"># dropout</span></span><br><span class="line">        attention_output = self.proj_dropout(attention_output)</span><br><span class="line">        <span class="keyword">return</span> attention_output, weights</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="mlp">Mlp</h3>
<p>该模块为两层全联接层，本质上是将Attention输出的特征映射到更高维度（第一层）之后再映射回统一维度（第二层）。</p>
<ul>
<li>超参数 -- hidden_state，定义了输入输出的特征维度</li>
<li>超参数 --</li>
</ul>
<h3 id="transformer">Transformer</h3>
<h2 id="模型训练">模型训练</h2>
<h3 id="apex">Apex</h3>
<p><a href="https://nvidia.github.io/apex/index.html">Apex</a>是NVIDIA开源的一个用于混合精度训练的库，可以通过数据并行化等方式加速训练速度，降低显存占用，提升模型精度。 #### 安装 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/NVIDIA/apex</span><br><span class="line"><span class="built_in">cd</span> apex</span><br><span class="line"><span class="comment"># if pip &gt;= 23.1 (ref: https://pip.pypa.io/en/stable/news/#v23-1) which supports multiple `--config-settings` with the same key... </span></span><br><span class="line">pip install -v --disable-pip-version-check --no-cache-dir --no-build-isolation --config-settings <span class="string">"--build-option=--cpp_ext"</span> --config-settings <span class="string">"--build-option=--cuda_ext"</span> ./</span><br><span class="line"><span class="comment"># otherwise</span></span><br><span class="line">pip install -v --disable-pip-version-check --no-cache-dir --no-build-isolation --global-option=<span class="string">"--cpp_ext"</span> --global-option=<span class="string">"--cuda_ext"</span> ./</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="使用">使用</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> apex <span class="keyword">import</span> amp</span><br><span class="line">model, optimizer = amp.initialize(model, optimizer, opt_level=<span class="string">"O1"</span>)</span><br><span class="line"><span class="keyword">with</span> amp.scale_loss(loss, optimizer) <span class="keyword">as</span> scaled_loss:</span><br><span class="line">    scaled_loss.backward()</span><br></pre></td></tr></tbody></table></figure>
<h3 id="mixed-precision">Mixed Precision</h3>
<h4 id="使用-1">使用</h4>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Deep Learning</category>
        <category>Pytorch</category>
        <category>Vision Transformer</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Tutorials</tag>
        <tag>Pytorch</tag>
        <tag>Vision Transformer</tag>
      </tags>
  </entry>
  <entry>
    <title>Usage Of Testing Tool Locust</title>
    <url>/2024/08/22/Usage-Of-Testing-Tool-Locust/</url>
    <content><![CDATA[<html><head></head><body><p>完成后端服务开发后，在业务上线之前，通常需要进行压力测试，以评估目前的服务器算力在不同QPS请求下的负载承受能力，以此做系统后端可靠性分析。<strong>Locust</strong>是基于Python接口的开源压力测试工具，本文将介绍如何使用该工具对后端服务器进行压力测试。 <span id="more"></span> ### 安装 可以直接使用<strong>pip</strong>包管理工具进行安装，如下所示： </p><figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> locust</span><br></pre></td></tr></tbody></table></figure> 需要将<strong>Locust</strong>安装目录添加到<strong>PATH</strong>中，这样可以直接在<strong>terminal</strong>中使用<strong>locust</strong>指令。 <figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="string">"/home/parallels/.local/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></tbody></table></figure> 安装完成后，可以通过如下指令查看并确认安装是否成功： <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">locust -V</span></span><br></pre></td></tr></tbody></table></figure> 如果看到以下信息，则表明安装成功。 <figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">locust</span> <span class="number">2</span>.<span class="number">31</span>.<span class="number">3</span> from /home/parallels/.local/lib/python3.<span class="number">10</span>/site-packages/locust (Python <span class="number">3</span>.<span class="number">10</span>.<span class="number">12</span>, OpenSSL <span class="number">3</span>.<span class="number">0</span>.<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure> ### 压测用例 * HttpUser 首先创建一个<strong>locustfile.py</strong>文件，并实现一个继承<strong>HttpUser</strong>的自定义测试类，<strong>Locust</strong>程序在同目录启动后会默认执行该测试用例。 <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> response</span><br><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpUser, task, between, constant</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServoApiUser</span>(<span class="title class_ inherited__">HttpUser</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    User class that does requests to the locust web server running on localhost,</span></span><br><span class="line"><span class="string">    using the fast HTTP client</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    host = <span class="string">"https://www.yourwebsite.com"</span></span><br><span class="line">    wait_time = between(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># wait_time = constant(1)</span></span><br><span class="line">    <span class="comment"># some things you can configure on FastHttpUser</span></span><br><span class="line">    <span class="comment"># connection_timeout = 60.0</span></span><br><span class="line">    <span class="comment"># insecure = True</span></span><br><span class="line">    <span class="comment"># max_redirects = 5</span></span><br><span class="line">    <span class="comment"># max_retries = 1</span></span><br><span class="line">    <span class="comment"># network_timeout = 60.0</span></span><br><span class="line">    <span class="comment"># proxy_host = my-proxy.com</span></span><br><span class="line">    <span class="comment"># proxy_port = 8080</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_start</span>(<span class="params">self</span>):</span><br><span class="line">        self.client.headers = {</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">            <span class="string">'Authorization'</span>: <span class="string">'TOKEN xxxxxxxxx'</span>,</span><br><span class="line">            <span class="string">'Cookie'</span>: <span class="string">'csrftoken=xxxxxxx'</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line"><span class="meta">    @task</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_card_info</span>(<span class="params">self</span>):</span><br><span class="line">        url = <span class="string">"/api/card_info/?stage=pregnancy&amp;level=user"</span></span><br><span class="line">        response = self.client.get(url=url, name=<span class="string">'get_card_info'</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"status code: {}"</span>.<span class="built_in">format</span>(response.status_code))</span><br><span class="line">        <span class="comment"># print("data: {}".format(response.json()))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># @task</span></span><br><span class="line">    <span class="comment"># def stats(self):</span></span><br><span class="line">    <span class="comment">#     self.client.get("/stats/requests")</span></span><br></pre></td></tr></tbody></table></figure> <strong>host</strong>参数可以设置测试服务器的地址。 <strong>wait_time</strong>参数可以设置每个用户实例完成一个task之后，执行下一个task需要的等待时间，<strong>constant</strong>为固定等待时间，<strong>between</strong>为随机等待时间。该参数可以模拟不同用户随机访问的情况。 <strong>on_start</strong>函数会在测试任务启动时运行一次，通常用户配置一些频繁使用但是测试过程中保持不变的参数变量，例如header。 <strong>task</strong>decorator用于定义一个具体的测试任务，通常为一个<strong>api</strong>接口的<strong>POST</strong>、<strong>GET</strong>、<strong>DELETE、</strong>等request请求任务，用于用户自定义测试任务。 ### 压测 在<strong>locustfile.py</strong>同目录的<strong>terminal</strong>输入以下指令，即可启动压测。 <figure class="highlight ebnf"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">locust</span></span><br></pre></td></tr></tbody></table></figure> 在浏览器中访问<strong>http://0.0.0.0:8089</strong>即可开始压测。 <strong>Number of Users</strong>用于配制压测的最高用户数量，配合<strong>wait_time</strong>即可估算出最高QPS <span class="math display">\[qps = \frac{UV}{wait\_time}\]</span> <strong>Ramp Up</strong>用户每秒钟用户增长的数量，用于测试访问用户不断增长情况下，服务器的性能表现。<p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Testing Tool</category>
      </categories>
      <tags>
        <tag>Tutorials</tag>
        <tag>Testing Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Vision Servo Control For Robot Manipulation</title>
    <url>/2024/10/02/Vision-Servo-Control-For-Robot-Manipulation/</url>
    <content><![CDATA[<html><head></head><body><p>视觉伺服是多自由度机械臂灵巧作业领域经典运动控制算法之一，常用于对精细作业和范化作业，例如利用视觉伺服实现对接线面板和USB接口的插拔。视觉伺服算法的核心思想是利用视觉反馈信息，对机械臂末端执行器进行实时位置和姿态调整，以实现精确的运动控制。视觉伺服通常分为两类，一类是基于图像特征的视觉伺服（IBVS），另一类是基于位置姿态的视觉伺服（PBVS）。本文将介绍这两种视觉伺服算法的基本原理和实现方法。 <span id="more"></span> ## 背景理论 视觉伺服本质上是一个在坐标转换（平移、旋转）运动空间的非线性优化问题，因此会用到<strong>Gauss-Newton</strong>非线性优化算法和<strong>Jacobian矩阵</strong>。 ### 非线性优化问题 将最优化问题的目标函数表示为<span class="math inline">\(f(x)\)</span>，其中<span class="math inline">\(f(x)\)</span>二阶连续可微，那么最优化的问题可以转化： <span class="math display">\[{argmin}_{x}f(x)\]</span> 即求解<span class="math inline">\(f(x)\)</span>的最小值以及对应的<span class="math inline">\(x^{*}\)</span>。 复杂的非线性最优化问题，<span class="math inline">\(f(x)\)</span>一般为高维非线性方程组，<span class="math inline">\(x\)</span>为多维向量，即<span class="math inline">\(x \in \mathbb{R}^n\)</span>，<span class="math inline">\(f(x) \in \mathbb{R}^m\)</span>，其中<span class="math inline">\(m \geq n\)</span>。</p>
<p>对于机械臂视觉伺服运动控制问题，上述非线性优化问题可以表示为： <span class="math display">\[x = \begin{bmatrix}t &amp; r \end{bmatrix}\]</span> 其中<span class="math inline">\(t\)</span>表示坐标转换空间中的平移向量，维度为<span class="math inline">\([3x1]\)</span>，<span class="math inline">\(r\)</span>表示坐标转换空间中的旋转向量，维度为<span class="math inline">\([3x1]\)</span>。 <span class="math display">\[f(x) = x_{target} - x_{current}\]</span> 或者 <span class="math display">\[f(x) = x_{target}^{-1} x_{current}\]</span> 公式选择取决于参考坐标系的选择，已经视觉伺服方式的选择，具体请见<strong>视觉伺服</strong>章节。</p>
<h3 id="jacobian矩阵">Jacobian矩阵</h3>
<p>对于复杂的非线性目标函数，在数学上直接求解解析解比较复杂，一般通过一级泰勒公式展开进行线性化近似，即： <span class="math display">\[f(x+\Delta x) \approx f(x) + J(x)\Delta x\]</span> 其中，<span class="math inline">\(J(x)\)</span>为<span class="math inline">\(f(x)\)</span>在<span class="math inline">\(x\)</span>处偏导数<span class="math inline">\(\frac{\partial f(x)}{\partial x}\)</span>，称为Jacobian矩阵，<span class="math inline">\(\Delta x\)</span>为增量。</p>
<p>假设<span class="math inline">\(f(x) \in \mathbb{R}^m\)</span>，<span class="math inline">\(x \in \mathbb{R}^n\)</span>，则雅可比矩阵表示的是<span class="math inline">\(\mathbb{R}^n\)</span>空间到<span class="math inline">\(\mathbb{R}^m\)</span>空间的线性映射，是一个<span class="math inline">\([m×n]\)</span>的矩阵，换句话讲其重要意义在于它表现了一个多变数向量函数的最佳线性逼近，公式为： <span class="math display">\[J(x) = \frac{\partial f(x)}{\partial x} = 
\begin{bmatrix}
\frac{\partial f(x)}{\partial x_{1}} &amp; \cdots &amp; \frac{\partial f(x)}{\partial x_{n}}
\end{bmatrix} = 
\begin{bmatrix}
\frac{\partial f_{1}(x)}{\partial x_{1}} &amp; \cdots &amp; \frac{\partial f_{1}(x)}{\partial x_{n}} \\
\vdots &amp; \ddots &amp; \vdots \\
\frac{\partial f_{m}(x)}{\partial x_{1}} &amp; \cdots &amp; \frac{\partial f_{m}(x)}{\partial x_{n}} \\
\end{bmatrix}\]</span> 一级泰勒公式展开线性逼近公式可以描述为矩阵形式： <span class="math display">\[
\begin{bmatrix}
f_{1}(x + \Delta x) \\ \vdots \\ f_{m}(x + \Delta x)
\end{bmatrix} = 
\begin{bmatrix}
f_{1}(x) \\ \vdots \\ f_{m}(x)
\end{bmatrix} + 
\begin{bmatrix}
\frac{\partial f_{1}(x)}{\partial x_{1}} &amp; \cdots &amp; \frac{\partial f_{1}(x)}{\partial x_{n}} \\
\vdots &amp; \ddots &amp; \vdots \\
\frac{\partial f_{m}(x)}{\partial x_{1}} &amp; \cdots &amp; \frac{\partial f_{m}(x)}{\partial x_{n}} \\
\end{bmatrix}
\begin{bmatrix}
\Delta x_{1} \\ \vdots \\ \Delta x_{n}
\end{bmatrix} 
\]</span></p>
<p>如果 <span class="math inline">\(m = n\)</span>，那么雅可比矩阵是一个<span class="math inline">\([nxn]\)</span>方阵。于是我们可以取它的行列式，称为雅可比行列式。 * 参考链接</p>
<p><a href="https://zh.wikipedia.org/zh-hans/%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5">Jacobian Matrix</a></p>
<p><a href="https://blog.csdn.net/gwplovekimi/article/details/104977255">雅各比矩阵和机械臂关节坐标转换</a></p>
<h3 id="gauss-newton非线性优化">Gauss-Newton非线性优化</h3>
<p>对于大部分非线性优化问题，一般很难直接得到解析解。在数学上可以使用<strong>Gauss-Newton</strong>算法通过循环迭代地方式获取非线性方程组的数值解，其基本思想是从给定的初始值<span class="math inline">\(x^{0}\)</span>开始，沿着梯度下降的方向，循环迭代直至目标函数达到或者接近最优值。</p>
<p>基于一级泰勒公式展开线性逼近方程，可以将最优化问题转换为关于<span class="math inline">\(\Delta x\)</span>的线性最小二乘问题： <span class="math display">\[argmin_{x}\frac{1}{2} \Vert f(x) + J(x)\Delta x \Vert^2\]</span> 其中，<span class="math inline">\(J(x)\)</span>为<span class="math inline">\(f(x)\)</span>在<span class="math inline">\(x\)</span>处偏导数<span class="math inline">\(\frac{\partial f(x)}{\partial x}\)</span>，称为Jacobian矩阵，<span class="math inline">\(\Delta x\)</span>为增量。</p>
<p>注意：<strong>Gauss-Newton</strong>算法必须要转换成最小二乘问题进行求解。</p>
<p>求取上述公式相对于<span class="math inline">\(\Delta x\)</span>的导数，并令导数等于0，即可得到最优解。推导过程如下所示：</p>
<p>已知公式：<span class="math inline">\(\Vert X \Vert^2 = X^TX\)</span>，其中<span class="math inline">\(X\)</span>为矩阵。</p>
<p>可以将最小二乘函数转化为： <span class="math display">\[
\begin{align}
\frac{1}{2} \Vert f(x) + J(x)\Delta x \Vert^2 &amp;= (f(x) + J(x)\Delta x)^T(f(x) + J(x)\Delta x) \\
&amp;= f(x)^Tf(x) + \Delta x^TJ(x)^Tf(x) + f(x)^TJ(x)\Delta x + \Delta x^TJ(x)^TJ(x)\Delta x
\end{align}
\]</span> 已知矩阵求导公式<span class="math inline">\(\frac{\partial x^Ta}{\partial x}=\frac{\partial a^Tx}{\partial x} = a\)</span>，<span class="math inline">\(\frac{}{}\)</span> $$</p>
<p>$$ 迭代公式为： * 参考链接</p>
<p><a href="https://zhuanlan.zhihu.com/p/482540286?utm_id=0">Bundle Adjustment 重投影误差模型及相应雅克比公式推导</a></p>
<p><a href="https://www.cnblogs.com/bingjianing/p/9093054.html">Jacobian矩阵、Hessian矩阵和Newton's method</a></p>
<p><a href="https://loopvoid.github.io/2018/04/28/Jacobian%E7%9F%A9%E9%98%B5%E4%B8%8EHessian%E7%9F%A9%E9%98%B5%E4%B8%8E%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98/">Jacobian矩阵与Hessian矩阵与最小二乘</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/273729929">矩阵求导</a> ## 视觉伺服 ### 基于位置的视觉伺服（PBVS） ### 基于图像的视觉伺服（IBVS）</p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Algorithms</category>
        <category>Robotics</category>
      </categories>
      <tags>
        <tag>Vision Servo</tag>
        <tag>PBVS</tag>
        <tag>IBVS</tag>
      </tags>
  </entry>
  <entry>
    <title>Visualization and Analysis Of Parameters And Architectures Of Models</title>
    <url>/2024/12/31/Visualization-and-Analysis-Of-Parameters-And-Architectures-Of-Models/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍模型参数量的分析方法和模型结构的可视化方法。本文主要有两部分内容，第一部分是使用<a href="https://github.com/TylerYep/torchinfo">torchinfo</a>分析模型参数量，第二部分是使用<a href="https://github.com/lanpa/torch-summary">torchview</a>工具包对模型结构和模块进行可视化。 <span id="more"></span></p>
<h2 id="parameter-and-memory-analysis"><strong>Parameter and Memory Analysis</strong></h2>
<p>模型参数分析参考文章：<a href="https://medium.com/the-owl/how-to-get-model-summary-in-pytorch-57db7824d1e3#id_token=eyJhbGciOiJSUzI1NiIsImtpZCI6ImFiODYxNGZmNjI4OTNiYWRjZTVhYTc5YTc3MDNiNTk2NjY1ZDI0NzgiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiIyMTYyOTYwMzU4MzQtazFrNnFlMDYwczJ0cDJhMmphbTRsamRjbXMwMHN0dGcuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiIyMTYyOTYwMzU4MzQtazFrNnFlMDYwczJ0cDJhMmphbTRsamRjbXMwMHN0dGcuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMTA0MjY2MjgwMDUyOTgwMTQyMDAiLCJlbWFpbCI6InlvbmdzaGVuZy56aGFvLmNzY0BnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmJmIjoxNzM1NTc0MDgyLCJuYW1lIjoiWW91bmdzb24gWmhhbyIsInBpY3R1cmUiOiJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS9BQ2c4b2NLUWltYTZjZ054WnFOZW1majF1LXdXRW5Cd09wZWlMRERFenJ3Y01aNTNSY1JocXM0PXM5Ni1jIiwiZ2l2ZW5fbmFtZSI6IllvdW5nc29uIiwiZmFtaWx5X25hbWUiOiJaaGFvIiwiaWF0IjoxNzM1NTc0MzgyLCJleHAiOjE3MzU1Nzc5ODIsImp0aSI6ImU2OTRmMzEyZDAwZTA3Yjg3NWU1NzBmMDIxZTlkY2YyMWEwOTQ0MjIifQ.jB6C-8q7ZWwyWSwEa0a3Y4smtKiCtXT7zSkJQBqzNARU5zvDn_w90Funus3UgKcYEFh4g80KwKv3uEiDlnicvcQO93-LqOihbz2n8ljKuKpOyQpuTnaGQ4YayxmoLRwOHC4gzTpZkVadrDnc1BiBoyoXiFNKCE54wJIToD5Dj7qJFBC43djXHG6MlGnyt4TRJEu2ovbnpvef8LqryEXnpv1KVmlFdak_gsrnD4NSsQCQJd3Z_BJBls1nRt8Ph0QEi2SzZjnu7HbNBWS9cQxYTNllR4HP_umrd8GHBQWzQjPay0X0MXC9-j0jCV78Da_NtPJtWqv4T-88b16XZx1Ydw">How to get Model Summary in PyTorch</a> ### <strong>torchinfo</strong> <a href="https://github.com/TylerYep/torchinfo">torchinfo</a>是一个用于分析PyTorch模型参数的工具包，可以方便地查看模型的参数量、计算量、内存占用等信息。</p>
<ul>
<li><p>torchinfo的安装方法如下： </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install torchinfo</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>torchinfo的使用方法如下： </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchinfo <span class="keyword">import</span> summary</span><br><span class="line">device = torch.device(<span class="string">"cuda"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line"><span class="comment"># define model</span></span><br><span class="line">model = get_model(config, tokenizer_src.get_vocab_size(), tokenizer_tgt.get_vocab_size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># print model summary information</span></span><br><span class="line">summary(model, input_data=(torch.randint(<span class="number">2</span>, (<span class="number">16</span>, <span class="number">256</span>)).to(device), torch.randint(<span class="number">2</span>, (<span class="number">16</span>, <span class="number">256</span>)).to(device), torch.randint(<span class="number">1</span>, (<span class="number">16</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">256</span>)).to(device), torch.randint(<span class="number">1</span>, (<span class="number">16</span>, <span class="number">1</span>, <span class="number">256</span>, <span class="number">256</span>)).to(device)), device=device.<span class="built_in">type</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>torchinfo的模型summary信息(以Transformer)如下： </p><figure class="highlight nestedtext"><table><tbody><tr><td class="code"><pre><span class="line">=========================================================================================================</span><br><span class="line">Layer (type:depth-idx)                                  Output Shape              Param #</span><br><span class="line"><span class="attribute">=========================================================================================================</span></span><br><span class="line"><span class="attribute">Transformer                                             [16, 256, 22466]          --</span></span><br><span class="line"><span class="attribute">├─InputEmbedding</span><span class="punctuation">:</span> <span class="string">1-1                                   [16, 256, 512]            --</span></span><br><span class="line"><span class="attribute">│    └─Embedding</span><span class="punctuation">:</span> <span class="string">2-1                                   [16, 256, 512]            8,038,912</span></span><br><span class="line"><span class="attribute">├─PositionalEncoding</span><span class="punctuation">:</span> <span class="string">1-2                               [16, 256, 512]            --</span></span><br><span class="line"><span class="attribute">│    └─Dropout</span><span class="punctuation">:</span> <span class="string">2-2                                     [16, 256, 512]            --</span></span><br><span class="line"><span class="attribute">├─Encoder</span><span class="punctuation">:</span> <span class="string">1-3                                          [16, 256, 512]            --</span></span><br><span class="line"><span class="attribute">│    └─ModuleList</span><span class="punctuation">:</span> <span class="string">2-3                                  --                        --</span></span><br><span class="line"><span class="attribute">│    │    └─EncoderBlock</span><span class="punctuation">:</span> <span class="string">3-1                           [16, 256, 512]            3,150,340</span></span><br><span class="line"><span class="attribute">│    │    └─EncoderBlock</span><span class="punctuation">:</span> <span class="string">3-2                           [16, 256, 512]            3,150,340</span></span><br><span class="line"><span class="attribute">│    │    └─EncoderBlock</span><span class="punctuation">:</span> <span class="string">3-3                           [16, 256, 512]            3,150,340</span></span><br><span class="line"><span class="attribute">│    │    └─EncoderBlock</span><span class="punctuation">:</span> <span class="string">3-4                           [16, 256, 512]            3,150,340</span></span><br><span class="line"><span class="attribute">│    │    └─EncoderBlock</span><span class="punctuation">:</span> <span class="string">3-5                           [16, 256, 512]            3,150,340</span></span><br><span class="line"><span class="attribute">│    │    └─EncoderBlock</span><span class="punctuation">:</span> <span class="string">3-6                           [16, 256, 512]            3,150,340</span></span><br><span class="line"><span class="attribute">│    └─LayerNormalization</span><span class="punctuation">:</span> <span class="string">2-4                          [16, 256, 512]            2</span></span><br><span class="line"><span class="attribute">├─InputEmbedding</span><span class="punctuation">:</span> <span class="string">1-4                                   [16, 256, 512]            --</span></span><br><span class="line"><span class="attribute">│    └─Embedding</span><span class="punctuation">:</span> <span class="string">2-5                                   [16, 256, 512]            11,502,592</span></span><br><span class="line"><span class="attribute">├─PositionalEncoding</span><span class="punctuation">:</span> <span class="string">1-5                               [16, 256, 512]            --</span></span><br><span class="line"><span class="attribute">│    └─Dropout</span><span class="punctuation">:</span> <span class="string">2-6                                     [16, 256, 512]            --</span></span><br><span class="line"><span class="attribute">├─Decoder</span><span class="punctuation">:</span> <span class="string">1-6                                          [16, 256, 512]            --</span></span><br><span class="line"><span class="attribute">│    └─ModuleList</span><span class="punctuation">:</span> <span class="string">2-7                                  --                        --</span></span><br><span class="line"><span class="attribute">│    │    └─DecoderBlock</span><span class="punctuation">:</span> <span class="string">3-7                           [16, 256, 512]            4,200,966</span></span><br><span class="line"><span class="attribute">│    │    └─DecoderBlock</span><span class="punctuation">:</span> <span class="string">3-8                           [16, 256, 512]            4,200,966</span></span><br><span class="line"><span class="attribute">│    │    └─DecoderBlock</span><span class="punctuation">:</span> <span class="string">3-9                           [16, 256, 512]            4,200,966</span></span><br><span class="line"><span class="attribute">│    │    └─DecoderBlock</span><span class="punctuation">:</span> <span class="string">3-10                          [16, 256, 512]            4,200,966</span></span><br><span class="line"><span class="attribute">│    │    └─DecoderBlock</span><span class="punctuation">:</span> <span class="string">3-11                          [16, 256, 512]            4,200,966</span></span><br><span class="line"><span class="attribute">│    │    └─DecoderBlock</span><span class="punctuation">:</span> <span class="string">3-12                          [16, 256, 512]            4,200,966</span></span><br><span class="line"><span class="attribute">│    └─LayerNormalization</span><span class="punctuation">:</span> <span class="string">2-8                          [16, 256, 512]            2</span></span><br><span class="line"><span class="attribute">├─ProjectionLayer</span><span class="punctuation">:</span> <span class="string">1-7                                  [16, 256, 22466]          --</span></span><br><span class="line"><span class="attribute">│    └─Linear</span><span class="punctuation">:</span> <span class="string">2-9                                      [16, 256, 22466]          11,525,058</span></span><br><span class="line"><span class="attribute">=========================================================================================================</span></span><br><span class="line"><span class="attribute">Total params</span><span class="punctuation">:</span> <span class="string">75,174,402</span></span><br><span class="line"><span class="attribute">Trainable params</span><span class="punctuation">:</span> <span class="string">75,174,402</span></span><br><span class="line"><span class="attribute">Non-trainable params</span><span class="punctuation">:</span> <span class="string">0</span></span><br><span class="line"><span class="attribute">Total mult-adds (G)</span><span class="punctuation">:</span> <span class="string">1.20</span></span><br><span class="line"><span class="attribute">=========================================================================================================</span></span><br><span class="line"><span class="attribute">Input size (MB)</span><span class="punctuation">:</span> <span class="string">8.49</span></span><br><span class="line"><span class="attribute">Forward/backward pass size (MB)</span><span class="punctuation">:</span> <span class="string">3521.18</span></span><br><span class="line"><span class="attribute">Params size (MB)</span><span class="punctuation">:</span> <span class="string">300.70</span></span><br><span class="line"><span class="attribute">Estimated Total Size (MB)</span><span class="punctuation">:</span> <span class="string">3830.37</span></span><br><span class="line">=========================================================================================================</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ul>
<h3 id="parameter-analysis-step-by-step"><strong>Parameter Analysis Step by Step</strong></h3>
<p><strong>Transformer</strong>模型的参数如下所示： </p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">src_vocab_size</span>: <span class="number">15701</span></span><br><span class="line"><span class="attribute">tgt_vocab_size</span>: <span class="number">22466</span></span><br><span class="line"><span class="attribute">src_seq_len</span>: <span class="number">256</span></span><br><span class="line"><span class="attribute">tgt_seq_len</span>: <span class="number">256</span></span><br><span class="line"><span class="attribute">embed_size</span>: <span class="number">512</span></span><br><span class="line"><span class="attribute">hidden_size</span>: <span class="number">2048</span></span><br><span class="line"><span class="attribute">num_heads</span>: <span class="number">8</span></span><br><span class="line"><span class="attribute">num_encoder_layers</span>: <span class="number">6</span></span><br><span class="line"><span class="attribute">num_decoder_layers</span>: <span class="number">6</span></span><br><span class="line"><span class="attribute">dropout</span>: <span class="number">0</span>.<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure> <strong>Transformer</strong>模型参数量大小跟<strong>src_vocab_size</strong>、<strong>tgt_vocab_size</strong>、<strong>embed_size</strong>、<strong>hidden_size</strong>、<strong>num_encoder_layers</strong>、<strong>num_decoder_layers</strong>有关。<p></p>
<h4 id="inputembedding"><strong>InputEmbedding</strong></h4>
<p><strong>InputEmbedding</strong>本质上是一个词表嵌入向量矩阵，用Lookup Table实现，其大小取决于词表中的词数和每个词的嵌入向量维度。</p>
<ul>
<li><p>对于源序列，其<strong>InputEmbedding</strong>的参数量大小为： <span class="math display">\[ 
P_{ie}^{src} = src\_vocab\_size \times embed\_size = 15701 \times 512 = 8038912
\]</span> 其中<span class="math inline">\(P_{ie}^{src}\)</span>为源序列的<strong>InputEmbedding</strong>参数量大小。</p></li>
<li><p>对于目标序列，其<strong>InputEmbedding</strong>的参数量大小为： <span class="math display">\[ 
P_{ie}^{tgt} = tgt\_vocab\_size \times embed\_size = 22466 \times 512 = 11502592
\]</span> 其中<span class="math inline">\(P_{ie}^{tgt}\)</span>为目标序列的<strong>InputEmbedding</strong>参数量大小。</p></li>
</ul>
<h4 id="positionalencoding"><strong>PositionalEncoding</strong></h4>
<p><strong>PositionalEncoding</strong>是由不同频率的正弦和余弦函数生成的绝对位置编码，是一个唯一确定的位置编码表，不存在可训练的参数，因此其参数量为0。</p>
<h4 id="encoder"><strong>Encoder</strong></h4>
<p><strong>Encoder</strong>由6个<strong>EncoderBlock</strong>和1个<strong>LayerNormalization</strong>组成，因此其参数量大小为： <span class="math display">\[
P_{enc} = 6 \times P_{encb} + P_{ln} = 6 \times 3150340 + 2 = 18902042
\]</span> 其中<span class="math inline">\(P_{enc}\)</span>为<strong>Encoder</strong>的参数量大小，<span class="math inline">\(P_{encb}\)</span>为<strong>EncoderBlock</strong>的参数量大小，<span class="math inline">\(P_{ln}\)</span>为<strong>LayerNormalization</strong>的参数量大小。</p>
<h5 id="encoderblock"><strong>EncoderBlock</strong></h5>
<p><strong>EncoderBlock</strong>由一个<strong>MultiHeadAttentionBlock</strong>、一个<strong>FeedForwardBlock</strong>和两个<strong>ResidualConnection</strong>组成，因此其参数量大小为： <span class="math display">\[
P_{encb} = P_{mhab} + P_{ffb} + 2 \times P_{rc} = 1050624 + 2099712 + 2 \times 2 = 3150340
\]</span> 其中<span class="math inline">\(P_{encb}\)</span>为<strong>EncoderBlock</strong>的参数量大小，<span class="math inline">\(P_{mhab}\)</span>为<strong>MultiHeadAttentionBlock</strong>的参数量大小，<span class="math inline">\(P_{ffb}\)</span>为<strong>FeedForwardBlock</strong>的参数量大小，<span class="math inline">\(P_{rc}\)</span>为<strong>ResidualConnection</strong>的参数量大小。</p>
<h6 id="residualconnection"><strong>ResidualConnection</strong></h6>
<p><strong>ResidualConnection</strong>模块包含一个<strong>LayerNormalization</strong>和一个<strong>Add</strong>操作，因此其参数量s大小为： <span class="math display">\[
P_{rc} = P_{ln} = 2
\]</span> 其中<span class="math inline">\(P_{rc}\)</span>为<strong>ResidualConnection</strong>的参数量大小，<span class="math inline">\(P_{ln}\)</span>为<strong>LayerNormalization</strong>的参数量大小。</p>
<h6 id="multiheadattentionblock"><strong>MultiHeadAttentionBlock</strong></h6>
<p><strong>MultiHeadAttentionBlock</strong>由四个<strong>Linear</strong>模块组成，因此其参数量大小为： <span class="math display">\[
P_{mhab} = 4 \times P_{linear} = 4 \times (embed\_size \times embed\_size + embed\_size) = 4 \times (512 \times 512 + 512 \times 512 + 512) = 1050624
\]</span> 其中<span class="math inline">\(P_{linear}\)</span>为<strong>MultiHeadAttentionBlock</strong>模块中的线性映射层，共有4个，<span class="math inline">\(embed\_size\)</span>为<strong>Linear</strong>模块的输入和输出维度。</p>
<h6 id="feedforwardblock"><strong>FeedForwardBlock</strong></h6>
<p><strong>FeedForwardBlock</strong>由两个<strong>Linear</strong>、一个<strong>ReLU</strong>和一个<strong>Dropout</strong>组成，其中<strong>ReLU</strong>和<strong>Dropout</strong>模块不包含可训练的参数，因此其参数量大小为： <span class="math display">\[
P_{ffb} = embed\_size \times hidden\_size + hidden\_size + hidden\_size \times embed\_size + embed\_size = 512 \times 2048 + 2048 + 2048 \times 512 + 512 = 2099712
\]</span> 其中<span class="math inline">\(P_{ffb}\)</span>为<strong>FeedForwardBlock</strong>的参数量大小，<span class="math inline">\(embed\_size\)</span>为<strong>Linear</strong>模块的输入和输出维度，<span class="math inline">\(hidden\_size\)</span>为<strong>FeedForwardBlock</strong>的隐藏层维度。</p>
<h4 id="decoder"><strong>Decoder</strong></h4>
<p><strong>Decoder</strong>由6个<strong>DecoderBlock</strong>和1个<strong>LayerNormalization</strong>组成，因此其参数量大小为： <span class="math display">\[
P_{dec} = 6 \times P_{decb} + P_{ln} = 6 \times 4200966 + 2 = 25205798
\]</span> 其中<span class="math inline">\(P_{dec}\)</span>为<strong>Decoder</strong>的参数量大小，<span class="math inline">\(P_{decb}\)</span>为<strong>DecoderBlock</strong>的参数量大小，<span class="math inline">\(P_{ln}\)</span>为<strong>LayerNormalization</strong>的参数量大小。</p>
<h5 id="decoderblock"><strong>DecoderBlock</strong></h5>
<p><strong>DecoderBlock</strong>由两个<strong>MultiHeadAttentionBlock</strong>、一个<strong>FeedForwardBlock</strong>和三个<strong>ResidualConnection</strong>组成，因此其参数量大小为： <span class="math display">\[
P_{decb} = P_{smhab} + P_{cmhab} + P_{ffb} + 3 \times P_{rc} = 1050624 + 1050624 + 2099712 + 3 \times 2 = 4200966
\]</span> 其中<span class="math inline">\(P_{decb}\)</span>为<strong>DecoderBlock</strong>的参数量大小，<span class="math inline">\(P_{smhab}\)</span>为<strong>SelfMultiHeadAttentionBlock</strong>的参数量大小，<span class="math inline">\(P_{cmhab}\)</span>为<strong>CrossMultiHeadAttentionBlock</strong>的参数量大小，<span class="math inline">\(P_{ffb}\)</span>为<strong>FeedForwardBlock</strong>的参数量大小，<span class="math inline">\(P_{rc}\)</span>为<strong>ResidualConnection</strong>的参数量大小。</p>
<h4 id="projectionlayer"><strong>ProjectionLayer</strong></h4>
<p><strong>ProjectionLayer</strong>由一个<strong>Linear</strong>和一个<strong>Dropout</strong>组成，因此其参数量大小为： <span class="math display">\[
P_{pl} = embedding\_size \times tgt\_vocab\_size + tgt\_vocab\_size = 512 \times 22466 + 22466 = 11525058
\]</span></p>
<h4 id="total-parameters"><strong>Total Parameters</strong></h4>
<p><strong>Transformer</strong>模型的总参数量为： <span class="math display">\[
P_{total} = P_{ie}^{src} + P_{ie}^{tgt} + P_{enc} + P_{dec} + P_{pl} = 8038912 + 11502592 + 18902042 + 25205798 + 11525058 = 75174402
\]</span></p>
<h3 id="memory-analysis"><strong>Memory Analysis</strong></h3>
<p><strong>Transformer</strong>模型的参数都是Float32格式的，一个参数占用4字节，因此参数量占用内存大小为： <span class="math display">\[
M_{total} = P_{total} * 4 / 1000 / 1000 = 75174402 * 4 / 1000 / 1000 = 300.70MB
\]</span></p>
<h4 id="中间激活值">中间激活值</h4>
<p>中间激活值是为了计算梯度而需要保留的中间结果，具体计算方法和步骤可以参照<a href="https://mingchao.wang/4KTgtnFc/">这里</a>。</p>
<h2 id="architecture-visualization"><strong>Architecture Visualization</strong></h2>
<p><a href="https://github.com/mert-kurttutan/torchview">torchview</a>是pytorch模型结构常用的可视化工具，可以分层查看模型结构和模型的输入输出。 ### <strong>安装</strong> <strong>torchview</strong>是基于<strong>graphviz</strong>实现的，因此需要先安装<strong>graphviz</strong>，然后安装<strong>torchview</strong>。 </p><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install graphviz</span><br><span class="line">pip install graphviz</span><br><span class="line">pip install torchview</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="使用"><strong>使用</strong></h3>
<p><strong>torchview</strong>的使用步骤很简单，首先定义模型(步骤见上面章节)，然后定义模型的输入数据，最后调用<strong>torchview</strong>函数即可。 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchview <span class="keyword">import</span> draw_graph</span><br><span class="line">model_graph = draw_graph(model, input_data=(torch.randint(<span class="number">2</span>, (<span class="number">16</span>, <span class="number">256</span>)).to(device), torch.randint(<span class="number">2</span>, (<span class="number">16</span>, <span class="number">256</span>)).to(device), torch.randint(<span class="number">1</span>, (<span class="number">16</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">256</span>)).to(device), torch.randint(<span class="number">1</span>, (<span class="number">16</span>, <span class="number">1</span>, <span class="number">256</span>, <span class="number">256</span>)).to(device)), depth=<span class="number">2</span>, device=device.<span class="built_in">type</span>, expand_nested=<span class="literal">True</span>, save_graph=<span class="literal">True</span>, filename=<span class="string">'transformer'</span>)</span><br><span class="line">model_graph.visual_graph</span><br></pre></td></tr></tbody></table></figure> <img alt="Transformer模型结构（depth=2, expand_nested=True）" data-src="/2024/12/31/Visualization-and-Analysis-Of-Parameters-And-Architectures-Of-Models/transformer.png"><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Deep Learning</category>
        <category>Pytorch</category>
        <category>Model</category>
        <category>Transformer</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Tutorials</tag>
        <tag>Pytorch</tag>
        <tag>Model</tag>
        <tag>Transformer</tag>
      </tags>
  </entry>
  <entry>
    <title>Visualization Of Transformer&#39;s Attention Score</title>
    <url>/2025/01/02/Visualization-Of-Transformer-s-Attention-Score/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://youngsonzhao.github.io/2024/12/23/Architecture-Of-Transformer-And-PyTorch-Implementation/">Transformer</a>模型在自然语言处理、视觉检测、分割和识别等任务中都得到了广泛应用，其核心思想是通过自注意力机制来捕捉学习输入序列中的嵌入特征，多头注意力模块中的注意力分数（Attention Score）是自注意力机制中的重要操作，可以很好的体现出输入序列各Token的关联关系。本文将介绍如何使用<a href="https://altair-viz.github.io/user_guide/saving_charts.html">Altair</a>对于Attention Score进行可视化，以方便对模型进行分析。 <span id="more"></span></p>
<h3 id="工具包安装">工具包安装</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install vl-convert-python <span class="comment"># Altair保存数据依赖该包</span></span><br><span class="line">pip install altair</span><br></pre></td></tr></tbody></table></figure>
<h3 id="可视化">可视化</h3>
<p>Attention Score可视化步骤包括： 1. 载入数据集和模型参数 2. 模型进行前向推理，以获取Attention Score 3. 使用Altair对Attention Score进行可视化并将结果保存为png文件</p>
<h4 id="载入数据集和模型参数">载入数据集和模型参数</h4>
<p>步骤主要有四步： 1. 载入key-value格式的config配置文件，以获取模型参数和路径 2. 利用config配置信息载入数据集和tokenizer 3. 利用config配置信息创建模型，并从训练好的checkpoint中载入模型参数 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> get_config, get_weight_file_path</span><br><span class="line">config = get_config()</span><br><span class="line">display(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> get_dataset</span><br><span class="line">train_dataloader, val_dataloader, tokenizer_src, tokenizer_tgt = get_dataset(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> get_model</span><br><span class="line">model = get_model(config, tokenizer_src.get_vocab_size(), tokenizer_tgt.get_vocab_size())</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> get_weight_file_path</span><br><span class="line">model_filename = get_weight_file_path(config, <span class="string">'22'</span>)</span><br><span class="line"><span class="comment"># model_filename = get_weight_file_path(config, config['preload'])</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'Preloading model from <span class="subst">{model_filename}</span>'</span>)</span><br><span class="line">state = torch.load(model_filename, weights_only=<span class="literal">True</span>)</span><br><span class="line">model.load_state_dict(state[<span class="string">'model_state_dict'</span>])</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="模型前向推理">模型前向推理</h4>
<ul>
<li><p>载入验证数据集的一个batch数据 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_next_val_batch</span>(<span class="params">val_dataloader, tokenizer_src, tokenizer_tgt, device</span>):</span><br><span class="line">    <span class="string">"""Load the next batch from the validation set</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        val_dataloader: validation dataloader</span></span><br><span class="line"><span class="string">        tokenizer_src: source tokenizer</span></span><br><span class="line"><span class="string">        tokenizer_tgt: target tokenizer</span></span><br><span class="line"><span class="string">        device: cuda or cpu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        batch: next batch from the validation set</span></span><br><span class="line"><span class="string">        encoder_input_tokens: source sentence tokens</span></span><br><span class="line"><span class="string">        decoder_input_tokens: target sentence tokens</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># Load a sample batch from the validation set</span></span><br><span class="line">    batch = <span class="built_in">next</span>(<span class="built_in">iter</span>(val_dataloader))</span><br><span class="line">    encoder_input = batch[<span class="string">"encoder_input"</span>].to(device)</span><br><span class="line">    encoder_mask = batch[<span class="string">"encoder_mask"</span>].to(device)</span><br><span class="line">    decoder_input = batch[<span class="string">"decoder_input"</span>].to(device)</span><br><span class="line">    decoder_mask = batch[<span class="string">"decoder_mask"</span>].to(device)</span><br><span class="line"></span><br><span class="line">    encoder_input_tokens = [tokenizer_src.id_to_token(idx) <span class="keyword">for</span> idx <span class="keyword">in</span> encoder_input[<span class="number">0</span>].cpu().numpy()]</span><br><span class="line">    decoder_input_tokens = [tokenizer_tgt.id_to_token(idx) <span class="keyword">for</span> idx <span class="keyword">in</span> decoder_input[<span class="number">0</span>].cpu().numpy()]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># check that the batch size is 1</span></span><br><span class="line">    <span class="keyword">assert</span> encoder_input.size(</span><br><span class="line">        <span class="number">0</span>) == <span class="number">1</span>, <span class="string">"Batch size must be 1 for validation"</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> batch, encoder_input_tokens, decoder_input_tokens</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>模型前向推理 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greedy_decode</span>(<span class="params">model, src, src_mask, tokenizer_src, tokenizer_tgt, max_len, device</span>):</span><br><span class="line">    <span class="string">"""Greedy decode the model</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        model: the model to decode</span></span><br><span class="line"><span class="string">        src: the source sequence</span></span><br><span class="line"><span class="string">        src_mask: the source mask</span></span><br><span class="line"><span class="string">        tokenizer_src: source tokenizer</span></span><br><span class="line"><span class="string">        tokenizer_tgt: target tokenizer</span></span><br><span class="line"><span class="string">        max_len: the maximum length of the input sequence</span></span><br><span class="line"><span class="string">        device: cuda or cpu</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sos_idx = tokenizer_tgt.token_to_id(<span class="string">'[SOS]'</span>)</span><br><span class="line">    eos_idx = tokenizer_tgt.token_to_id(<span class="string">'[EOS]'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Precompute the encoder output and reuse it for every token we get from the decoder</span></span><br><span class="line">    encoder_output = model.encode(src, src_mask)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize the decoder input with the sos token</span></span><br><span class="line">    decoder_input = torch.empty(<span class="number">1</span>, <span class="number">1</span>).fill_(sos_idx).type_as(src).to(device)</span><br><span class="line">    <span class="comment"># Predict the next token until reaching the max_len or the eos token</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> decoder_input.size(<span class="number">1</span>) == max_len:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># Build mask for the target (decoder input)</span></span><br><span class="line">        decoder_mask = causal_mask(decoder_input.size(<span class="number">1</span>)).type_as(src).to(device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Run the decoder and get the output</span></span><br><span class="line">        decoder_output = model.decode(decoder_input, encoder_output, src_mask, decoder_mask)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Get the next token</span></span><br><span class="line">        prob = model.project(decoder_output[:, -<span class="number">1</span>]) <span class="comment"># (1, vocab_tgt_len)</span></span><br><span class="line">        <span class="comment"># Select the next token with the maximum probability (greedy search)</span></span><br><span class="line">        _, next_token = torch.<span class="built_in">max</span>(prob, dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        decoder_input = torch.cat((decoder_input, torch.empty(<span class="number">1</span>, <span class="number">1</span>).fill_(next_token.item()).type_as(src).to(device)), dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Check if the next token is the eos token</span></span><br><span class="line">        <span class="keyword">if</span> next_token.item() == eos_idx:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decoder_input.squeeze(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>Attention Score可视化 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mtx2df</span>(<span class="params">m, max_row, max_col, row_tokens, col_tokens</span>):</span><br><span class="line">    <span class="keyword">return</span> pd.DataFrame(</span><br><span class="line">        [</span><br><span class="line">            (</span><br><span class="line">                r,</span><br><span class="line">                c,</span><br><span class="line">                <span class="built_in">float</span>(m[r, c]),</span><br><span class="line">                <span class="string">"%.3d %s"</span> % (r, row_tokens[r] <span class="keyword">if</span> <span class="built_in">len</span>(row_tokens) &gt; r <span class="keyword">else</span> <span class="string">"&lt;blank&gt;"</span>),</span><br><span class="line">                <span class="string">"%.3d %s"</span> % (c, col_tokens[c] <span class="keyword">if</span> <span class="built_in">len</span>(col_tokens) &gt; c <span class="keyword">else</span> <span class="string">"&lt;blank&gt;"</span>),</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(m.shape[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(m.shape[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> r &lt; max_row <span class="keyword">and</span> c &lt; max_col</span><br><span class="line">        ],</span><br><span class="line">        columns=[<span class="string">"row"</span>, <span class="string">"column"</span>, <span class="string">"value"</span>, <span class="string">"row_token"</span>, <span class="string">"col_token"</span>],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_attn_map</span>(<span class="params">attn_type: <span class="built_in">str</span>, layer: <span class="built_in">int</span>, head: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">if</span> attn_type == <span class="string">"encoder"</span>:</span><br><span class="line">        attn = model.encoder.encoder_blocks[layer].multi_head_attention.score</span><br><span class="line">    <span class="keyword">elif</span> attn_type == <span class="string">"decoder"</span>:</span><br><span class="line">        attn = model.decoder.decoder_blocks[layer].self_attention_block.score</span><br><span class="line">    <span class="keyword">elif</span> attn_type == <span class="string">"encoder-decoder"</span>:</span><br><span class="line">        attn = model.decoder.decoder_blocks[layer].cross_attention_block.score</span><br><span class="line">    <span class="keyword">return</span> attn[<span class="number">0</span>, head].data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attn_map</span>(<span class="params">attn_type, layer, head, row_tokens, col_tokens, max_sentence_len</span>):</span><br><span class="line">    df = mtx2df(</span><br><span class="line">        get_attn_map(attn_type, layer, head),</span><br><span class="line">        max_sentence_len,</span><br><span class="line">        max_sentence_len,</span><br><span class="line">        row_tokens,</span><br><span class="line">        col_tokens,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        alt.Chart(data=df)</span><br><span class="line">        .mark_rect()</span><br><span class="line">        .encode(</span><br><span class="line">            x=alt.X(<span class="string">"col_token"</span>, axis=alt.Axis(title=<span class="string">""</span>)),</span><br><span class="line">            y=alt.Y(<span class="string">"row_token"</span>, axis=alt.Axis(title=<span class="string">""</span>)),</span><br><span class="line">            color=<span class="string">"value"</span>,</span><br><span class="line">            tooltip=[<span class="string">"row"</span>, <span class="string">"column"</span>, <span class="string">"value"</span>, <span class="string">"row_token"</span>, <span class="string">"col_token"</span>],</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#.title(f"Layer {layer} Head {head}")</span></span><br><span class="line">        .properties(height=<span class="number">400</span>, width=<span class="number">400</span>, title=<span class="string">f"Layer <span class="subst">{layer}</span> Head <span class="subst">{head}</span>"</span>)</span><br><span class="line">        .interactive()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_all_attention_maps</span>(<span class="params">attn_type: <span class="built_in">str</span>, layers: <span class="built_in">list</span>[<span class="built_in">int</span>], heads: <span class="built_in">list</span>[<span class="built_in">int</span>], row_tokens: <span class="built_in">list</span>, col_tokens, max_sentence_len: <span class="built_in">int</span></span>):</span><br><span class="line">    charts = []</span><br><span class="line">    <span class="keyword">for</span> layer <span class="keyword">in</span> layers:</span><br><span class="line">        rowCharts = []</span><br><span class="line">        <span class="keyword">for</span> head <span class="keyword">in</span> heads:</span><br><span class="line">            rowCharts.append(attn_map(attn_type, layer, head, row_tokens, col_tokens, max_sentence_len))</span><br><span class="line">        charts.append(alt.hconcat(*rowCharts))</span><br><span class="line">    <span class="keyword">return</span> alt.vconcat(*charts)</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ul>
<p>整个流程代码如下所是： </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">device = torch.device(<span class="string">'cuda'</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">'cpu'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'Using device: <span class="subst">{device}</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> load_next_val_batch</span><br><span class="line">batch, encoder_input_tokens, decoder_input_tokens = load_next_val_batch(val_dataloader, tokenizer_src, tokenizer_tgt, device)</span><br><span class="line">model.to(device)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> train <span class="keyword">import</span> greedy_decode</span><br><span class="line">model_out = greedy_decode(model, batch[<span class="string">'encoder_input'</span>].to(device), batch[<span class="string">'encoder_mask'</span>].to(device), tokenizer_src, tokenizer_tgt, config[<span class="string">'src_seq_len'</span>], device)</span><br><span class="line">display(model_out)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> altair <span class="keyword">as</span> alt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">layers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">heads = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">sentence_len = encoder_input_tokens.index(<span class="string">"[PAD]"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Encoder Self-Attention</span></span><br><span class="line"><span class="built_in">map</span> = get_all_attention_maps(<span class="string">"encoder"</span>, layers, heads, encoder_input_tokens, encoder_input_tokens, <span class="built_in">min</span>(<span class="number">20</span>, sentence_len))</span><br><span class="line"><span class="built_in">map</span>.save(<span class="string">'chart.png'</span>, ppi=<span class="number">200</span>)</span><br></pre></td></tr></tbody></table></figure> <img alt="Encoder Attention Score可视化图" data-src="/2025/01/02/Visualization-Of-Transformer-s-Attention-Score/encoder_attention_score.png"><p></p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Deep Learning</category>
        <category>Pytorch</category>
        <category>Transformer</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Tutorials</tag>
        <tag>Pytorch</tag>
        <tag>Transformer</tag>
        <tag>Attention</tag>
        <tag>Visualization</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning Notes Of Pytorch</title>
    <url>/2025/01/03/Learning-Notes-Of-Pytorch/</url>
    <content><![CDATA[<html><head></head><body><p><strong>Pytorch</strong>是开源的深度学习框架，由Facebook的Deep Learning Team开发，2016年发布。本文主要记录<strong>Pytorch</strong>学习过程中的一些知识点。 <span id="more"></span></p>
<h2 id="tensor维度操作">Tensor维度操作</h2>
<h3 id="flatten">flatten</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">torch.flatten(<span class="built_in">input</span>, start_dim=<span class="number">0</span>, end_dim=-<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>将输入张量展平，从<code>start_dim</code>到<code>end_dim</code>的维度展平。 参数说明：</p>
<ul>
<li>input：输入的张量。</li>
<li>start_dim：开始展平的维度，默认为 0。</li>
<li>end_dim：结束展平的维度，默认为 -1，表示最后一个维度。</li>
</ul>
<h3 id="unsqueeze">unsqueeze</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">torch.unsqueeze(<span class="built_in">input</span>, dim)</span><br></pre></td></tr></tbody></table></figure>
<p>在指定维度上增加一个维度，维度大小为1。 参数说明：</p>
<ul>
<li>input：输入的张量。</li>
<li>dim：要增加的维度。</li>
</ul>
<h3 id="squeeze">squeeze</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">torch.squeeze(<span class="built_in">input</span>, dim=<span class="literal">None</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>删除张量中所有大小为1的维度。 参数说明：</p>
<ul>
<li>input：输入的张量。</li>
<li>dim：要删除的维度，默认为 None，表示删除所有大小为1的维度。</li>
</ul>
<h3 id="transpose">transpose</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">torch.transpose(<span class="built_in">input</span>, dim0, dim1)</span><br></pre></td></tr></tbody></table></figure>
<p>交换张量的两个维度。 参数说明：</p>
<ul>
<li>input：输入的张量。</li>
<li>dim0：要交换的第一个维度。</li>
<li>dim1：要交换的第二个维度。</li>
</ul>
<h3 id="permute">permute</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">torch.permute(<span class="built_in">input</span>, dims)</span><br></pre></td></tr></tbody></table></figure>
<p>重新排列张量的多个维度。 参数说明：</p>
<ul>
<li>input：输入的张量。</li>
<li>dims：新的维度顺序。</li>
</ul>
<h3 id="einsum">einsum</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">x = torch.einsum(<span class="string">'nhwpqc-&gt;nchpwq'</span>, x)</span><br></pre></td></tr></tbody></table></figure>
<p>通过爱因斯坦求和约定计算张量的各种操作。</p>
<h2 id="tensor排序操作">Tensor排序操作</h2>
<h3 id="argmax">argmax</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">torch.argmax(<span class="built_in">input</span>, dim=<span class="literal">None</span>, keepdim=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>返回张量中指定维度上最大值的索引。 参数说明：</p>
<ul>
<li>input：输入的张量。</li>
<li>dim：指定维度，默认为 None，表示所有维度。</li>
<li>keepdim：是否保持维度，默认为 False。</li>
</ul>
<h3 id="topk">topk</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">torch.topk(<span class="built_in">input</span>, k, dim=<span class="literal">None</span>, largest=<span class="literal">True</span>, <span class="built_in">sorted</span>=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>返回张量中指定维度上k个最大值的索引和值。 参数说明：</p>
<ul>
<li>input：输入的张量。</li>
<li>k：返回的最大值的数量。</li>
<li>dim：指定维度，默认为 None，表示所有维度。</li>
<li>largest：是否返回最大值，默认为 True。</li>
</ul>
<h3 id="sort">sort</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">torch.sort(<span class="built_in">input</span>, dim=<span class="literal">None</span>, descending=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>对张量进行排序，返回排序后的张量和索引。 参数说明：</p>
<ul>
<li>input：输入的张量。</li>
<li>dim：指定维度，默认为 None，表示所有维度。</li>
<li>descending：是否降序排序，默认为 False。</li>
</ul>
<h3 id="argsort">argsort</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">torch.argsort(<span class="built_in">input</span>, dim=<span class="literal">None</span>, descending=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>对张量进行排序，返回排序后的索引。 参数说明：</p>
<ul>
<li>input：输入的张量。</li>
<li>dim：指定维度，默认为 None，表示所有维度。</li>
<li>descending：是否降序排序，默认为 False。</li>
</ul>
<h2 id="tensor数学操作">Tensor数学操作</h2>
<h3 id="register_buffer">register_buffer</h3>
<p>在 PyTorch 中，register_buffer 是一个用于注册缓冲区（buffer）的方法。缓冲区是那些不需要进行梯度计算的张量，通常用于保存模型的状态信息或常量数据。与参数（parameters）不同，缓冲区不会被优化器更新，但它们会被保存和加载到模型的状态字典（state dict）中。</p>
<p>register_buffer 的作用:</p>
<ul>
<li>保存状态信息：缓冲区可以保存一些不参与训练但需要随模型一起保存和加载的数据，例如批量归一化层中的运行均值和方差、位置编码等。</li>
<li>不参与梯度计算：缓冲区中的张量不会被自动求导机制追踪，因此不会占用额外的显存来存储梯度信息。</li>
<li>自动管理设备：缓冲区会跟随模型移动到不同的设备（如 CPU 或 GPU），确保其始终与模型的其他部分保持一致。</li>
<li>包含在模型的状态字典中：当调用 model.state_dict() 时，缓冲区会被包含在返回的字典中，从而可以在保存和加载模型时一并处理。</li>
</ul>
<h3 id="convtranspose2d">convTranspose2d</h3>
<p>转置卷积操作，也称为反卷积操作，用于将输入张量进行上采样，从而生成更大的输出张量。转置卷积操作与普通卷积操作相反，普通卷积操作是将输入张量进行下采样，从而生成更小的输出张量。 具体操作细节可以参照这篇文章<a href="https://numbersmithy.com/understanding-transposed-convolutions-in-pytorch/">Understanding transposed convolutions in PyTorch</a></p>
<h2 id="激活函数">激活函数</h2>
<h3 id="gelu">GELU</h3>
<p><code>GELU</code>（Gaussian Error Linear Unit）是深度学习中常用的激活函数，它结合了<code>ReLU</code>和<code>tanh</code>函数的优势，并具有更好的梯度传播特性。<code>GELU</code>函数的数学表达式为： <span class="math display">\[
GELU(x) = x \cdot \Phi(x)
\]</span> 其中，<span class="math inline">\(\Phi(x)\)</span> 是标准正态分布的累积分布函数（CDF）。<code>GELU</code>函数在深度学习模型中广泛使用，因为它可以有效地缓解梯度消失问题，并提高模型的性能。</p>
<p>GELU函数相对于RELU函数的优势再于，在x=0处，GELU函数的导数是1，而RELU函数的导数在x=0处是0，这会导致梯度消失问题。GELU函数在x=0处有平滑的过渡，使得梯度在x=0处不会消失，从而提高了模型的训练效果。</p>
<p>！<a href="gelu.png">GELU激活函数曲线图</a></p>
<h2 id="torchvision">TorchVision</h2>
<h3 id="transforms">transforms</h3>
<p><code>torchvision.transforms</code> 是 PyTorch 提供的一个模块，用于对图像进行预处理和增强。它提供了一系列常用的图像变换操作，如裁剪、缩放、旋转、翻转、归一化等。这些变换操作可以用于数据增强，以提高模型的泛化能力。</p>
<p>以下是一些常用的 <code>torchvision.transforms</code> 操作：</p>
<ol type="1">
<li><strong>裁剪（Crop）</strong>：从图像中裁剪出指定大小的区域。</li>
<li><strong>缩放（Resize）</strong>：将图像缩放到指定的大小。</li>
<li><strong>旋转（Rotate）</strong>：将图像旋转指定角度。</li>
<li><strong>翻转（Flip）</strong>：将图像左右翻转或上下翻转。</li>
<li><strong>正则化（Normalize）</strong>：将图像像素值归一化到指定范围。</li>
<li><strong>转换颜色空间（ColorJitter）</strong>：对图像的颜色进行随机调整，如亮度、对比度、饱和度和色调。</li>
<li><strong>转换通道顺序（ToTensor）</strong>：将图像从 PIL 或 NumPy 数组格式转换为 PyTorch 张量格式。</li>
<li><strong>添加噪声（AddNoise）</strong>：向图像中添加随机噪声。</li>
<li><strong>随机裁剪（RandomCrop）</strong>：从图像中随机裁剪出指定大小的区域。</li>
<li><strong>随机旋转（RandomRotation）</strong>：将图像随机旋转指定角度。</li>
</ol>
<p>通过<strong>Compose</strong> 操作可以将多个变换操作组合成一个变换操作。</p>
<h2 id="模型保存">模型保存</h2>
<h3 id="pytorch-jit优化">PyTorch JIT优化</h3>
<p><code>PyTorch JIT</code>（Just-In-Time 编译）提供了针对模型加速和优化的功能，<code>TorchScript</code> 是其核心技术之一，用于将 PyTorch 动态计算图转化为静态图以实现更高效的执行。JIT 格式（<code>.pt</code> 或 <code>.jit</code> 文件）在保存和执行模型时具备以下优化：</p>
<ol type="1">
<li><strong>图优化（Graph Optimization）</strong></li>
</ol>
<p>JIT 模型在编译和执行时会进行以下图级优化： - <strong>算子融合（Operator Fusion）</strong>：将多个算子（如卷积和 ReLU）合并为一个，以减少内存访问和计算开销。例如，将 <code>Conv2d</code> 和 <code>BatchNorm</code> 融合。 - <strong>常量折叠（Constant Folding）</strong>：将编译时已知的常量值计算出结果，从而减少运行时的计算。 - <strong>死代码消除（Dead Code Elimination）</strong>：删除未使用的计算和变量，以减小模型规模和提高运行速度。</p>
<ol start="2" type="1">
<li><strong>内存优化</strong></li>
</ol>
<ul>
<li><strong>内存分配优化</strong>：JIT 运行时管理内存使用，减少不必要的内存分配和释放操作，降低内存分配的开销。</li>
<li><strong>Tensor 内存复用</strong>：避免不必要的张量拷贝和中间结果的存储，提升内存利用效率。</li>
</ul>
<ol start="3" type="1">
<li><strong>静态图执行（Static Graph Execution）</strong> TorchScript 将动态计算图编译为静态图，提供以下优势：</li>
</ol>
<ul>
<li><strong>消除 Python 解释器开销</strong>：TorchScript 代码运行在 C++ 后端而不是 Python 解释器，减少解释器的调用开销。</li>
<li><strong>跨平台部署</strong>：生成的 JIT 模型可以在支持 C++ API 的平台运行，无需依赖 Python 环境。</li>
</ul>
<ol start="4" type="1">
<li><strong>计算优化</strong></li>
</ol>
<ul>
<li><strong>多线程并行化</strong>：JIT 模型能更好地利用多线程进行并行计算。</li>
<li><strong>矢量化</strong>：生成的代码可以利用底层硬件指令集（如 SIMD）进行矢量化计算，提升处理速度。</li>
</ul>
<ol start="5" type="1">
<li><strong>更好的硬件支持</strong> TorchScript 支持对硬件加速器（如 GPU、TPU）的专门优化：</li>
</ol>
<ul>
<li><strong>CUDA 核心优化</strong>：在 GPU 上自动选择更高效的 CUDA 核。</li>
<li><strong>张量核心（Tensor Core）利用</strong>：在支持 Tensor Core 的硬件上自动启用更快的矩阵乘法和卷积操作。</li>
</ul>
<ol start="6" type="1">
<li><strong>序列化和部署优化</strong></li>
</ol>
<ul>
<li><p><strong>更小的模型文件</strong>：TorchScript JIT 格式比传统 Python 模型的依赖项少，生成的文件体积通常更小。</p></li>
<li><p><strong>跨语言支持</strong>：JIT 编译模型生成的文件可以通过 C++、Java 或其他语言加载和运行，使得部署更加灵活。</p></li>
<li><p>总结 JIT 优化使得 PyTorch 模型在推理阶段速度更快、内存利用率更高，且具有跨平台和跨语言的部署能力。这些特性对于生产环境中的深度学习模型部署至关重要。</p></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Deep Learning</category>
        <category>Pytorch</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Tutorials</tag>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Roadmap To Learn Large Language Model Of GPT Series</title>
    <url>/2024/12/21/Roadmap-To-Learn-Large-Language-Model-Of-GPT-Series/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要是OpenAI的GPT系列论文的阅读笔记。</p>
<span id="more"></span>
<h2 id="gpt-1-improving-language-understanding-by-generative-pre-training">GPT-1: Improving Language Understanding by Generative Pre-Training</h2>
<p>GPT-1的论文在2018年6月发布，GPT-1的模型参数量达到了1.17亿，训练数据量达到了40GB，训练成本达到了12.5万美元。 ## GPT-2: Language Models are Unsupervised Multitask Learners GPT-2的论文在2018年11月发布，GPT-2的模型参数量达到了1.5亿，训练数据量达到了1.5TB，训练成本达到了100万美元。 ## GPT-3: Language Models are Few-Shot Learners GPT-3的论文在2021年12月发布，GPT-3的模型参数量达到了1750亿，训练数据量达到了45TB，训练成本达到了1200万美元。GPT-3主要解决的是语言模型中的少样本学习问题。 ### Introduction * In-Context Learning In-Context Learning (ICL)是将预训练模型的文本输入作为一种任务具象化的形式，将自然语言指令或者示例作为条件，然后预测后面输出的文本。 * Zero-shot VS. One-shot VS. Few-shot Learning 取决于模型推理时输入的示例数量。</p>
<p><img alt="In-Context示例数量、模型大小与模型准确度的关系" data-src="/2024/12/21/Roadmap-To-Learn-Large-Language-Model-Of-GPT-Series/In-Context-Examples-Accuracy.png"> 从上图可以的出结论： 1. 模型参数量越大，模型的准确度越高。 2. 不需要梯度训练和微调，仅仅提供更多的In-Context示例，也能显著提升模型的准确度。 3. 模型参数量越大，In-Context示例数量的边际收益越大。 * 模型参数量 GPT-3最大模型的参数量是175B，还有125M和13B的小模型。 ### Approach GPT-3的预训练方法包括模型、数据和训练与GPT-2的预训练方法一致，仅仅是提升了模型和数据的规模和复杂度，并延长了训练时间。有以下四个点需要重点讨论： * 1. Fine-tuning Fine-tuning的好处是通过监督样本微调，可以显著提升在指定基准任务上的表现。 Fine-tuning的缺点是针对每一个任务，都需要准备数量足够多的监督样本，会降低模型在监督数据分布之外的泛化能力。 GPT-3更关注任务无关的性能表现，因此没有使用Fine-tuning。 * 2. Few-Shot Learning Few-Shot Learning指的是在模型推理阶段提供几个示例作为条件，并没有用这几个示例做微调和训练。 一个完整的示例包含了上下文和期望输出。 示例的数量从10到100不等，取决于GPT-3模型的上下文长度。 Few-Shot Learning的优点是显著降低了对于任务相关数据的依赖，并避免了模型受窄分布数据影响而泛化性降低的问题。 * 3. One-Shot Learning One-Shot Learning与Few-Shot Learning类似，在模型推理时只提供一个示例。它更接近于人类完成语言任务的方式。 * 4. Zero-Shot Learning Zero-Shot Learning指的是在模型推理时没有提供任何示例作为条件，仅仅提供语言指令描述任务。</p>
<figure>
<img alt="" data-src="/2024/12/21/Roadmap-To-Learn-Large-Language-Model-Of-GPT-Series/Few-One-Zero-Shot.png"><figcaption>Few-Shot VS. One-Shot VS. Zero-Shot VS. Fine-tuning</figcaption>
</figure>
<h4 id="models-and-architectures">Models and Architectures</h4>
<p>GPT-3的模型架构与GPT-2的模型架构类似，包括参数初始化方法、预正则化方法、可逆的Token化方法，不同的是Transformer中的Attention模式。GPT-3的Attention模式与Sparse Transformer类似。 为了验证不同模型大小对性能的影响，GPT-3总共训练了3个参数量级8个模型，具体如下图所是： <img alt="GPT-3模型参数量" data-src="/2024/12/21/Roadmap-To-Learn-Large-Language-Model-Of-GPT-Series/GPT-3-Model-Parameters.png"> GPT-3使用的Context Window为2048。 <span class="math display">\[embed\_size = n_{heads} \times d_{head}\]</span> 前向神经网络的参数量是Transformer特征向量的4倍，<span class="math inline">\(d_{ff} = 4 \times embed\_size\)</span>。 #### Training Datasets 用于训练GPT-3的数据集是Common Crawl,共计包含1TB字数的文本数据。为了保障数据集的质量做了如下处理： * 1. 根据与高质量语料的相似度进行过滤 * 2. 在文件层面进行了模糊去重 * 3. 添加了一些高质量的参考语料，包括扩展版本的WebText数据集、两个互联网书库（Books1和Book2）以及英文版的维基百科。 Common Crawl数据集涵盖了2016-2019年的Web数据，过滤前的文本数据约45TB，过滤后有570GB，约有4000亿个Tokens。 在训练的时候，质量越高的数据被采样的概率越高，共计用了3000亿个Tokens进行训练（Common Crawl数据集的采样率小于1）。 #### Training 大参数量的模型需要使用大的Batch Size和小的Learning Rate进行训练。 GPT-3是使用V100集群进行分布式训练的，使用了混合模型并行化的方式来节省内存，包括矩阵相乘并行化和层间并行化。</p>
<h3 id="results">Results</h3>
<p>当模型结构、训练数据和训练方法高效时，模型的性能表现与算力成正相关。 #### Language Modeling, Cloze, and Completion Tasks ##### Language Modeling GPT-3仅仅使用Zero-shot Learning进行语言建模,就在PTB数据集上拿到了SOTA。 ##### LAMBDA 该数据集预测一段话最后一个字，用此用于测试长范围的语言模型性能。 该数据集的测试分析表明，随着模型参数量的增加，模型的Few-Shot性能会显著提升。 <img alt="模型性能与参数量的关系" data-src="/2024/12/21/Roadmap-To-Learn-Large-Language-Model-Of-GPT-Series/Performance-wrt-Model-Size.png"></p>
<h4 id="translation">Translation</h4>
<p>GPT-2由于模型能力的限制，只在英文数据集上进行了训练。GPT-3的训练数据集有93%的英文数据，有7%的其他语言数据，包括法语、德语和罗马语。</p>
<h4 id="winograd-style-tasks">Winograd-Style Tasks</h4>
<p>Winograd-Style Tasks是NLP中的经典任务，主要是根据上下文的语义决定代词的含义。</p>
<h4 id="common-sense-reasoning">Common Sense Reasoning</h4>
<ul>
<li>PhysicalQA：物理知识推理</li>
<li>ARC：3-9年级科学考试中的多选题</li>
<li>OpenBookQA：阅读理解</li>
</ul>
<h4 id="reading-comprehension">Reading Comprehension</h4>
<h4 id="superglue">SuperGLUE</h4>
<h4 id="natural-language-inference">Natural Language Inference</h4>
<h4 id="synthetic-and-qualitative-tasks">Synthetic and Qualitative Tasks</h4>
<h5 id="arithmetic">Arithmetic</h5>
<h5 id="word-scrambling-and-manipulation-tasks">Word Scrambling and Manipulation Tasks</h5>
<ul>
<li>Cycle letters in word</li>
<li>Anagrams of all but first and last character</li>
<li>Anagrams of all but first and last two characters</li>
<li>Random insertion in word</li>
<li>Reversed words ##### SAT Analogies ##### News Article Generation 通过测试人类是否能区分文章是人写的还是大模型写的来评估大模型在这方面的能力。175B的GPT-3生成的文章参与测试的80个人判断准确率仅52%，意味着GPT-3生成的文章已经基本达到人类水平。 ##### Correcting English Grammar</li>
</ul>
<h4 id="measuring-and-preventing-memorization-of-benchmarks">Measuring and Preventing Memorization of Benchmarks</h4>
<p>由于训练模型的数据来自互联网，因此基准测试集中的测试数据很可能也包含在模型训练数据中。</p>
<h2 id="gpt-4-gpt-4-technical-report">GPT-4: GPT-4 Technical Report</h2>
<p>GPT-4是一个多模态大模型，可以同时处理文本和图像，并生成文本。 GPT-4是使用RLHF（Reinforcement Learning from Human Feedback）进行微调的。 GPT-4的贡献在于OpenAI开发了深度学习栈基础设置和最优化算法，让不同尺度的模型表现变得可以预测。基于这项技术，OpenAI可以以1/1000的算力训练和评估模型。 GPT-4训练的数据集来自2021年9月之前的数据。 Rule based reward models(RBRM)是GPT-4模型Zero-shot的分类器。这个模型在RLHF微调阶段提供额外的信号，来校准GPT-4的输出行为。 RBRM的输入包含三部分：1. Prompt；2. 模型的输出；3. 人类定义的评估规则集合。 ## 数据集 * <a href="https://commoncrawl.org/get-started">Common Crawl</a> - Over 250 billion pages spanning 17 years. - Free and open corpus since 2007. - Cited in over 10,000 research papers. - 3–5 billion new pages added each month. * <a href="https://paperswithcode.com/dataset/webtext">WebText</a> - WebText is an internal OpenAI corpus created by scraping web pages with emphasis on document quality. The authors scraped all outbound links from Reddit which received at least 3 karma. - WebText contains the text subset of these 45 million links. It consists of over 8 million documents for a total of 40 GB of text. - All Wikipedia documents were removed from WebText since it is a common data source for other datasets. * <a href="https://skylion007.github.io/OpenWebTextCorpus/">OpenWebText</a> - The release of a beta version of Open WebText – an open source effort to reproduce OpenAI’s WebText dataset. - <a href="https://huggingface.co/datasets/Skylion007/openwebtext">Download</a> * <a href="https://catalog.ldc.upenn.edu/LDC99T42">Penn TreeBank(PTB)</a> - The Penn Treebank (PTB) project selected 2,499 stories from a three year Wall Street Journal (WSJ) collection of 98,732 stories for syntactic annotation. These 2,499 stories have been distributed in both Treebank-2 (LDC95T7) and Treebank-3 (LDC99T42) releases of PTB. Treebank-2 includes the raw text for each story. Three "map" files are available in a compressed file (pennTB_tipster_wsj_map.tar.gz) as an additional download for users who have licensed Treebank-2 and provide the relation between the 2,499 PTB filenames and the corresponding WSJ DOCNO strings in TIPSTER. * <a href="https://zenodo.org/records/2630551#.YFJVaWT7S_w">LAMBDA</a> - We introduce LAMBADA, a dataset to evaluate the capabilities of computational models for text understanding by means of a word prediction task. LAMBADA is a collection of narrative passages sharing the characteristic that human subjects are able to guess their last word if they are exposed to the whole passage, but not if they only see the last sentence preceding the target word. To succeed on LAMBADA, computational models cannot simply rely on local context, but must be able to keep track of information in the broader discourse. We show that LAMBADA exemplifies a wide range of linguistic phenomena, and that none of several state-of-the-art language models reaches accuracy above 1% on this novel benchmark. We thus propose LAMBADA as a challenging test set, meant to encourage the development of new models capable of genuine understanding of broad context in natural language text. * <a href="https://rowanzellers.com/hellaswag/">HellaSwag</a> - Pick the best ending to the context. - We achieve this via Adversarial Filtering (AF), a data collection paradigm wherein a series of discriminators iteratively select an adversarial set of machine-generated wrong answers. * <a href="https://huggingface.co/datasets/Salesforce/wikitext">WikiText-103</a> - The WikiText language modeling dataset is a collection of over 100 million tokens extracted from the set of verified Good and Featured articles on Wikipedia. The dataset is available under the Creative Commons Attribution-ShareAlike License. - Compared to the preprocessed version of Penn Treebank (PTB), WikiText-2 is over 2 times larger and WikiText-103 is over 110 times larger. - The WikiText dataset also features a far larger vocabulary and retains the original case, punctuation and numbers - all of which are removed in PTB. As it is composed of full articles, the dataset is well suited for models that can take advantage of long term dependencies. * <a href="https://www.gutenberg.org/">Books1</a> - OpenAI用于训练GPT-3的图书数据集，因为版权原因，数据集为非开源。 * <a href="https://www.gutenberg.org/">Books2</a> - OpenAI用于训练GPT-3的图书数据集，因为版权原因，数据集为非开源。 * <a href="https://huggingface.co/datasets/LSDSem/story_cloze">StoryCloze</a> - This dataset proposes a new framework for evaluating story understanding and script learning: the 'Story Cloze Test'. This test requires a system to choose the correct ending to a four-sentence story. - It contains a new corpus of ~50k five-sentence commonsense stories, ROCStories, to enable this evaluation. - This corpus is unique in two ways: (1) it captures a rich set of causal and temporal commonsense relations between daily events, and (2) it is a high quality collection of everyday life stories that can also be used for story generation. * <a href="https://ai.google.com/research/NaturalQuestions">Natural Questions</a> - To help spur development in open-domain question answering, we have created the Natural Questions (NQ) corpus, along with a challenge website based on this data. - The NQ corpus contains questions from real users, and it requires QA systems to read and comprehend an entire Wikipedia article that may or may not contain the answer to the question. - The inclusion of real user questions, and the requirement that solutions should read an entire page to find the answer, cause NQ to be a more realistic and challenging task than prior QA datasets. * <a href="https://worksheets.codalab.org/worksheets/0xba659fe363cb46e7a505c5b6a774dc8a">WebQuestions</a> - This dataset consists of 6,642 question/answer pairs. - The questions are supposed to be answerable by Freebase, a large knowledge graph. - The questions are mostly centered around a single named entity. - The questions are popular ones asked on the web (at least in 2013). * <a href="https://nlp.cs.washington.edu/triviaqa/">TriviaQA</a> - TriviaQA is a reading comprehension dataset containing over 650K question-answer-evidence triples. - TriviaQA includes 95K question-answer pairs authored by trivia enthusiasts and independently gathered evidence documents, six per question on average, that provide high quality distant supervision for answering the questions. * <a href="https://cs.nyu.edu/~davise/papers/WinogradSchemas/WS.html">Winograd Schema Challenge</a> - The Winograd Schema Challenge (WSC) (Levesque, Davis, and Morgenstern 2011), a benchmark for commonsense reasoning, is a set of 273 expert-crafted pronoun resolution problems originally designed to be unsolvable for statistical models that rely on selectional preferences or word associations. * <a href="https://winogrande.allenai.org/">Winograde</a> - WinoGrande, a large-scale dataset of 44k problems, inspired by the original WSC design, but adjusted to improve both the scale and the hardness of the dataset. * <a href="">PhysicalQA</a> - PIQA is a dataset for commonsense reasoning, and was created to investigate the physical knowledge of existing models in NLP. * <a href="https://github.com/google-research-datasets/arc">ARC</a> * <a href="https://stanfordnlp.github.io/coqa/">CoQA</a> * <a href="https://rajpurkar.github.io/SQuAD-explorer/">QuAC</a> * <a href="https://github.com/google-research-datasets/drop">DROP</a> * <a href="">RACE</a> * <a href="https://rajpurkar.github.io/SQuAD-explorer/">SQuAD</a> * <a href="https://huggingface.co/datasets/webarchive/resolve/main/multinews.jsonl">MultiNews</a> * <a href="https://openbookqa.org/">OpenBookQA</a> * <a href="https://github.com/tliuhuan/COPA">COPA</a> * <a href="https://github.com/allenai/record">ReCoRD</a> * <a href="https://huggingface.co/datasets/webarchive/resolve/main/boolq.jsonl">BoolQ</a> * <a href="https://huggingface.co/datasets/webarchive/resolve/main/multiRC.jsonl">MultiRC</a> * <a href="https://huggingface.co/datasets/webarchive/resolve/main/rte.jsonl">RTE</a> * <a href="https://huggingface.co/datasets/webarchive/resolve/main/anli.jsonl">ANLI</a> * <a href="https://huggingface.co/datasets/webarchive/resolve/main/triviaqa.jsonl">TruthfulQA</a></p>
<h2 id="附录">附录</h2>
<h3 id="bleu">BLEU</h3>
<p>BLEU（Bilingual Evaluation Understudy）是自然语言处理 (NLP) 中一种常用的评估指标，主要用于衡量机器翻译系统生成文本的质量，由IBM的研究人员Kenney和Manning在2002年提出。BLEU通过计算生成文本与参考文本之间的相似度来评估翻译的准确性和流畅性。，来评估机器翻译的质量。</p>
<p>以下是 BLEU 的核心思想及其计算方式：</p>
<h4 id="核心思想">核心思想</h4>
<ol type="1">
<li><p><strong>N-gram 匹配</strong>： BLEU 通过计算生成文本与参考文本之间的 n-gram 匹配情况来衡量质量。n-gram 是文本中连续 n 个词的序列（例如，"the cat" 是一个 2-gram）。BLEU 会分别计算 1-gram、2-gram、3-gram 等的匹配情况。</p></li>
<li><p><strong>精确率 (Precision)</strong>： BLEU 计算生成文本中 n-gram 与参考文本中 n-gram 的匹配比例。例如，如果生成文本包含 10 个 2-gram，而其中 6 个在参考文本中出现，则 2-gram 的精确率为 60%。</p></li>
<li><p><strong>惩罚机制 (Brevity Penalty)</strong>： 为了避免生成系统通过过于简短的输出（例如，重复参考中的高频词）获得高分，BLEU 引入了长度惩罚。如果生成文本的长度明显短于参考文本，BLEU 分数会降低。</p></li>
</ol>
<h4 id="计算步骤">计算步骤</h4>
<ol type="1">
<li><p><strong>计算 n-gram 的精确率</strong>： <span class="math display">\[
P_n = \frac{\text{生成文本中与参考文本匹配的 n-gram 数}}{\text{生成文本中的 n-gram 总数}}
\]</span></p></li>
<li><p><strong>几何平均精确率</strong>： 对不同 n-gram（如 1-gram 到 4-gram）的精确率取几何平均： <span class="math display">\[
\text{Precision}_{\text{geometric mean}} = \left( \prod_{n=1}^{N} P_n \right)^{1/N}
\]</span></p></li>
<li><p><strong>长度惩罚 (Brevity Penalty, BP)</strong>： 如果生成文本长度 ( c ) 小于参考文本长度 ( r )，引入惩罚因子： <span class="math display">\[
BP = 
\begin{cases} 
1 &amp; \text{如果 } c &gt; r \\ 
e^{1 - r/c} &amp; \text{如果 } c \leq r 
\end{cases}
\]</span></p></li>
<li><p><strong>最终 BLEU 分数</strong>： 将几何平均精确率和惩罚因子相结合： <span class="math display">\[
BLEU = BP \cdot \exp\left(\sum_{n=1}^{N} w_n \cdot \log P_n \right)
\]</span> 其中 ( w_n ) 是 n-gram 的权重（通常均分，如 ( w_n = 1/N )）。</p></li>
</ol>
<h4 id="优点与局限性">优点与局限性</h4>
<p><strong>优点</strong>： - 自动化评估，计算快速。 - 与参考翻译的直接比较，适用于多种语言。</p>
<p><strong>局限性</strong>： 1. <strong>忽略语义</strong>：BLEU 只关心 n-gram 的表面匹配，不考虑语义。 2. <strong>依赖参考翻译</strong>：如果参考翻译质量不好，BLEU 分数也会受到影响。 3. <strong>长文本适用性弱</strong>：对段落或整篇文章的翻译，BLEU 可能无法全面反映质量。</p>
<h3 id="bpe">BPE</h3>
<p>BPE（Byte Pair Encoding）是一种基于数据压缩技术的<strong>子词分割算法</strong>，广泛应用于自然语言处理（NLP）任务中，尤其是神经机器翻译和预训练语言模型。其核心思想是通过递归地合并频率最高的字符对或子词对，逐步构建适应语料分布的子词单元，从而在减少词表大小和处理未登录词（OOV）问题之间取得平衡。</p>
<h4 id="为什么需要-bpe">为什么需要 BPE？</h4>
<p>传统的分词方法（如按词分割或按字符分割）存在以下问题： 1. <strong>按词分割</strong>： - 词表会非常大，难以处理。 - 对低频词表现不好，容易导致 OOV（Out-Of-Vocabulary，未登录词）。 2. <strong>按字符分割</strong>： - 词表很小，但上下文关系的学习难度大。 - 生成的序列太长，影响模型效率。</p>
<p><strong>BPE</strong> 通过将高频的字符序列合并为子词单元，既降低了词表大小，又能捕捉常见词的整体信息，解决了上述问题。</p>
<h4 id="bpe-的基本原理">BPE 的基本原理</h4>
<p>BPE 的核心思想是<strong>基于频率的合并</strong>：从初始字符开始，将出现频率最高的字符对逐步合并为新的子词单元，直到达到预定义的分词单元数量或其他停止条件。</p>
<h5 id="算法步骤">算法步骤：</h5>
<ol type="1">
<li><strong>初始化</strong>：
<ul>
<li>将训练语料中的每个单词分解为字符序列，并在每个单词的末尾添加特殊标记（如 <code>▁</code> 表示词的开头）。</li>
<li>例如：<code>hello world</code> → <code>h e l l o ▁ w o r l d</code></li>
</ul></li>
<li><strong>统计字符对的频率</strong>：
<ul>
<li>计算语料中每对相邻字符的频率。</li>
<li>例如：<code>h e l l o</code> 中，<code>he</code>、<code>el</code>、<code>ll</code>、<code>lo</code> 是字符对，统计其出现次数。</li>
</ul></li>
<li><strong>合并频率最高的字符对</strong>：
<ul>
<li>找到频率最高的字符对，将其合并为新的子词单元。</li>
<li>例如：如果 <code>ll</code> 是频率最高的对，则合并为 <code>ll</code>，更新序列为：<code>h e ll o</code>.</li>
</ul></li>
<li><strong>重复步骤 2 和 3</strong>：
<ul>
<li>每次合并后重新统计频率，直到达到预定义的子词单元数量。</li>
</ul></li>
<li><strong>生成子词词表</strong>：
<ul>
<li>记录所有生成的子词单元，作为最终的分词词表。</li>
</ul></li>
</ol>
<h5 id="算法实现">算法实现：</h5>
<p>BPE 的核心可以表示为以下伪代码：</p>
<figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">输入：语料 D，目标子词表大小 V</span><br><span class="line">初始化：将 D 分解为字符序列 S</span><br><span class="line"><span class="keyword">while</span> |S| &lt; V:</span><br><span class="line">    统计 S 中所有相邻字符对的频率</span><br><span class="line">    找到频率最高的字符对 <span class="keyword">a</span>, b</span><br><span class="line">    将 <span class="keyword">a</span>, b 合并为新的子词单元 ab</span><br><span class="line">    更新 S 中的所有出现</span><br><span class="line">输出：最终的子词词表 S</span><br></pre></td></tr></tbody></table></figure>
<h5 id="示例">示例</h5>
<p>假设我们对以下单词应用 BPE：<code>low</code>, <code>lowest</code>, <code>new</code>, <code>newer</code>.</p>
<ol type="1">
<li><p><strong>初始状态</strong>： </p><figure class="highlight excel"><table><tbody><tr><td class="code"><pre><span class="line">l o w</span><br><span class="line">l o w e s <span class="built_in">t</span></span><br><span class="line"><span class="built_in">n</span> e w</span><br><span class="line"><span class="built_in">n</span> e w e r</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p><strong>统计字符对频率</strong>： </p><figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">l</span> o: <span class="number">2</span>, o w: <span class="number">2</span>, w e: <span class="number">2</span>, e s: <span class="number">1</span>, s t: <span class="number">1</span>, n e: <span class="number">2</span>, e w: <span class="number">2</span>, w e: <span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p><strong>合并频率最高的对</strong>： 假设 <code>o w</code> 频率最高，合并为 <code>ow</code>： </p><figure class="highlight excel"><table><tbody><tr><td class="code"><pre><span class="line">l ow</span><br><span class="line">l ow e s <span class="built_in">t</span></span><br><span class="line"><span class="built_in">n</span> e w</span><br><span class="line"><span class="built_in">n</span> e w e r</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p><strong>重复以上步骤</strong>：</p>
<ul>
<li>合并后重新统计频率并合并，直到达到预定义的子词单元数量。</li>
</ul></li>
</ol>
<h4 id="bpe-在-nlp-中的应用">BPE 在 NLP 中的应用</h4>
<ol type="1">
<li><strong>机器翻译</strong>：如 Transformer 中，BPE 被用作标准分词方法，以减少 OOV 现象并提高模型的泛化能力。</li>
<li><strong>预训练模型</strong>：如 GPT 和 BERT，BPE 用于构建子词词表，兼顾词表大小与覆盖率。</li>
<li><strong>多语言任务</strong>：BPE 在多语言模型中尤其有效，能够生成语言无关的统一词表。</li>
</ol>
<h4 id="优点与局限性-1">优点与局限性</h4>
<p><strong>优点</strong>： 1. <strong>词表大小灵活</strong>：通过限制词表大小 ( V )，可以在效率与表达能力之间取得平衡。 2. <strong>处理未登录词（OOV）</strong>：将罕见词分解为子词单元，从而减少 OOV 的发生。 3. <strong>语言无关性</strong>：BPE 是基于频率的统计方法，不依赖具体语言规则。</p>
<p><strong>局限性</strong>： 1. <strong>固定词表</strong>：训练好的子词词表对新领域的适应性有限。 2. <strong>上下文独立性</strong>：合并规则是基于全局频率的，而不考虑上下文。 3. <strong>生成效率</strong>：在解码过程中，可能导致生成序列较长，影响模型推断速度。</p>
<h4 id="总结">总结</h4>
<p>BPE 是一种简单而高效的分词算法，能够生成兼具词语信息和灵活性的子词单元，在 NLP 中广泛应用，是现代语言模型的关键预处理步骤之一。</p>
<h3 id="superglue基准测试集">SuperGLUE基准测试集</h3>
<p>SuperGLUE（<strong>A Stickier Benchmark for General-Purpose Language Understanding Systems</strong>）是自然语言处理（NLP）领域中的一个基准测试集，用于评估模型在广泛的语言理解任务上的能力。它是对 GLUE（General Language Understanding Evaluation）的改进版，专门设计来挑战基于预训练语言模型（如 BERT、GPT）在多种语言理解任务上的性能，涵盖更复杂的推理和语义理解问题。</p>
<h4 id="superglue-的核心组成"><strong>SuperGLUE 的核心组成</strong></h4>
<p>SuperGLUE 包含 8 个不同的任务，每个任务对应一种语言理解的核心能力。以下是每个任务的详细说明：</p>
<h5 id="boolean-question-boolq">1. <strong>Boolean Question (BoolQ)</strong></h5>
<ul>
<li><strong>任务类型</strong>：二分类任务（Yes/No）。</li>
<li><strong>目标</strong>：根据给定的段落和问题，判断答案是“是”还是“否”。</li>
<li><strong>输入</strong>：一个段落（context）和一个自然语言问题（question）。</li>
<li><strong>输出</strong>：布尔值（Yes/No）。</li>
<li><strong>数据来源</strong>：从真实用户查询生成的问题，例如维基百科。</li>
<li><strong>挑战</strong>：
<ul>
<li>问题的答案需要通过复杂推理和跨句子语义整合来确定。</li>
</ul></li>
</ul>
<hr>
<h5 id="commitmentbank-cb">2. <strong>CommitmentBank (CB)</strong></h5>
<ul>
<li><strong>任务类型</strong>：三分类任务（Entailment / Neutral / Contradiction）。</li>
<li><strong>目标</strong>：判断一个假设（hypothesis）是否从给定的文本段落（premise）中可以：
<ol type="1">
<li>推出（Entailment），</li>
<li>不确定（Neutral），</li>
<li>或矛盾（Contradiction）。</li>
</ol></li>
<li><strong>输入</strong>：一个前提句（premise）和一个假设句（hypothesis）。</li>
<li><strong>输出</strong>：三分类标签。</li>
<li><strong>数据来源</strong>：对语言学研究中的嵌套从句进行标注。</li>
<li><strong>挑战</strong>：
<ul>
<li>涉及复杂的语义推理和句法关系。</li>
</ul></li>
</ul>
<hr>
<h5 id="choice-of-plausible-alternatives-copa">3. <strong>Choice of Plausible Alternatives (COPA)</strong></h5>
<ul>
<li><strong>任务类型</strong>：因果推理（二选一）。</li>
<li><strong>目标</strong>：判断给定的句子是否是因果链中的原因或结果，并从两个备选答案中选择一个。</li>
<li><strong>输入</strong>：一个句子和两个备选答案。</li>
<li><strong>输出</strong>：选择一个更可能的答案（1 或 2）。</li>
<li><strong>数据来源</strong>：手动创建的因果推理数据。</li>
<li><strong>挑战</strong>：
<ul>
<li>涉及因果关系的推理。</li>
<li>候选答案具有一定的迷惑性。</li>
</ul></li>
</ul>
<hr>
<h5 id="multi-sentence-reading-comprehension-record">4. <strong>Multi-Sentence Reading Comprehension (ReCoRD)</strong></h5>
<ul>
<li><strong>任务类型</strong>：填空问题。</li>
<li><strong>目标</strong>：通过阅读长段落，选择填充问题空白的正确词语或短语。</li>
<li><strong>输入</strong>：一个长段落和包含空白的句子。</li>
<li><strong>输出</strong>：正确的词语或短语（从段落中选取）。</li>
<li><strong>数据来源</strong>：新闻语料库。</li>
<li><strong>挑战</strong>：
<ul>
<li>涉及跨句子关系的理解。</li>
<li>候选答案可能具有语义相似性，增加了任务难度。</li>
</ul></li>
</ul>
<hr>
<h5 id="reading-comprehension-with-commonsense-reasoning-rte">5. <strong>Reading Comprehension with Commonsense Reasoning (RTE)</strong></h5>
<ul>
<li><strong>任务类型</strong>：二分类任务（Entailment / Not Entailment）。</li>
<li><strong>目标</strong>：判断假设（hypothesis）是否可以从前提句（premise）中推出。</li>
<li><strong>输入</strong>：前提句和假设句。</li>
<li><strong>输出</strong>：二分类标签（Entailment / Not Entailment）。</li>
<li><strong>数据来源</strong>：多个现有的自然语言推理数据集。</li>
<li><strong>挑战</strong>：
<ul>
<li>推理涉及隐含的背景知识和常识。</li>
</ul></li>
</ul>
<hr>
<h5 id="winograd-schema-challenge-wic">6. <strong>Winograd Schema Challenge (WiC)</strong></h5>
<ul>
<li><strong>任务类型</strong>：词义消歧。</li>
<li><strong>目标</strong>：判断某个词在两个句子中的含义是否相同。</li>
<li><strong>输入</strong>：两个句子和目标词。</li>
<li><strong>输出</strong>：布尔值（Yes/No）。</li>
<li><strong>数据来源</strong>：词义标注和上下文信息。</li>
<li><strong>挑战</strong>：
<ul>
<li>涉及对多义词的准确语义判断。</li>
<li>考验模型对上下文细微差别的理解。</li>
</ul></li>
</ul>
<hr>
<h5 id="winograd-schema-challenge-wsc">7. <strong>Winograd Schema Challenge (WSC)</strong></h5>
<ul>
<li><strong>任务类型</strong>：共指消解。</li>
<li><strong>目标</strong>：判断代词或名词短语的指代对象。</li>
<li><strong>输入</strong>：一个句子，包含一个指代目标和两个候选对象。</li>
<li><strong>输出</strong>：正确的指代对象。</li>
<li><strong>数据来源</strong>：手工创建的共指消解数据。</li>
<li><strong>挑战</strong>：
<ul>
<li>考察模型对代词解析和语义常识的理解。</li>
</ul></li>
</ul>
<hr>
<h5 id="ax-b-broadcoverage-diagnostic">8. <strong>AX-b (BroadCoverage Diagnostic)</strong></h5>
<ul>
<li><strong>任务类型</strong>：对文本片段进行语言现象的诊断评估。</li>
<li><strong>目标</strong>：分析模型在特定语言现象（如逻辑推理或世界知识推理）上的表现。</li>
<li><strong>输入和输出</strong>：与其他任务类似，具体设计用于测试模型的弱点。</li>
<li><strong>挑战</strong>：
<ul>
<li>设计针对性强，旨在暴露模型局限。</li>
</ul></li>
</ul>
<h4 id="superglue-的评价方式"><strong>SuperGLUE 的评价方式</strong></h4>
<ol type="1">
<li><strong>任务指标</strong>：
<ul>
<li>每个任务有特定的评估指标（如准确率、F1 分数等）。</li>
</ul></li>
<li><strong>总体分数</strong>：
<ul>
<li>通过所有任务的加权平均分数评估模型整体性能。</li>
</ul></li>
<li><strong>人类基准</strong>：
<ul>
<li>超过 GLUE 基准的人类水平设置为 SuperGLUE 的参考基线。</li>
</ul></li>
</ol>
<h4 id="superglue-的意义"><strong>SuperGLUE 的意义</strong></h4>
<ul>
<li><strong>更高难度</strong>：SuperGLUE 设计了更复杂的语言理解任务，考验模型的推理能力、常识知识和语义理解。</li>
<li><strong>推动研究</strong>：提供了统一的评估框架，促进了更强大和通用的语言理解模型的开发。</li>
<li><strong>领域覆盖广</strong>：任务涉及多种语言理解能力，使模型需具备广泛的适应性。</li>
</ul>
<h4 id="模型挑战"><strong>模型挑战</strong></h4>
<p>虽然当前模型（如 T5、GPT-4 等）已经在部分任务上接近或超过人类水平，但在涉及常识推理、因果关系和细粒度语义分析的任务上，仍然存在改进空间。SuperGLUE 因此被视为推动 NLP 领域进步的重要基准之一。</p>
<h3 id="mmlu基准测试集">MMLU基准测试集</h3>
<p><strong>MMLU (Massive Multitask Language Understanding)</strong> 是一个用于评估语言模型多任务能力的基准测试集。它专门设计用于测试大语言模型（如 GPT 系列）的 <strong>多任务学习（multitask learning）</strong> 和 <strong>通用语言理解能力（general language understanding）</strong>。MMLU 基准测试集涵盖了多种不同类型的任务，从常见的分类、推理任务到更加专业的知识领域（如医学、法律等）的应用，能够全面地评估语言模型在各种场景下的表现。</p>
<h4 id="mmlu-基准测试集的构成"><strong>MMLU 基准测试集的构成</strong></h4>
<p>MMLU 基准测试集包括多种类型的任务，以下是几个主要类别的任务和一些常见的子任务：</p>
<ol type="1">
<li><strong>常识推理</strong>：
<ul>
<li>测试语言模型在日常常识方面的理解。</li>
<li>示例任务：回答关于世界常识的问题（如历史事件、人物、科学常识等）。</li>
</ul></li>
<li><strong>数学与逻辑推理</strong>：
<ul>
<li>包含算术、代数、几何等数学问题的解答。</li>
<li>示例任务：解决数学运算问题（例如基础的加减乘除，甚至更复杂的几何和代数问题）。</li>
</ul></li>
<li><strong>科学与技术理解</strong>：
<ul>
<li>测试模型在物理、化学、生物学等科学领域的知识理解。</li>
<li>示例任务：解答关于物理学原理、化学反应、生物学概念等问题。</li>
</ul></li>
<li><strong>专业领域知识</strong>：
<ul>
<li>涉及法律、医学、金融等专业领域的任务。</li>
<li>示例任务：法律案件分析、医学症状诊断、财务报告分析等。</li>
</ul></li>
<li><strong>语言学任务</strong>：
<ul>
<li>涉及语法、语义分析和推理的任务。</li>
<li>示例任务：句法分析、语义关系提取、情感分析等。</li>
</ul></li>
<li><strong>阅读理解与推理</strong>：
<ul>
<li>包括从文章或段落中提取信息并进行推理。</li>
<li>示例任务：阅读理解（给定一段文章后回答相关问题）和推理任务（基于文章进行逻辑推理）。</li>
</ul></li>
<li><strong>文化与历史</strong>：
<ul>
<li>任务涉及对文化、历史、地理和人类社会的理解。</li>
<li>示例任务：回答历史事件的具体细节或文化现象的解读。</li>
</ul></li>
</ol>
<h4 id="mmlu的主要特点"><strong>MMLU的主要特点</strong></h4>
<ul>
<li><strong>多样性</strong>：MMLU 涵盖了从基础的语言理解任务到复杂的推理、专业知识领域的任务，涉及多个领域和知识层面。</li>
<li><strong>难度范围广</strong>：包含了从容易到困难不等的任务，帮助测试模型在不同难度级别下的能力。</li>
<li><strong>高质量问题</strong>：问题通常经过精心设计，涵盖了广泛的知识，确保测试的全面性和代表性。</li>
<li><strong>标准化的评估</strong>：通过统一的任务和标准化的评分体系，可以比较不同语言模型在同一基准上的表现。</li>
</ul>
<h4 id="mmlu基准测试集的评价标准"><strong>MMLU基准测试集的评价标准</strong></h4>
<p>MMLU 基准测试的性能通常使用 <strong>准确率（Accuracy）</strong> 来衡量。对于每个任务，模型给出的答案会根据是否正确进行评分，最终通过加权平均计算出各任务的综合准确率。</p>
<ul>
<li><strong>任务的加权</strong>：MMLU 通常会为不同类型的任务设定不同的权重，以确保最终的评分能够准确反映模型的综合能力。</li>
<li><strong>样本量</strong>：每个任务中的问题通常有多个样本，这些样本被设计为具有挑战性的，确保评估结果具有代表性。</li>
</ul>
<h4 id="mmlu的应用"><strong>MMLU的应用</strong></h4>
<p>MMLU 的设计使其成为测试大型语言模型多任务能力和理解深度的标准工具。它的应用主要体现在以下几个方面：</p>
<ol type="1">
<li><strong>语言模型的综合能力评估</strong>：通过全面评估模型在多种任务中的表现，MMLU 可以帮助研究人员和工程师了解模型的通用语言理解能力。</li>
<li><strong>模型之间的比较</strong>：MMLU 提供了一个统一的测试标准，可以用来比较不同模型的性能，尤其是不同规模、架构的语言模型之间。</li>
<li><strong>多任务学习研究</strong>：MMLU 对于探索和优化多任务学习有重要意义。它帮助研究人员测试在多个任务上训练模型时的效果，评估模型如何从多个任务中进行泛化。</li>
</ol>
<h4 id="mmlu基准测试的例子"><strong>MMLU基准测试的例子</strong></h4>
<h5 id="例1常识推理任务"><strong>例1：常识推理任务</strong></h5>
<p>任务：哪个国家位于北美洲？ - 选项：A) 加拿大 B) 德国 C) 巴西 D) 中国 - 正确答案：A) 加拿大</p>
<h5 id="例2数学任务"><strong>例2：数学任务</strong></h5>
<p>任务：5x + 3 = 23, 求x的值。 - 选项：A) 3 B) 4 C) 5 D) 2 - 正确答案：B) 4</p>
<h5 id="例3法律任务"><strong>例3：法律任务</strong></h5>
<p>任务：根据美国宪法，谁是最高法院的法官？ - 选项：A) 总统 B) 最高法院首席法官 C) 美国国会 D) 各州州长 - 正确答案：B) 最高法院首席法官</p>
<h5 id="例4科学任务"><strong>例4：科学任务</strong></h5>
<p>任务：光合作用是如何发生的？ - 选项：A) 利用太阳光将水和二氧化碳转化为氧气和葡萄糖 B) 通过细胞呼吸 C) 通过蒸发 D) 通过化学反应 - 正确答案：A) 利用太阳光将水和二氧化碳转化为氧气和葡萄糖</p>
<h4 id="mmlu的挑战和改进"><strong>MMLU的挑战和改进</strong></h4>
<ol type="1">
<li><strong>任务设计的复杂性</strong>：随着语言模型变得越来越强大，测试集的任务设计也需要不断提升，以确保能够衡量模型的深度理解和推理能力。</li>
<li><strong>多样化的测试</strong>：MMLU 还可以进一步扩展，涵盖更多样化的领域和任务，尤其是跨模态任务（如图像、视频等）的结合。</li>
<li><strong>不平衡性</strong>：不同任务的难度不均衡，可能导致一些模型在某些任务上表现突出，而在另一些任务上表现较差。</li>
</ol>
<h4 id="总结-1"><strong>总结</strong></h4>
<p>MMLU（Massive Multitask Language Understanding）是一个综合性强、覆盖面广的基准测试集，旨在评估语言模型在各种任务上的表现。它通过涉及常识推理、数学、科学、法律等多种任务，全面衡量模型的多任务学习能力，成为衡量大规模语言模型通用能力的重要工具。</p>
</body></html>]]></content>
      <categories>
        <category>Notes</category>
        <category>Deep Learning</category>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>GPT</tag>
        <tag>LLM</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>Masked Auto Encoder (MAE) For Vision Transformer</title>
    <url>/2025/01/04/Masked-Auto-Encoder-MAE-For-Vision-Transformer/</url>
    <content><![CDATA[<html><head></head><body><p><a href="https://openaccess.thecvf.com/content/CVPR2022/papers/He_Masked_Autoencoders_Are_Scalable_Vision_Learners_CVPR_2022_paper.pdf">Masked Auto Encoder (MAE)</a>成功将<strong>Vision Transformer</strong>应用到了图像领域的自监督预训练中，并在多个视觉任务中取得了SOTA的表现，是视觉自监督预训练的重要突破。本文将介绍<strong>MAE</strong>的原理和实现细节，将重点介绍<strong>MAE</strong>相对于<a href="https://youngsonzhao.github.io/2024/07/05/Learning-Note-Of-Vision-Transformer/">Vision Transformer</a>和<a href="https://youngsonzhao.github.io/2024/12/23/Architecture-Of-Transformer-And-PyTorch-Implementation/">Transformer</a>的创新点。 <span id="more"></span></p>
<h2 id="整体结构">整体结构</h2>
<figure>
<img alt="" data-src="/2025/01/04/Masked-Auto-Encoder-MAE-For-Vision-Transformer/mae.png"><figcaption>MAE Vision Transformer模型架构图</figcaption>
</figure>
<p>相对于<strong>Vision Transformer</strong>，<strong>MAE</strong>的模型架构图如上所示，主要创新点如下：</p>
<ul>
<li><ol type="1">
<li>将图像的patches按照随机概率mask掉，在encoder的输入中仅保留未被mask的patches，随机mask的概率是75%。</li>
</ol></li>
<li><ol start="2" type="1">
<li>使用一个轻量级的decoder来处理encoder编码的未被mask的patches，和被mask的patches，来重建原始图像。</li>
</ol></li>
<li><ol start="3" type="1">
<li>encoder和decoder的大小是非对称的，由此可以提升非监督预训练的效率和效果。</li>
</ol></li>
<li><ol start="4" type="1">
<li>预训练结束后，decoder被丢弃，仅保留encoder，用于下游任务。</li>
</ol></li>
<li><ol start="5" type="1">
<li>MAE中可以使用global pooling来代替class token（可选的，通过参数配置）</li>
</ol></li>
<li><ol start="6" type="1">
<li>MAE中的position embedding是2D sin-cos embedding，而不是<strong>Vision Transformer</strong>中的learnable position embedding。</li>
</ol></li>
</ul>
<h2 id="核心模块">核心模块</h2>
<h3 id="random-masking">Random Masking</h3>
<p><strong>MAE</strong>最核心的模块是随机掩码生成模块，可以以指定概率随机生成掩码。 具体步骤如下所示：</p>
<ul>
<li><ol type="1">
<li>在batch和sequence维度上生成随机噪声，(batch_size, seq_len)</li>
</ol></li>
<li><ol start="2" type="1">
<li>使用argsort函数对随机噪声在sequence维度进行升序排序，得到升序排序结果的索引矩阵ids_shuffle，该索引矩阵记录的是排名在此处的元素在原有随机噪声矩阵中的位置，(batch_size, seq_len)</li>
</ol></li>
<li><ol start="3" type="1">
<li>继续使用argsort函数对索引矩阵进行升序排序，得到索引矩阵的索引矩阵ids_restore，该索引矩阵记录的是原有随机噪声矩阵的每个值得排名，(batch_size, seq_len)</li>
</ol></li>
<li><ol start="4" type="1">
<li>根据mask_ratio参数，从ids_shuffle中保留前len_keep个元素，得到被保留的元素的索引矩阵ids_keep，(batch_size, len_keep)</li>
</ol></li>
<li><ol start="5" type="1">
<li>使用gather函数，根据ids_keep的索引，从原始序列中生成masked的序列x_masked，(batch_size, len_keep, dim)</li>
</ol></li>
<li><ol start="6" type="1">
<li>在sequence维度生成一个前len_keep个值是0，后seq_len-len_keep个值是1的mask矩阵，维度为(batch_size, seq_len)，然后使用gather函数和ids_restore索引，生成掩码矩阵mask，(batch_size, seq_len)，其中mask中值为0的元素表示被保留的元素，值为1的元素表示被mask的元素</li>
</ol></li>
<li><ol start="7" type="1">
<li>返回被mask保留的序列x_masked，掩码矩阵mask，以及表明每个元素排名的ids_restore索引矩阵，其中</li>
</ol>
<ul>
<li>x_masked用于encoder编码器的输入</li>
<li>ids_restore在decoder中使用，用于将mask_token向量填充到被mask的序列Token中，融合encoder输出的序列Token特征，生成原始序列特征。</li>
<li>mask掩码矩阵在计算loss时使用，由于被mask掉的token对应的mask值是1,因此在计算loss时，仅计算被mask掉的token的loss. <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">random_masking</span>(<span class="params">self, x, mask_ratio</span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Perform per-sample random masking by per-sample shuffling.</span></span><br><span class="line"><span class="string">    Per-sample shuffling is done by argsort random noise.</span></span><br><span class="line"><span class="string">    x: [N, L, D], sequence</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    N, L, D = x.shape  <span class="comment"># batch, length, dim</span></span><br><span class="line">    len_keep = <span class="built_in">int</span>(L * (<span class="number">1</span> - mask_ratio))</span><br><span class="line">    </span><br><span class="line">    noise = torch.rand(N, L, device=x.device)  <span class="comment"># noise in [0, 1]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># sort noise for each sample</span></span><br><span class="line">    ids_shuffle = torch.argsort(noise, dim=<span class="number">1</span>)  <span class="comment"># ascend: small is keep, large is remove</span></span><br><span class="line">    ids_restore = torch.argsort(ids_shuffle, dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># keep the first subset</span></span><br><span class="line">    ids_keep = ids_shuffle[:, :len_keep]</span><br><span class="line">    x_masked = torch.gather(x, dim=<span class="number">1</span>, index=ids_keep.unsqueeze(-<span class="number">1</span>).repeat(<span class="number">1</span>, <span class="number">1</span>, D))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate the binary mask: 0 is keep, 1 is remove</span></span><br><span class="line">    mask = torch.ones([N, L], device=x.device)</span><br><span class="line">    mask[:, :len_keep] = <span class="number">0</span></span><br><span class="line">    <span class="comment"># unshuffle to get the binary mask</span></span><br><span class="line">    mask = torch.gather(mask, dim=<span class="number">1</span>, index=ids_restore)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x_masked, mask, ids_restore</span><br></pre></td></tr></tbody></table></figure></li>
</ul></li>
</ul>
<h3 id="encoder">Encoder</h3>
<p>Encoder就是使用ViT对x_masked进行编码，得到编码后的特征序列. 值的注意的是，在encoder中保留了class token。</p>
<h3 id="decoder">Decoder</h3>
<p>Decoder并不是将encoder输出的编码特征与输出序列进行cross attention，而是利用ids_restore索引矩阵将encoder输出的编码特征恢复至原有序列特征位置，被mask掉的序列特征统一用一个可学习的mask_token向量填充，然后进行decoder编码最终恢复原始图像。</p>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Deep Learning</category>
        <category>Pytorch</category>
        <category>Vision Transformer</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Tutorials</tag>
        <tag>Pytorch</tag>
        <tag>Vision Transformer</tag>
        <tag>Masked Auto Encoder</tag>
      </tags>
  </entry>
  <entry>
    <title>Architecture Of Transformer And PyTorch Implementation</title>
    <url>/2024/12/23/Architecture-Of-Transformer-And-PyTorch-Implementation/</url>
    <content><![CDATA[<html><head></head><body><p>本文详细介绍<a href="https://user.phil.hhu.de/~cwurm/wp-content/uploads/2020/01/7181-attention-is-all-you-need.pdf">Attention Is All You Need</a>论文中Transformer模型架构、各个模块的数学原理、输入输出、参数规模，以及PyTorch实现。 <span id="more"></span></p>
<h2 id="模型整体架构">模型整体架构</h2>
<p><img alt="Transformer模型结构图" data-src="/2024/12/23/Architecture-Of-Transformer-And-PyTorch-Implementation/transformer-architecture.png"> 原始的Transformer模型是<strong>编码器（Encoder）</strong>和<strong>解码器（Decoder）</strong>的经典结构，<strong>编码器（Encoder）</strong>和<strong>解码器（Decoder）</strong>分别由<span class="math inline">\(N_e\)</span>个<strong>Encoder Block</strong>和<span class="math inline">\(N_d\)</span>个<strong>Decoder Block</strong>残差堆叠组成。编码器的输入是源序列，尺寸是(batch_size, src_seq_len)，输出是Encoder Embedding，尺寸是(batch_size, src_seq_len, embed_size)，解码器的输入是目标序列，尺寸是(batch_size, tgt_seq_len)和Encoder Embedding，输出是Decoder Embedding，尺寸是(batch_size, seq_len, embed_size)。</p>
<ul>
<li>参考连接
<ul>
<li><a href="https://xiaosheng.blog/2022/06/28/use-pytorch-to-implement-transformer">使用 Pytorch 一步一步实现 Transformer Encoder</a></li>
<li><a href="https://mingchao.wang/crmAf7MS/">Transformer</a></li>
<li><a href="https://github.com/hkproj/pytorch-transformer/tree/main">pytorch-transformer</a></li>
<li><a href="https://www.youtube.com/watch?v=ISNdQcPhsts">Coding a Transformer from scratch on PyTorch, with full explanation, training and inference</a></li>
<li><a href="https://www.zhihu.com/question/347678607">如何理解Transformer论文中的positional encoding，和三角函数有什么关系？</a></li>
</ul></li>
</ul>
<h2 id="各模块数学原理与代码实现">各模块数学原理与代码实现</h2>
<h3 id="input-embedding"><strong>Input Embedding</strong></h3>
<p><strong>Input Embedding</strong>（输入嵌入）是将离散Token序列转换为连续向量序列的过程。Transformer模型的输入是文本字符串，首先利用<a href="">Tokenizer</a>将文本转换为Token序列，然后利用<a href="">nn.Embedding</a>将每一个Token保存为一个embed_size维的Embedding向量。<strong>nn.Embedding</strong>本质是一个Lookup Table，Key是Token，Value是Embedding向量，关键参数有两个，vocab_size表示词表中的Token数量, embed_size表示Embedding向量的维度。</p>
<p>Input Embedding是(vocab_size, embed_size)的参数矩阵，在模型训练时会同步更新该参数矩阵。如果想要冻结Input Embedding的参数矩阵，可以设置embedding.weight.requires_grad = False。Input Embedding的实现代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InputEmbedding</span>(nn.Module):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Embedding layer for input tokens.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vocab_size: <span class="built_in">int</span>, embed_size: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">"""Initialize the embedding layer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            vocab_size: size of the vocabulary</span></span><br><span class="line"><span class="string">            embed_size: size of the embedding vector</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            None</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="built_in">super</span>(InputEmbedding, self).__init__()</span><br><span class="line">        self.vocab_size = vocab_size</span><br><span class="line">        self.embed_size = embed_size</span><br><span class="line">        self.embedding = nn.Embedding(vocab_size, embed_size)</span><br><span class="line">        self.embedding.weight.data.uniform_(-<span class="number">0.1</span>, <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="string">"""Forward pass of the embedding layer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            x: input tensor of shape (batch_size, seq_len)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            embedded tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.embedding(x) * math.sqrt(self.embed_size)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="positional-encoding"><strong>Positional Encoding</strong></h3>
<p><strong>Positional Encoding</strong>（位置编码）是Transformer模型中用于给每个Token添加位置信息的机制。由于Transformer模型中没有循环神经网络（RNN）中的序列位置顺序信息，因此需要通过位置编码来提供序列的顺序信息，在论文中使用了正弦和余弦函数来编码位置信息。 在 Transformer 模型中，<strong>Positional Encoding (位置编码)</strong> 用于为输入序列引入位置信息，以弥补自注意力机制（Self-Attention）缺少序列顺序感知能力的不足。它的设计基于正弦和余弦函数的数学原理，使得不同位置的编码具有可解析的相对位置信息。</p>
<h4 id="数学公式"><strong>数学公式</strong></h4>
<p>给定一个位置 <span class="math inline">\(pos\)</span> 和一个维度 <span class="math inline">\(i\)</span>（嵌入向量的第 <span class="math inline">\(i\)</span> 个维度），位置编码的值由以下公式定义： <span class="math display">\[
PE(pos, k) = 
\begin{cases} 
\sin\left(\frac{1}{10000^{\frac{2i}{embed\_size}}} * pos\right)&amp; \text{if } k = 2i \\
\cos\left(\frac{1}{10000^{\frac{2i}{embed\_size}}} * pos\right)&amp; \text{if } k = 2i+1
\end{cases}
\]</span> 其中 * <span class="math inline">\(pos\)</span> 是Token在序列中的位置（从 0 开始，最大值是seq_len - 1）。 * <span class="math inline">\(k\)</span> 是Embedding的维度索引（从 0 开始，最大值是embed_size - 1）。 * <span class="math inline">\(embed\_size\)</span> 是Embedding的维度（embed_size）。 <img alt="正弦位置编码示意图" data-src="/2024/12/23/Architecture-Of-Transformer-And-PyTorch-Implementation/sine_frequencies_plot.png"></p>
<h4 id="位置编码可视化"><strong>位置编码可视化</strong></h4>
<p>不同序列长度和嵌入特征维度下的位置编码可视化如下： <img alt="位置编码可视化（embed_size=512, seq_len=256）" data-src="/2024/12/23/Architecture-Of-Transformer-And-PyTorch-Implementation/positional_encoding_heatmap.png"> <img alt="位置编码可视化（embed_size=256, seq_len=128）" data-src="/2024/12/23/Architecture-Of-Transformer-And-PyTorch-Implementation/positional_encoding_heatmap_1.png"> <img alt="位置编码可视化（embed_size=128, seq_len=64）" data-src="/2024/12/23/Architecture-Of-Transformer-And-PyTorch-Implementation/positional_encoding_heatmap_2.png"></p>
<ol type="1">
<li><strong>频率范围：</strong>
<ul>
<li>分母中的 <span class="math inline">\(10000^{\frac{2i}{embed\_size}}\)</span> 利用指数函数设计了一个频率缩放机制，使得高维度对应的频率更低，低维度对应的频率更高。</li>
<li>这种设计让每个维度的编码值具有不同的频率特性，确保编码中包含丰富的位置信息。</li>
<li>对于每个维度 <span class="math inline">\(i\)</span>，通过不同的频率编码（由 <span class="math inline">\(10000^{\frac{2i}{embed\_size}}\)</span> 控制）生成一个独特的信号，使得高维信息捕获细粒度的相对位置信息。</li>
<li>嵌入特征的维度（embed_size）越高，位置编码的粒度越细，信息丰富度越大。</li>
</ul></li>
<li><strong>正弦与余弦函数：</strong>
<ul>
<li>使用正弦和余弦为奇数维度和偶数维度生成不同的变化模式。</li>
<li>正弦和余弦函数可以保证位置编码的值在[-1, 1]范围内。</li>
</ul></li>
</ol>
<h4 id="核心性质"><strong>核心性质</strong></h4>
<ol type="1">
<li><strong>绝对与相对位置：</strong>
<ul>
<li>位置编码是对所有位置<span class="math inline">\((pos, k)\)</span>的绝对编码，且编码唯一（由嵌入特征维度决定）。</li>
<li>位置编码的设计确保了任意两个位置之间的相对位置信息可以被简单计算： <span class="math display">\[
PE(pos_1) - PE(pos_2)
\]</span> 这一性质帮助模型直接捕获相对位置。</li>
</ul></li>
<li><strong>序列长度无关：</strong>
<ul>
<li>由于正弦函数和余弦函数是周期性函数，其频率系数由嵌入特征的维度（embed_size）和嵌入特征的索引（<span class="math inline">\(2i\)</span>）决定，因此位置编码的值与序列长度无关，位置编码可以为任意长度的序列编码，且相同序列索引（<span class="math inline">\(pos\)</span>）的位置编码相同。</li>
<li></li>
</ul></li>
<li><strong>无需训练：</strong>
<ul>
<li>位置编码的值是通过公式计算的，无需学习参数。这减少了模型参数量，同时保持了良好的泛化能力。</li>
</ul></li>
</ol>
<h3 id="改进与替代方法"><strong>改进与替代方法</strong></h3>
<p>尽管正弦-余弦位置编码有诸多优点，但在后续研究中，也提出了许多替代方法：</p>
<ol type="1">
<li><p><strong>可学习的位置编码：</strong><br>
通过将位置编码视为可学习的参数矩阵，使模型在特定任务上更具适应性。</p></li>
<li><p><strong>相对位置编码（Relative Positional Encoding）：</strong><br>
提取位置之间的相对关系，如 Transformer-XL 和 T5 中的改进版本。</p></li>
<li><p><strong>旋转位置编码（RoPE, Rotary Positional Embedding）：</strong><br>
在 Transformers 中通过旋转操作高效捕获相对位置信息。</p></li>
</ol>
<h4 id="代码实现"><strong>代码实现</strong></h4>
<p>为了提升计算效率，将位置编码中的频率系数做如下优化： <span class="math display">\[
\begin{align*}
\frac{1}{10000^{\frac{2i}{embed\_size}}}
  &amp;= \exp(\log(\frac{1}{10000^{\frac{2i}{embed\_size}}})) \\
  &amp;= \exp(\log({10000^{\frac{2i}{embed\_size}}}^{-1})) \\
  &amp;= \exp(-1 * \log({10000^{\frac{2i}{embed\_size}}})) \\
  &amp;= \exp(-1 * {\frac{2i}{embed\_size}} * \log(10000)) \\
  &amp;= \exp(-{\frac{\log(10000)}{embed\_size}} * {2i})
\end{align*}
\]</span> </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PositionalEncoding</span>(nn.Module):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Positional encoding layer for input tokens.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, embed_size: <span class="built_in">int</span>, seq_len: <span class="built_in">int</span>, dropout: <span class="built_in">float</span> = <span class="number">0.1</span></span>):</span><br><span class="line">        <span class="string">"""Initialize the positional encoding layer.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            embed_size: size of the embedding vector</span></span><br><span class="line"><span class="string">            max_len: maximum length of the input sequence</span></span><br><span class="line"><span class="string">            dropout: dropout rate</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="built_in">super</span>(PositionalEncoding, self).__init__()</span><br><span class="line">        self.embed_size = embed_size</span><br><span class="line">        self.seq_len = seq_len</span><br><span class="line">        self.dropout = nn.Dropout(p=dropout)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Create positional encoding, a matrix of shape (seq_len, embed_size)</span></span><br><span class="line">        pe = torch.zeros(seq_len, embed_size)</span><br><span class="line">        pos = torch.arange(<span class="number">0</span>, seq_len, dtype=torch.<span class="built_in">float</span>).unsqueeze(<span class="number">1</span>) <span class="comment"># (seq_len, 1), unsqueeze: add a new dimension</span></span><br><span class="line">        div_term = torch.exp(torch.arange(<span class="number">0</span>, embed_size, <span class="number">2</span>).<span class="built_in">float</span>() * (-math.log(<span class="number">10000.0</span>) / embed_size)) <span class="comment"># (embed_size/2,)</span></span><br><span class="line">        pe[:, <span class="number">0</span>::<span class="number">2</span>] = torch.sin(pos * div_term)</span><br><span class="line">        pe[:, <span class="number">1</span>::<span class="number">2</span>] = torch.cos(pos * div_term)</span><br><span class="line">        <span class="comment"># self.pe = self.pe.unsqueeze(0).transpose(0, 1) # (seq_len, 1, embed_size)</span></span><br><span class="line">        pe = pe.unsqueeze(<span class="number">0</span>) <span class="comment"># (1, seq_len, embed_size), 1 for batch size</span></span><br><span class="line">        self.register_buffer(<span class="string">'pe'</span>, pe) <span class="comment"># register buffer, so it doesn't need to be trained but can be saved</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="string">"""Forward pass of the positional encoding layer.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            x: input tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            positional encoded tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># x = x + self.pe[:, :x.size(1), :].requires_grad(False)</span></span><br><span class="line">        x = x + self.pe[:, :x.size(<span class="number">1</span>), :].detach()</span><br><span class="line">        <span class="keyword">return</span> self.dropout(x)</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="layer-normalization"><strong>Layer Normalization</strong></h3>
<p><strong>Layer Normalization</strong>（层归一化）是一种常用于深度学习模型的正则化技术，特别是在序列建模和自然语言处理任务中。它旨在通过标准化每一层的激活值来提高模型的训练稳定性和收敛速度。</p>
<h4 id="基本原理"><strong>基本原理</strong></h4>
<p>在神经网络中，每一层的激活值可能因输入数据的变化而幅度不一，这种变化被称为<strong>内部分布漂移（Internal Covariate Shift）</strong>。Layer Normalization 通过对每一层的神经元输出进行标准化，减少这种漂移的影响。</p>
<p>Layer Normalization 的标准化是针对<strong>层的维度</strong>（即神经元的集合）进行的，而不是像 Batch Normalization 针对<strong>样本的维度</strong>。具体而言，对于每个输入样本，Layer Normalization 会对其当前层的激活值进行归一化处理。</p>
<h4 id="数学表达"><strong>数学表达</strong></h4>
<p>假设某层的输入是一个向量 <span class="math inline">\(\mathbf{h} = [h_1, h_2, ..., h_d]\)</span>，其中 <span class="math inline">\(d\)</span> 是该层的神经元数。Layer Normalization 的计算过程如下：</p>
<ol type="1">
<li><p><strong>计算均值和方差</strong>： <span class="math display">\[
\mu = \frac{1}{d} \sum_{i=1}^d h_i, \quad \sigma^2 = \frac{1}{d} \sum_{i=1}^d (h_i - \mu)^2
\]</span></p></li>
<li><p><strong>标准化</strong>： <span class="math display">\[
\hat{h}_i = \frac{h_i - \mu}{\sqrt{\sigma^2 + \epsilon}}
\]</span> 其中，<span class="math inline">\(\epsilon\)</span> 是一个小常数，用于防止分母为零。</p></li>
<li><p><strong>添加可学习参数</strong>（仿射变换）： <span class="math display">\[
h_i^{\text{norm}} = \gamma \hat{h}_i + \beta
\]</span> 其中，<span class="math inline">\(\gamma\)</span> 和 <span class="math inline">\(\beta\)</span> 是可学习参数，用于恢复网络的表达能力。</p></li>
</ol>
<h4 id="与-batch-normalization-的对比"><strong>与 Batch Normalization 的对比</strong></h4>
<table>
<thead>
<tr class="header">
<th>特性</th>
<th>Layer Normalization</th>
<th>Batch Normalization</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>归一化维度</strong></td>
<td>每层神经元（样本内部）</td>
<td>样本维度（批次内的样本间）</td>
</tr>
<tr class="even">
<td><strong>依赖批大小</strong></td>
<td>不依赖</td>
<td>依赖批大小</td>
</tr>
<tr class="odd">
<td><strong>适用场景</strong></td>
<td>RNN、Transformer 等序列模型</td>
<td>CNN 等需要大批量训练的模型</td>
</tr>
<tr class="even">
<td><strong>计算开销</strong></td>
<td>较小</td>
<td>可能较大</td>
</tr>
</tbody>
</table>
<h4 id="优点"><strong>优点</strong></h4>
<ol type="1">
<li><strong>适用于小批量或单样本训练</strong>：因为不依赖批次统计信息，Layer Normalization 能很好地适用于小批量甚至单样本训练。</li>
<li><strong>改善收敛性</strong>：通过减少激活值的变化，模型更容易收敛。</li>
<li><strong>在序列任务中的优势</strong>：特别适合 Recurrent Neural Network（RNN）和 Transformer，因为它不会破坏时间步的依赖关系。</li>
</ol>
<h4 id="应用场景"><strong>应用场景</strong></h4>
<ul>
<li>Transformer 中广泛使用（例如 BERT 和 GPT 模型）。</li>
<li>在序列建模（如语言模型、时间序列预测）和小批量训练任务中效果显著。</li>
</ul>
<p>通过 Layer Normalization，深度学习模型可以更快地学习、避免梯度爆炸或消失，并增强泛化能力。</p>
<h4 id="代码实现-1"><strong>代码实现</strong></h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LayerNormalization</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, eps: <span class="built_in">float</span> = <span class="number">1e-6</span></span>):</span><br><span class="line">        <span class="string">"""Initialize the layer normalization layer.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            embed_size: size of the embedding vector</span></span><br><span class="line"><span class="string">            eps: epsilon value for numerical stability</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="built_in">super</span>(LayerNormalization, self).__init__()</span><br><span class="line">        self.eps = eps <span class="comment"># epsilon value for numerical stability</span></span><br><span class="line">        self.gamma = nn.Parameter(torch.ones(<span class="number">1</span>)) <span class="comment"># scale parameter, learnable parameter</span></span><br><span class="line">        self.beta = nn.Parameter(torch.zeros(<span class="number">1</span>)) <span class="comment"># shift parameter, learnable parameter</span></span><br><span class="line">        <span class="comment"># self.beta = nn.Parameter(torch.ones(embed_size))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="string">"""Forward pass of the layer normalization layer.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            x: input tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            normalized tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        mean = x.mean(dim=-<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">        std = x.std(dim=-<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> self.gamma * (x - mean) / (std + self.eps) + self.beta</span><br></pre></td></tr></tbody></table></figure>
<h3 id="feed-forward-block"><strong>Feed Forward Block</strong></h3>
<p><strong>Feed Forward Block</strong> 是 Transformer 架构中的一个重要模块，主要用于将序列特征进行非线性变换，以提升模型的表达能力。它由两个全连接层组成，第一个层用于处理输入序列特征，第二个层用于处理第一个层的输出。</p>
<p>主要参数有两个： * embed_size: 输入序列特征的维度 * hidden_size: 全连接层的隐藏层维度</p>
<h4 id="数学原理"><strong>数学原理</strong></h4>
<ol type="1">
<li><p><strong>第一层全连接层</strong>：将输入序列特征 <span class="math inline">\(X\)</span> 通过线性变换映射到一个更高维度的空间，得到 <span class="math inline">\(Y\)</span>。 <span class="math display">\[
Y = W_1X + b_1
\]</span> 其中<span class="math inline">\(X \in \mathbb{R}^{seq\_len \times embed\_size}\)</span>为输入序列特征，<span class="math inline">\(Y \in \mathbb{R}^{seq\_len \times hidden\_size}\)</span>为第一层全连接层的输出序列特征。<span class="math inline">\(W_1\)</span>和<span class="math inline">\(b_1\)</span>是可学习的参数，<span class="math inline">\(W_1 \in \mathbb{R}^{hidden\_size \times embed\_size}\)</span>, <span class="math inline">\(b_1 \in \mathbb{R}^{hidden\_size}\)</span>。</p></li>
<li><p><strong>激活函数</strong>：在第一层全连接层之后，通常会添加一个非线性激活函数，如 ReLU 或 GELU，以引入非线性变换。</p></li>
<li><p><strong>Dropout</strong>：为了防止过拟合，通常会在第二层全连接层之前添加 Dropout。</p></li>
<li><p><strong>第二层全连接层</strong>：将第一层全连接层的输出<span class="math inline">\(Y\)</span>通过线性变换映射回原始空间，得到 <span class="math inline">\(Z\)</span>。 <span class="math display">\[
Z = W_2Y + b_2
\]</span> 其中<span class="math inline">\(Y \in \mathbb{R}^{seq\_len \times hidden\_size}\)</span>为第一个全连接层的输出特征，<span class="math inline">\(Z \in \mathbb{R}^{seq\_len \times embed\_size}\)</span>为第二层全连接层的输出序列特征。<span class="math inline">\(W_2\)</span>和<span class="math inline">\(b_2\)</span>是可学习的参数，<span class="math inline">\(W_2 \in \mathbb{R}^{embed\_size \times hidden\_size}\)</span>, <span class="math inline">\(b_2 \in \mathbb{R}^{embed\_size}\)</span>。</p></li>
</ol>
<h4 id="代码实现-2"><strong>代码实现</strong></h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FeedForwardBlock</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, embed_size: <span class="built_in">int</span>, hidden_size: <span class="built_in">int</span>, dropout: <span class="built_in">float</span> = <span class="number">0.1</span></span>):</span><br><span class="line">        <span class="string">"""Initialize the feedforward layer.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            embed_size: size of the embedding vector</span></span><br><span class="line"><span class="string">            hidden_size: size of the hidden layer</span></span><br><span class="line"><span class="string">            dropout: dropout rate</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="built_in">super</span>(FeedForwardBlock, self).__init__()</span><br><span class="line">        self.linear1 = nn.Linear(embed_size, hidden_size) <span class="comment"># (embed_size, hidden_size), linear layer</span></span><br><span class="line">        self.relu = nn.ReLU()</span><br><span class="line">        self.dropout = nn.Dropout(dropout)</span><br><span class="line">        self.linear2 = nn.Linear(hidden_size, embed_size) <span class="comment"># (hidden_size, embed_size), linear layer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="string">"""Forward pass of the feedforward layer.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            x: input tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            output tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        x = self.linear1(x) <span class="comment"># (batch_size, seq_len, hidden_size)</span></span><br><span class="line">        x = self.relu(x) <span class="comment"># (batch_size, seq_len, hidden_size)</span></span><br><span class="line">        x = self.dropout(x) <span class="comment"># (batch_size, seq_len, hidden_size)</span></span><br><span class="line">        x = self.linear2(x) <span class="comment"># (batch_size, seq_len, embed_size)</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></tbody></table></figure>
<h3 id="multi-head-attention-block"><strong>Multi Head Attention Block</strong></h3>
<p><strong>Multi Head Attention Block</strong> 是 Transformer 架构中的核心模块，主要用于处理序列特征之间的交互关系，提取序列编码特征。它由三个主要部分组成：<strong>Query, Key, Value</strong>，以及多头注意力机制。</p>
<p>主要参数有三个： * embed_size: 输入序列特征的维度 * num_heads: 多头注意力机制的heads数量 * dropout: Dropout层的概率，用于防止过拟合，在<strong>Query</strong>和<strong>Key</strong>相乘之后使用</p>
<h4 id="数学原理-1"><strong>数学原理</strong></h4>
<p><img alt="多头注意力机制网络架构图" data-src="/2024/12/23/Architecture-Of-Transformer-And-PyTorch-Implementation/multi_head_self_attention.png"> 如上图所是，多头注意力机制由<strong>Scaled Dot-Product Attention</strong>和<strong>Multi-Head Attention</strong>两部分组成。 <strong>Scaled Dot-Product Attention</strong> 是多头注意力机制基础部分，其公式如下： <span class="math display">\[
Attention(Q, K, V) = softmax(\frac{QK^T}{\sqrt{head\_size}})V
\]</span> 其中<span class="math inline">\(Q, K, V \in \mathbb{R}^{batch\_size \times num\_heads \times seq\_len \times head\_size}\)</span>分别表示Query, Key, Value序列特征，<span class="math inline">\(head\_size\)</span>表示序列特征头维度，<span class="math inline">\(\sqrt{head\_size}\)</span>是为了防止<span class="math inline">\(QK^T\)</span>过大导致的梯度消失问题。</p>
<p>在计算<span class="math inline">\(\frac{QK^T}{\sqrt{head\_size}}\)</span>之后，需要进行三步操作： 1. 需要使用<strong>mask</strong>对得到的注意力权重进行掩码操作，防止模型关注到无效的位置。 2. 使用<strong>softmax</strong>对注意力权重进行归一化，得到最终的注意力权重矩阵。 3. 将注意力权重矩阵进行<strong>dropout</strong>操作，防止过拟合。</p>
<p><strong>Multi-Head Attention</strong> 是多头注意力机制的最终实现，是在<strong>Scaled Dot-Product Attention</strong>的基础上进行了线性映射，以提高多头注意力模块的表达能力和拟合能力。 对输入序列特征<span class="math inline">\(Q, K, V\)</span>进行线性映射，得到新的序列特征，公式如下： <span class="math display">\[
\begin{align*}
Q^{'} &amp;= W_{q}Q + b_{q} \\
K^{'} &amp;= W_{k}K + b_{k} \\
V^{'} &amp;= W_{v}V + b_{v} 
\end{align*}
\]</span></p>
<p>对输出序列特征<span class="math inline">\(O\)</span>进行线性映射，得到最终的输出序列特征，公式如下： <span class="math display">\[
O^{'} = W_{o}O + b_{o} 
\]</span></p>
<h4 id="代码实现-3"><strong>代码实现</strong></h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiHeadAttentionBlock</span>(nn.Module):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Multi-head attention block.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, embed_size: <span class="built_in">int</span>, num_heads: <span class="built_in">int</span>, dropout: <span class="built_in">float</span> = <span class="number">0.1</span></span>):</span><br><span class="line">        <span class="string">"""Initialize the multi-head attention layer.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            embed_size: size of the embedding vector</span></span><br><span class="line"><span class="string">            num_heads: number of attention heads</span></span><br><span class="line"><span class="string">            dropout: dropout rate</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="built_in">super</span>(MultiHeadAttentionBlock, self).__init__()</span><br><span class="line">        <span class="keyword">assert</span> embed_size % num_heads == <span class="number">0</span>, <span class="string">"Embedding size must be divisible by number of heads"</span></span><br><span class="line">        self.embed_size = embed_size</span><br><span class="line">        self.num_heads = num_heads</span><br><span class="line">        self.head_size = embed_size // num_heads</span><br><span class="line">        self.dropout = nn.Dropout(dropout)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># define the linear layers</span></span><br><span class="line">        self.query = nn.Linear(embed_size, embed_size) <span class="comment"># (embed_size, embed_size), linear layer for query seq</span></span><br><span class="line">        self.key = nn.Linear(embed_size, embed_size) <span class="comment"># (embed_size, embed_size), linear layer for key seq</span></span><br><span class="line">        self.value = nn.Linear(embed_size, embed_size) <span class="comment"># (embed_size, embed_size), linear layer for value seq</span></span><br><span class="line">        </span><br><span class="line">        self.out = nn.Linear(embed_size, embed_size) <span class="comment"># (embed_size, embed_size), linear layer for output</span></span><br><span class="line">    <span class="comment"># @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attention</span>(<span class="params">self, query, key, value, mask=<span class="literal">None</span>, dropout: nn.Dropout = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">"""Compute the attention scores and apply the softmax function. key and value are the same shape and key_seq_len = value_seq_len.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            query: input tensor of shape (batch_size, head_nums, query_seq_len, head_size)</span></span><br><span class="line"><span class="string">            key: input tensor of shape (batch_size, head_nums, key_seq_len, head_size)</span></span><br><span class="line"><span class="string">            value: input tensor of shape (batch_size, head_nums, value_seq_len, head_size)</span></span><br><span class="line"><span class="string">            mask: optional mask tensor of shape (batch_size, 1, 1, key_seq_len) or (batch_size, 1, query_seq_len, key_seq_len)</span></span><br><span class="line"><span class="string">            dropout: optional dropout layer</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            embedding: attention embedding tensor of shape (batch_size, num_heads, seq_len, head_size)</span></span><br><span class="line"><span class="string">            score: attention scores tensor of shape (batch_size, num_heads, seq_len, seq_len)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># compute the attention scores, QK^T/(sqrt(head_size)</span></span><br><span class="line">        <span class="comment"># (batch_size, num_heads, query_seq_len, head_size) x (batch_size, num_heads, key_seq_len, head_size) --&gt; (batch_size, num_heads, query_seq_len, key_seq_len)</span></span><br><span class="line">        score = torch.matmul(query, key.transpose(-<span class="number">2</span>, -<span class="number">1</span>)) / math.sqrt(query.size(-<span class="number">1</span>)) <span class="comment"># (batch_size, num_heads, query_seq_len, key_seq_len)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># apply mask if provided</span></span><br><span class="line">        <span class="keyword">if</span> mask <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># print(type(mask))</span></span><br><span class="line">            <span class="comment"># print(mask.shape)</span></span><br><span class="line">            score = score.masked_fill(mask == <span class="number">0</span>, -<span class="number">1e9</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># apply softmax function</span></span><br><span class="line">        score = torch.softmax(score, dim=-<span class="number">1</span>) <span class="comment"># (batch_size, num_heads, query_seq_len, key_seq_len)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># apply dropout</span></span><br><span class="line">        <span class="keyword">if</span> dropout <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            score = dropout(score)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># compute the weighted sum of values as embedding</span></span><br><span class="line">        <span class="comment"># key_seq_len = value_seq_len</span></span><br><span class="line">        <span class="comment"># (batch_size, num_heads, query_seq_len, key_seq_len) x (batch_size, num_heads, value_seq_len, head_size) --&gt; (batch_size, num_heads, query_seq_len, head_size)</span></span><br><span class="line">        embedding = torch.matmul(score, value) <span class="comment">#(batch_size, num_heads, query_seq_len, head_size)</span></span><br><span class="line">        <span class="keyword">return</span> embedding, score</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, query, key, value, mask=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">"""Forward pass of the multi-head attention layer.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            query: input tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">            key: input tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">            value: input tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">            mask: optional mask tensor of shape (batch_size, 1, 1, seq_len) or (batch_size, 1, seq_len, seq_len)</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            output tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Linear transformations for query, key, and value</span></span><br><span class="line">        query = self.query(query) <span class="comment"># (batch_size, seq_len, embed_size) --&gt; (batch_size, seq_len, embed_size)</span></span><br><span class="line">        key = self.key(key) <span class="comment"># (batch_size, seq_len, embed_size) --&gt; (batch_size, seq_len, embed_size)</span></span><br><span class="line">        value = self.value(value) <span class="comment"># (batch_size, seq_len, embed_size) --&gt; (batch_size, seq_len, embed_size)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># split the embedding into multiple heads</span></span><br><span class="line">        <span class="comment"># (batch_size, seq_len, embed_size) --&gt; (batch_size, seq_len, num_heads, head_size) --&gt; (batch_size, num_heads, seq_len, head_size)</span></span><br><span class="line">        <span class="comment"># view: reshape tensor without changing its data</span></span><br><span class="line">        <span class="comment"># transpose: swap the positions of two axes in an array</span></span><br><span class="line">        batch_size = query.shape[<span class="number">0</span>]</span><br><span class="line">        query = query.view(batch_size, -<span class="number">1</span>, self.num_heads, self.head_size).transpose(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># (batch_size, num_heads, query_seq_len, head_size)</span></span><br><span class="line">        key = key.view(batch_size, -<span class="number">1</span>, self.num_heads, self.head_size).transpose(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># (batch_size, num_heads, key_seq_len, head_size)</span></span><br><span class="line">        value = value.view(batch_size, -<span class="number">1</span>, self.num_heads, self.head_size).transpose(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># (batch_size, num_heads, value_seq_len, head_size)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute the attention embedding and score</span></span><br><span class="line">        embedding, self.score = self.attention(query, key, value, mask, self.dropout)</span><br><span class="line">        <span class="comment"># (batch_size, num_heads, query_seq_len, head_size) --&gt; (batch_size, query_seq_len, num_heads, head_size) --&gt; (batch_size, query_seq_len, embed_size)</span></span><br><span class="line">        embedding = embedding.transpose(<span class="number">1</span>, <span class="number">2</span>).contiguous().view(batch_size, -<span class="number">1</span>, self.embed_size) </span><br><span class="line">        <span class="keyword">return</span> self.out(embedding) <span class="comment"># (batch_size, query_seq_len, embed_size) --&gt; (batch_size, query_seq_len, embed_size)</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="residual-connection"><strong>Residual Connection</strong></h3>
<p>从Transformer模型结构图中可以看出，每一个<strong>Encoder Block</strong>和<strong>Decoder Block</strong>都包含<strong>Residual Connection</strong>模块，它将输入与经过子层（Sublayer）的输出相加，然后进行Layer Normalization。这样做的好处是，可以防止梯度消失和梯度爆炸，同时也可以让模型更容易训练。</p>
<h4 id="数学原理-2">数学原理</h4>
<p><strong>Residual Connection</strong>的数学原理很简单，就是将输入与经过Dropout操作之后的子层（Sublayer）输出相加，然后进行Layer Normalization。具体公式如下： <span class="math display">\[
\text{Residual Connection}(x, \text{Sublayer}(x)) = x + \text{Dropout}(\text{Sublayer}(\text{Layer Normalization}(x)))
\]</span></p>
<ul>
<li>Layer Normalization：在进行子层操作之前首先进行Layer Normalization操作，用于对输入进行归一化，使得输入具有均值为0和标准差为1的分布，从而提高模型的训练效果。</li>
<li>Sublayer：表示子层，可以是任何神经网络层，如Multi-Head Attention、Feed Forward Network等</li>
<li>Dropout：子层操作之后需要进行Dropout操作，用于防止过拟合</li>
</ul>
<h4 id="代码实现-4">代码实现</h4>
<figure class="highlight julia"><table><tbody><tr><td class="code"><pre><span class="line">class ResidualConnection(nn.<span class="built_in">Module</span>):</span><br><span class="line">    def __init__(self, dropout: float = <span class="number">0.1</span>):</span><br><span class="line">        <span class="string">"""Initialize the residual connection layer.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            dropout: dropout rate</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(ResidualConnection, self).__init__()</span><br><span class="line">        self.dropout = nn.Dropout(dropout)</span><br><span class="line">        self.norm = LayerNormalization()</span><br><span class="line"></span><br><span class="line">    def forward(self, x: torch.Tensor, sublayer: nn.<span class="built_in">Module</span>) -&gt; torch.Tensor:</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Applies a sublayer followed by a residual connection and layer normalization.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            x: input tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">            sublayer: nn.Module representing the sublayer to be applied</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            output tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># return self.norm(x + self.dropout(sublayer(x)))</span></span><br><span class="line">        <span class="keyword">return</span> x + self.dropout(sublayer(self.norm(x)))</span><br></pre></td></tr></tbody></table></figure>
<h3 id="encoder-block"><strong>Encoder Block</strong></h3>
<p><strong>Encoder Block</strong>是Transformer模型的核心组成部分，它由三个子模块组成：<strong>Multi-Head Attention</strong>，<strong>Feed Forward Block</strong>和<strong>Residual Connection</strong>。</p>
<h4 id="数学原理-3">数学原理</h4>
<p><strong>Encoder Block</strong>的数学原理如下： <span class="math display">\[
\text{Encoder Block}(x) = 
\begin{cases} 
\text{Residual Connection}(x, \text{Multi-Head Attention}(x, x, x))&amp; step1 \\
\text{Residual Connection}(x, \text{Feed Forward Block}(x))&amp; step2
\end{cases}
\]</span></p>
<ul>
<li>Multi-Head Attention：用于对输入进行自注意力机制，提取输入中的关键信息。</li>
<li>Feed Forward Network：用于对输入进行非线性变换，增加模型的表达能力。</li>
</ul>
<h4 id="代码实现-5">代码实现</h4>
<figure class="highlight ceylon"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> EncoderBlock(nn.Module):</span><br><span class="line">    def <span class="number">__</span>init<span class="number">__</span>(self, embed<span class="number">_</span>size: int, hidden<span class="number">_</span>size: int, num<span class="number">_</span>heads: int, dropout: float = <span class="number">0.1</span>):</span><br><span class="line">        <span class="string">"""Initialize the encoder block layer.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            embed_size: embedding size</span></span><br><span class="line"><span class="string">            hidden_size: hidden size</span></span><br><span class="line"><span class="string">            num_heads: number of heads</span></span><br><span class="line"><span class="string">            dropout: dropout rate</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">super</span>(EncoderBlock, self).<span class="number">__</span>init<span class="number">__</span>()</span><br><span class="line">        self.multi<span class="number">_</span>head<span class="number">_</span>attention = MultiHeadAttentionBlock(embed<span class="number">_</span>size, num<span class="number">_</span>heads, dropout)</span><br><span class="line">        self.feed<span class="number">_f</span>orward = FeedForwardBlock(embed<span class="number">_</span>size, hidden<span class="number">_</span>size, dropout)</span><br><span class="line">        self.residual<span class="number">_</span>connections = nn.ModuleList([ResidualConnection(dropout) <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> range(<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line">    def forward(self, x: torch.Tensor, src<span class="number">_m</span>ask: torch.Tensor = None) -&gt; torch.Tensor:</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Applies encode block layer followed by a feed-forward layer and a residual connection.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            x: input tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">            src_mask: optional mask tensor of shape (batch_size, 1, 1, seq_len)</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            output tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        x = self.residual<span class="number">_</span>connections[<span class="number">0</span>](x, lambda x: self.multi<span class="number">_</span>head<span class="number">_</span>attention(x, x, x, src<span class="number">_m</span>ask))</span><br><span class="line">        x = self.residual<span class="number">_</span>connections[<span class="number">1</span>](x, self.feed<span class="number">_f</span>orward)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></tbody></table></figure>
<h3 id="encoder"><strong>Encoder</strong></h3>
<p><strong>Encoder</strong>是Transformer模型中的编码器部分，它由多个<strong>Encoder Block</strong>串联组成。</p>
<h4 id="数学原理-4">数学原理</h4>
<p><strong>Encoder</strong>的数学原理如下： <span class="math display">\[
\text{Encoder}(x) = \text{Layer Normalization}(\text{Encoder Block}(\text{Encoder Block}(...(\text{Encoder Block}(x))...)))
\]</span></p>
<ul>
<li>Encoder Block：编码器串联多个Encoder Block提取序列特征，原始Transformer模型中使用了6个Encoder Block。</li>
<li>Layer Normalization：对Encoder Block输出进行归一化，以解决特征迁移问题。</li>
</ul>
<h4 id="代码实现-6">代码实现</h4>
<figure class="highlight ceylon"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Encoder(nn.Module):</span><br><span class="line">    def <span class="number">__</span>init<span class="number">__</span>(self, embed<span class="number">_</span>size: int, hidden<span class="number">_</span>size: int, num<span class="number">_</span>heads: int, num<span class="number">_</span>layers: int, dropout: float = <span class="number">0.1</span>):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initializes the encoder layer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            embed_size: embedding size</span></span><br><span class="line"><span class="string">            hidden_size: hidden size</span></span><br><span class="line"><span class="string">            num_heads: number of heads</span></span><br><span class="line"><span class="string">            num_layers: number of encoder blocks</span></span><br><span class="line"><span class="string">            dropout: dropout rate, defaults to 0.1</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">super</span>(Encoder, self).<span class="number">__</span>init<span class="number">__</span>()</span><br><span class="line">        self.encoder<span class="number">_</span>blocks = nn.ModuleList([EncoderBlock(embed<span class="number">_</span>size, hidden<span class="number">_</span>size, num<span class="number">_</span>heads, dropout) <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> range(num<span class="number">_</span>layers)])</span><br><span class="line">        self.norm = LayerNormalization()</span><br><span class="line"></span><br><span class="line">    def forward(self, x: torch.Tensor, mask: torch.Tensor = None) -&gt; torch.Tensor:</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Applies encode layer followed by a stack of encoder blocks and a layer normalization.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            x: input tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">            mask: optional mask tensor of shape (batch_size, 1, 1, seq_len)</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            output tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">for</span> encoder<span class="number">_</span>block <span class="keyword">in</span> self.encoder<span class="number">_</span>blocks:</span><br><span class="line">            x = encoder<span class="number">_</span>block(x, mask)</span><br><span class="line">        <span class="keyword">return</span> self.norm(x)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="decoder-block"><strong>Decoder Block</strong></h3>
<p><strong>Decoder Block</strong>是Transformer模型的核心组成部分，它由三个子模块组成：<strong>Multi-Head Attention</strong>，<strong>Feed Forward Block</strong>和<strong>Residual Connection</strong>，其中<strong>Multi-Head Attention</strong>模块又根据输入的序列特征不同分成两个实例模块，一个是<strong>self-attention</strong>模块，一个是<strong>cross-attention</strong>模块。</p>
<p><strong>self-attention</strong>模块用于处理<strong>Decoder Block</strong>的输入序列（实际上为模型的输出序列），而<strong>cross-attention</strong>模块用于处理<strong>Encoder</strong>输出的序列特征和<strong>self-attention</strong>模块处理后的序列特征。</p>
<h4 id="数学原理-5">数学原理</h4>
<p><strong>Decoder Block</strong>的数学原理如下： <span class="math display">\[
\text{Decoder Block}(x) = 
\begin{cases}
\text{Residual Connection}(x, \text{Multi-Head Attention}(x, x, x, tgt\_mask)) &amp; step1 \\
\text{Residual Connection}(x, \text{Multi-Head Attention}(x, enc\_output, enc\_output, src\_mask)) &amp; step2 \\
\text{Residual Connection}(x, \text{Feed Forward Block}(x) &amp; step3
\end{cases}
\]</span></p>
<ul>
<li>Multi-Head Attention：多头注意力机制，用于提取序列特征。</li>
<li>Feed Forward Network：用于对输入进行非线性变换，增加模型的表达能力。</li>
<li>Residual Connection：残差连接，用于实现梯度 vanishing 和 exploding 的问题。</li>
</ul>
<h4 id="代码实现-7">代码实现</h4>
<figure class="highlight haskell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">DecoderBlock</span>(<span class="title">nn</span>.<span class="type">Module</span>):</span></span><br><span class="line"><span class="class">    def __init__(<span class="title">self</span>, <span class="title">embed_size</span>: <span class="title">int</span>, <span class="title">hidden_size</span>: <span class="title">int</span>, <span class="title">num_heads</span>: <span class="title">int</span>, <span class="title">dropout</span>: <span class="title">float</span> = 0.1):</span></span><br><span class="line"><span class="class">        super(<span class="type">DecoderBlock</span>, <span class="title">self</span>).__init__()</span></span><br><span class="line"><span class="class">        self.self_attention_block = <span class="type">MultiHeadAttentionBlock</span>(<span class="title">embed_size</span>, <span class="title">num_heads</span>, <span class="title">dropout</span>)</span></span><br><span class="line"><span class="class">        self.cross_attention_block = <span class="type">MultiHeadAttentionBlock</span>(<span class="title">embed_size</span>, <span class="title">num_heads</span>, <span class="title">dropout</span>)</span></span><br><span class="line"><span class="class">        self.feed_forward = <span class="type">FeedForwardBlock</span>(<span class="title">embed_size</span>, <span class="title">hidden_size</span>, <span class="title">dropout</span>)</span></span><br><span class="line"><span class="class">        self.residual_connections = nn.<span class="type">ModuleList</span>([<span class="type">ResidualConnection(dropout)</span> <span class="title">for</span> <span class="title">_</span> <span class="title">in</span> <span class="title">range</span>(3)])</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    def forward(<span class="title">self</span>, <span class="title">x</span>: <span class="title">torch</span>.<span class="type">Tensor</span>, <span class="title">enc_output</span>: <span class="title">torch</span>.<span class="type">Tensor</span>, <span class="title">src_mask</span>: <span class="title">torch</span>.<span class="type">Tensor</span>, <span class="title">tgt_mask</span>: <span class="title">torch</span>.<span class="type">Tensor</span>) -&gt; torch.<span class="type">Tensor</span>:</span></span><br><span class="line"><span class="class">        """</span></span><br><span class="line"><span class="class">        <span class="type">Applies</span> the decoder block.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="type">Args</span>:</span></span><br><span class="line"><span class="class">            x: input tensor of shape (<span class="title">batch_size</span>, <span class="title">tgt_seq_len</span>, <span class="title">embed_size</span>)</span></span><br><span class="line"><span class="class">            enc_output: encoder output tensor of shape (<span class="title">batch_size</span>, <span class="title">src_seq_len</span>, <span class="title">embed_size</span>)</span></span><br><span class="line"><span class="class">            src_mask: source mask tensor of shape (<span class="title">batch_size</span>, 1, 1, <span class="title">src_seq_len</span>)</span></span><br><span class="line"><span class="class">            tgt_mask: target mask tensor of shape (<span class="title">batch_size</span>, 1, <span class="title">tgt_seq_len</span>, <span class="title">tgt_seq_len</span>)</span></span><br><span class="line"><span class="class">        <span class="type">Returns</span>:</span></span><br><span class="line"><span class="class">            output tensor of shape (<span class="title">batch_size</span>, <span class="title">tgt_seq_len</span>, <span class="title">embed_size</span>)</span></span><br><span class="line"><span class="class">        """</span></span><br><span class="line"><span class="class">        x = self.residual_connections[0](<span class="title">x</span>, <span class="title">lambda</span> <span class="title">x</span>: <span class="title">self</span>.<span class="title">self_attention_block</span>(<span class="title">x</span>, <span class="title">x</span>, <span class="title">x</span>, <span class="title">tgt_mask</span>))</span></span><br><span class="line"><span class="class">        x = self.residual_connections[1](<span class="title">x</span>, <span class="title">lambda</span> <span class="title">x</span>: <span class="title">self</span>.<span class="title">cross_attention_block</span>(<span class="title">x</span>, <span class="title">enc_output</span>, <span class="title">enc_output</span>, <span class="title">src_mask</span>))</span></span><br><span class="line"><span class="class">        x = self.residual_connections[2](<span class="title">x</span>, <span class="title">self</span>.<span class="title">feed_forward</span>)</span></span><br><span class="line"><span class="class">        return x</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="decoder"><strong>Decoder</strong></h3>
<p><strong>Decoder</strong>是Transformer模型的解码器部分，它由多个<strong>Decoder Block</strong>串联组成。</p>
<h4 id="数学原理-6">数学原理</h4>
<p><strong>Decoder</strong>的数学原理如下： <span class="math display">\[
\text{Decoder}(x) = \text{Layer Normalization}(\text{Decoder Block}(\text{Decoder Block}(...(\text{Decoder Block}(x))...)))
\]</span></p>
<ul>
<li>Decoder Block：解码器串联多个Decoder Block提取序列特征，原始Transformer模型中使用了6个Decoder Block。</li>
<li>Layer Normalization：对Decoder Block输出进行归一化，以解决特征迁移问题。</li>
</ul>
<h4 id="代码实现-8">代码实现</h4>
<figure class="highlight haskell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Decoder</span>(<span class="title">nn</span>.<span class="type">Module</span>):</span></span><br><span class="line"><span class="class">    def __init__(<span class="title">self</span>, <span class="title">embed_size</span>: <span class="title">int</span>, <span class="title">hidden_size</span>: <span class="title">int</span>, <span class="title">num_heads</span>: <span class="title">int</span>, <span class="title">num_layers</span>: <span class="title">int</span>, <span class="title">dropout</span>: <span class="title">float</span> = 0.1):</span></span><br><span class="line"><span class="class">        super(<span class="type">Decoder</span>, <span class="title">self</span>).__init__()</span></span><br><span class="line"><span class="class">        self.decoder_blocks = nn.<span class="type">ModuleList</span>([<span class="type">DecoderBlock</span>(<span class="title">embed_size</span>, <span class="title">hidden_size</span>, <span class="title">num_heads</span>, <span class="title">dropout</span>) for _ in range(<span class="title">num_layers</span>)])</span></span><br><span class="line"><span class="class">        self.norm = <span class="type">LayerNormalization</span>()</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    def forward(<span class="title">self</span>, <span class="title">x</span>: <span class="title">torch</span>.<span class="type">Tensor</span>, <span class="title">enc_output</span>: <span class="title">torch</span>.<span class="type">Tensor</span>, <span class="title">src_mask</span>: <span class="title">torch</span>.<span class="type">Tensor</span>, <span class="title">tgt_mask</span>: <span class="title">torch</span>.<span class="type">Tensor</span>) -&gt; torch.<span class="type">Tensor</span>:</span></span><br><span class="line"><span class="class">        """</span></span><br><span class="line"><span class="class">        <span class="type">Applies</span> the decoder by a stack of decoder blocks and a layer normalization.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="type">Args</span>:</span></span><br><span class="line"><span class="class">            x: input tensor of shape (<span class="title">batch_size</span>, <span class="title">tgt_seq_len</span>, <span class="title">embed_size</span>)</span></span><br><span class="line"><span class="class">            enc_output: encoder output tensor of shape (<span class="title">batch_size</span>, <span class="title">src_seq_len</span>, <span class="title">embed_size</span>) as the input of decoder</span></span><br><span class="line"><span class="class">            src_mask: source mask tensor of shape (<span class="title">batch_size</span>, 1, 1, <span class="title">src_seq_len</span>)</span></span><br><span class="line"><span class="class">            tgt_mask: target mask tensor of shape (<span class="title">batch_size</span>, 1, <span class="title">tgt_seq_len</span>, <span class="title">tgt_seq_len</span>)</span></span><br><span class="line"><span class="class">        <span class="type">Returns</span>:</span></span><br><span class="line"><span class="class">            output tensor of shape (<span class="title">batch_size</span>, <span class="title">tgt_seq_len</span>, <span class="title">embed_size</span>)</span></span><br><span class="line"><span class="class">        """</span></span><br><span class="line"><span class="class">        for decoder_block in self.decoder_blocks:</span></span><br><span class="line"><span class="class">            x = decoder_block(<span class="title">x</span>, <span class="title">enc_output</span>, <span class="title">src_mask</span>, <span class="title">tgt_mask</span>)</span></span><br><span class="line"><span class="class">        return self.norm(<span class="title">x</span>)</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="projection-layer"><strong>Projection Layer</strong></h3>
<p><strong>Projection Layer</strong>是Transformer模型的输出层，作用是解码器的输出序列特征映射到词汇表大小，以生成最终的预测结果。 参数有两个： * vocab_size：词汇表大小。 * embed_size：嵌入向量的维度。</p>
<h4 id="数学原理-7">数学原理</h4>
<p><strong>Projection Layer</strong>的数学原理如下： <span class="math display">\[
\text{Projection Layer}(x) = \text{log_softmax}(\text{Linear}(x))
\]</span></p>
<h4 id="代码实现-9">代码实现</h4>
<figure class="highlight julia"><table><tbody><tr><td class="code"><pre><span class="line">class ProjectionLayer(nn.<span class="built_in">Module</span>):</span><br><span class="line">    def __init__(self, embed_size: int, vocab_size: int):</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initializes the projection layer.</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            embed_size: embedding size</span></span><br><span class="line"><span class="string">            vocab_size: vocabulary size</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(ProjectionLayer, self).__init__()</span><br><span class="line">        <span class="comment"># assert embed_size == vocab_size, "Embedding size and vocabulary size must be equal"</span></span><br><span class="line">        self.projection = nn.Linear(embed_size, vocab_size)</span><br><span class="line"></span><br><span class="line">    def forward(self, x: torch.Tensor) -&gt; torch.Tensor:</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Applies the projection layer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            x: input tensor of shape (batch_size, seq_len, embed_size)</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            output tensor of shape (batch_size, seq_len, vocab_size)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># (batch_size, seq_len, embed_size) -&gt; (batch_size, seq_len, vocab_size)</span></span><br><span class="line">        <span class="keyword">return</span> torch.log_softmax(self.projection(x), dim=-<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="transformer"><strong>Transformer</strong></h3>
<p><strong>Transformer</strong>的模型可以由上述模块组成，它由<strong>Input Embedding</strong>、<strong>Positional Encoding</strong>、<strong>Encoder</strong>、<strong>Decoder</strong>和<strong>Projection Layer</strong>组成。</p>
<h4 id="代码实现-10">代码实现</h4>
<figure class="highlight haskell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Transformer</span>(<span class="title">nn</span>.<span class="type">Module</span>):</span></span><br><span class="line"><span class="class">    def __init__(<span class="title">self</span>, <span class="title">src_vocab_size</span>: <span class="title">int</span>, <span class="title">tgt_vocab_size</span>: <span class="title">int</span>, <span class="title">src_seq_len</span>: <span class="title">int</span>, <span class="title">tgt_seq_len</span>: <span class="title">int</span>, <span class="title">embed_size</span>: <span class="title">int</span> = 512, <span class="title">hidden_size</span>: <span class="title">int</span> = 2048, <span class="title">num_heads</span>: <span class="title">int</span> = 8, <span class="title">num_encoder_layers</span>: <span class="title">int</span> = 6, <span class="title">num_decoder_layers</span>: <span class="title">int</span>=6, <span class="title">dropout</span>: <span class="title">float</span> = 0.1):</span></span><br><span class="line"><span class="class">        """</span></span><br><span class="line"><span class="class">        <span class="type">Initializes</span> the transformer model. <span class="type">The</span> model consists of an encoder and a decoder.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="type">Args</span>:</span></span><br><span class="line"><span class="class">            src_vocab_size: source vocabulary size</span></span><br><span class="line"><span class="class">            tgt_vocab_size: target vocabulary size</span></span><br><span class="line"><span class="class">            src_seq_len: source sequence length</span></span><br><span class="line"><span class="class">            tgt_seq_len: target sequence length</span></span><br><span class="line"><span class="class">            embed_size: embedding size</span></span><br><span class="line"><span class="class">            hidden_size: hidden size</span></span><br><span class="line"><span class="class">            num_heads: number of attention heads</span></span><br><span class="line"><span class="class">            num_encoder_layers: number of encoder layers</span></span><br><span class="line"><span class="class">            num_decoder_layers: number of decoder layers</span></span><br><span class="line"><span class="class">            dropout: dropout rate</span></span><br><span class="line"><span class="class">        """</span></span><br><span class="line"><span class="class">        super(<span class="type">Transformer</span>, <span class="title">self</span>).__init__()</span></span><br><span class="line"><span class="class">        # <span class="type">Create</span> input embedding layer</span></span><br><span class="line"><span class="class">        self.src_embedding = <span class="type">InputEmbedding</span>(<span class="title">src_vocab_size</span>, <span class="title">embed_size</span>)</span></span><br><span class="line"><span class="class">        self.tgt_embedding = <span class="type">InputEmbedding</span>(<span class="title">tgt_vocab_size</span>, <span class="title">embed_size</span>)</span></span><br><span class="line"><span class="class">        # <span class="type">Create</span> positional encoding layers</span></span><br><span class="line"><span class="class">        self.src_pos_encoding = <span class="type">PositionalEncoding</span>(<span class="title">embed_size</span>, <span class="title">src_seq_len</span>, <span class="title">dropout</span>)</span></span><br><span class="line"><span class="class">        self.tgt_pos_encoding = <span class="type">PositionalEncoding</span>(<span class="title">embed_size</span>, <span class="title">tgt_seq_len</span>, <span class="title">dropout</span>)</span></span><br><span class="line"><span class="class">        # <span class="type">Create</span> encoder and decoder</span></span><br><span class="line"><span class="class">        self.encoder = <span class="type">Encoder</span>(<span class="title">embed_size</span>, <span class="title">hidden_size</span>, <span class="title">num_heads</span>, <span class="title">num_encoder_layers</span>, <span class="title">dropout</span>)</span></span><br><span class="line"><span class="class">        self.decoder = <span class="type">Decoder</span>(<span class="title">embed_size</span>, <span class="title">hidden_size</span>, <span class="title">num_heads</span>, <span class="title">num_decoder_layers</span>, <span class="title">dropout</span>)</span></span><br><span class="line"><span class="class">        self.projection = <span class="type">ProjectionLayer</span>(<span class="title">embed_size</span>, <span class="title">tgt_vocab_size</span>)</span></span><br><span class="line"><span class="class">        # <span class="type">Initialize</span> the parameters</span></span><br><span class="line"><span class="class">        for p in self.parameters():</span></span><br><span class="line"><span class="class">            if p.dim() &gt; 1:</span></span><br><span class="line"><span class="class">                nn.init.xavier_uniform_(<span class="title">p</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    def forward(<span class="title">self</span>, <span class="title">src</span>: <span class="title">torch</span>.<span class="type">Tensor</span>, <span class="title">tgt</span>: <span class="title">torch</span>.<span class="type">Tensor</span>, <span class="title">src_mask</span>: <span class="title">torch</span>.<span class="type">Tensor</span>, <span class="title">tgt_mask</span>: <span class="title">torch</span>.<span class="type">Tensor</span>) -&gt; torch.<span class="type">Tensor</span>:</span></span><br><span class="line"><span class="class">        """<span class="type">Performs</span> a forward pass through the transformer model.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="type">Args</span>:</span></span><br><span class="line"><span class="class">            src (<span class="title">torch</span>.<span class="type">Tensor</span>): source input, shape (<span class="title">batch_size</span>, <span class="title">src_seq_len</span>)</span></span><br><span class="line"><span class="class">            tgt (<span class="title">torch</span>.<span class="type">Tensor</span>): target input, shape (<span class="title">batch_size</span>, <span class="title">tgt_seq_len</span>)</span></span><br><span class="line"><span class="class">            src_mask (<span class="title">torch</span>.<span class="type">Tensor</span>): source mask, shape (<span class="title">batch_size</span>, 1, 1, <span class="title">src_seq_len</span>)</span></span><br><span class="line"><span class="class">            tgt_mask (<span class="title">torch</span>.<span class="type">Tensor</span>): target mask, shape (<span class="title">batch_size</span>, 1, <span class="title">tgt_seq_len</span>, <span class="title">tgt_seq_len</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="type">Returns</span>:</span></span><br><span class="line"><span class="class">            torch.<span class="type">Tensor</span>: output of the transformer model, shape (<span class="title">batch_size</span>, <span class="title">tgt_seq_len</span>, <span class="title">tgt_vocab_size</span>)</span></span><br><span class="line"><span class="class">        """</span></span><br><span class="line"><span class="class">        # <span class="type">Encoder</span></span></span><br><span class="line"><span class="class">        # (<span class="title">batch_size</span>, <span class="title">src_seq_len</span>) -&gt; (<span class="title">batch_size</span>, <span class="title">src_seq_len</span>, <span class="title">embed_size</span>)</span></span><br><span class="line"><span class="class">        src = self.src_embedding(<span class="title">src</span>)</span></span><br><span class="line"><span class="class">        # (<span class="title">batch_size</span>, <span class="title">src_seq_len</span>, <span class="title">embed_size</span>) -&gt; (<span class="title">batch_size</span>, <span class="title">src_seq_len</span>, <span class="title">embed_size</span>)</span></span><br><span class="line"><span class="class">        src = self.src_pos_encoding(<span class="title">src</span>)</span></span><br><span class="line"><span class="class">        enc_output = self.encoder(<span class="title">src</span>, <span class="title">src_mask</span>)</span></span><br><span class="line"><span class="class">        # <span class="type">Decoder</span></span></span><br><span class="line"><span class="class">        tgt = self.tgt_embedding(<span class="title">tgt</span>)</span></span><br><span class="line"><span class="class">        tgt = self.tgt_pos_encoding(<span class="title">tgt</span>)</span></span><br><span class="line"><span class="class">        output = self.decoder(<span class="title">tgt</span>, <span class="title">enc_output</span>, <span class="title">src_mask</span>, <span class="title">tgt_mask</span>)</span></span><br><span class="line"><span class="class">        # projection</span></span><br><span class="line"><span class="class">        return self.projection(<span class="title">output</span>)</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="训练">训练</h2>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">Epoch</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">0</span>: <span class="number">100</span>%|█████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [11:02&lt;00:00,  5.49it/s, loss=5.7891]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">1</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">1</span>: <span class="number">100</span>%|█████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [11:02&lt;00:00,  5.49it/s, loss=4.3471]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">2</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">2</span>: <span class="number">100</span>%|█████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [11:02&lt;00:00,  5.49it/s, loss=4.2629]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">3</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">3</span>: <span class="number">100</span>%|█████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [11:02&lt;00:00,  5.50it/s, loss=5.1802]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">4</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">4</span>: <span class="number">100</span>%|█████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [11:01&lt;00:00,  5.50it/s, loss=4.5534]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">5</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">5</span>: <span class="number">100</span>%|█████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [11:01&lt;00:00,  5.50it/s, loss=3.7544]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">6</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">6</span>: <span class="number">100</span>%|█████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [11:00&lt;00:00,  5.51it/s, loss=2.6769]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">7</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">7</span>: <span class="number">100</span>%|█████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [10:59&lt;00:00,  5.51it/s, loss=3.1740]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">8</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">8</span>: <span class="number">100</span>%|█████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [10:59&lt;00:00,  5.52it/s, loss=1.5529]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">9</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">9</span>: <span class="number">100</span>%|█████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [11:00&lt;00:00,  5.51it/s, loss=1.5789]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">10</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">10</span>: <span class="number">100</span>%|████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [11:00&lt;00:00,  5.51it/s, loss=2.2088]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">11</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">11</span>: <span class="number">100</span>%|████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [10:57&lt;00:00,  5.53it/s, loss=1.8507]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">12</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">12</span>: <span class="number">100</span>%|████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [10:58&lt;00:00,  5.53it/s, loss=1.6555]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">13</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">13</span>: <span class="number">100</span>%|████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [10:57&lt;00:00,  5.53it/s, loss=1.7904]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">14</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">14</span>: <span class="number">100</span>%|████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [10:57&lt;00:00,  5.53it/s, loss=2.1260]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">15</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">15</span>: <span class="number">100</span>%|████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [10:56&lt;00:00,  5.54it/s, loss=2.6503]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">16</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">16</span>: <span class="number">100</span>%|████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [10:56&lt;00:00,  5.54it/s, loss=2.1801]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">17</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">17</span>: <span class="number">100</span>%|████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [10:56&lt;00:00,  5.54it/s, loss=2.6803]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">18</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">18</span>: <span class="number">100</span>%|████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [10:56&lt;00:00,  5.54it/s, loss=2.0962]</span></span><br><span class="line"><span class="attribute">Epoch</span> <span class="number">19</span></span><br><span class="line"><span class="attribute">Processing</span> epoch  <span class="number">19</span>: <span class="number">100</span>%|████| <span class="number">3638</span>/<span class="number">3638</span><span class="meta"> [10:56&lt;00:00,  5.54it/s, loss=1.8696]</span></span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Deep Learning</category>
        <category>Pytorch</category>
        <category>Transformer</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Tutorials</tag>
        <tag>Pytorch</tag>
        <tag>Transformer</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning Notes Of Segment Anything (SAM)</title>
    <url>/2025/01/05/Learning-Notes-Of-Segment-Anything-SAM/</url>
    <content><![CDATA[<html><head></head><body><p>由<strong>Meta</strong>开发的<a href="https://github.com/facebookresearch/segment-anything?tab=readme-ov-file">Segment Anything (SAM)</a>是图像分割领域的SOTA模型,其核心思想是<strong>Prompt Tuning</strong>，通过<strong>Prompt Tuning</strong>，SAM在无需训练的情况下，可以完成各种图像分割任务，包括但不限于<strong>语义分割</strong>、<strong>实例分割</strong>、<strong>全景分割</strong>、<strong>抠图</strong>、<strong>图像编辑</strong>等。本文将重点介绍<strong>SAM</strong>的模型结构、算法原理、训练方法以及pytorch实现。 <span id="more"></span></p>
<h2 id="模型结构">模型结构</h2>
<p><img alt="Segment Anything (SAM)模型结构" data-src="/2025/01/05/Learning-Notes-Of-Segment-Anything-SAM/sam.png"> SAM的模型结构如上图所示，首先由<strong>ViT</strong>提取图像的Embedding特征，然后。</p>
<ul>
<li>flowchart</li>
</ul>
<pre class="mermaid">flowchart LR
    Sam --&gt; ImageEncoderViT
    Sam --&gt; PromptEncoder
    Sam --&gt; MaskDecoder
    ImageEncoderViT --&gt; PatchEmbed
    ImageEncoderViT --&gt; PosEmbedding
    ImageEncoderViT --&gt; Blocks
    ImageEncoderViT --&gt; Neck</pre>
<p><strong>SAM</strong>模型由三个核心模块组成，分别是<strong>ImageEncoderViT</strong>、<strong>PromptEncoder</strong>和<strong>MaskDecoder</strong>。其中<strong>ImageEncoderViT</strong>是<strong>ViT</strong>模型，主要用于提取图像嵌入向量特征。<strong>PromptEncoder</strong>是<strong>Prompt Tuning</strong>模块，主要用于处理prompt特征，。<strong>MaskDecoder</strong>是<strong>Mask Decoder</strong>模块，主要输出分割结果。</p>
<h2 id="核心模块">核心模块</h2>
<h3 id="imageencodervit">ImageEncoderViT</h3>
<p><strong>ImageEncoderViT</strong>是<strong>ViT</strong>模型，主要用于提取图像嵌入向量特征。相对于原生的<strong>ViT</strong>模型，<strong>ImageEncoderViT</strong>模块做了一些改进。首先去掉了分类用的class token，然后增加了序列特征融合的<strong>Neck</strong>模块，最后位置编码修改为了可配置的绝对和相对位置编码。</p>
<pre class="mermaid">flowchart LR
    ImageEncoderViT --&gt; PatchEmbed
    ImageEncoderViT --&gt; PosEmbedding
    ImageEncoderViT --&gt; Blocks
    ImageEncoderViT --&gt; Neck
    PatchEmbed --&gt; nn.Conv2d
    PatchEmbed --&gt; nn.permute
    PosEmbedding --&gt; absolute_pos_embed
    PosEmbedding --&gt; relative_pos_embed
    Neck --&gt; nn.Conv2d
    Neck --&gt; nn.LayerNorm</pre>
<h4 id="patchembed">PatchEmbed</h4>
<p><strong>PatchEmbed</strong>主要由<strong>nn.Conv2d</strong>和<strong>nn.permute</strong>组成，主要作用是把图像转换为<strong>patch</strong>，然后进行embedding。</p>
<h4 id="posembedding">PosEmbedding</h4>
<p><strong>PosEmbedding</strong>分为绝对值位置编码和相对位置编码，在模型初始化时由超参数控制。绝对值位置编码由可以学习的参数组成。</p>
<h4 id="blocks">Blocks</h4>
<p><strong>Blocks</strong>是<strong>ViT</strong>模型的主体部分，由多个<strong>Block</strong>组成，每个<strong>Block</strong>包含<strong>Attention</strong>和<strong>MLP</strong>两部分。<strong>Attention</strong>模块的数学操作与<strong>ViT</strong>论文中操作保持一致，只是输入模块的Tensor维度略有不同，原始论文中是(batch_size, seq_len, embed_dim)，而<strong>SAM</strong>模型中是(batch_size, height_patches, width_patches, embed_dim)。<strong>MLP</strong>模块的数学操作与<strong>ViT</strong>论文中操作保持一致。</p>
<ul>
<li>mlp_ratio表示缩放因子，即MLP的隐藏层维度与输入维度的比值，MLP模块的隐藏层维度不直接定义，而是由嵌入特征维度和该缩放因子共同决定。</li>
</ul>
<h5 id="window_partition">window_partition</h5>
<p><strong>SAM</strong>模型在计算<strong>Attention</strong>时，除了引入多头注意力机制，在嵌入特征维度空间内进行分区处理，还引入了<strong>window_partition</strong>操作，在序列长度维度（实际上是在图像二维空间维度）进行分区处理。目标是在更小的二维空间尺度上进行多头注意力学习，用于学习局部特征而非全局特征。它的主要作用包括以下几点：</p>
<ul>
<li><ol type="1">
<li><strong>分块处理图像</strong></li>
</ol>
<ul>
<li>窗口分区的目标是对patch序列进一步划分，让模型在局部patch上进行多头注意力学习，而非全部patch上进行学习。</li>
<li>这种分割方式使模型能够专注于局部特征的提取，同时保留空间上下文信息。</li>
</ul></li>
<li><ol start="2" type="1">
<li><strong>加速平行计算</strong></li>
</ol>
<ul>
<li>通过窗口分区，不同分区的作为batch来处理，充分利用了GPU的并行计算特性，加速了模型训练。</li>
</ul></li>
<li><ol start="3" type="1">
<li><strong>窗口内处理细节特征</strong></li>
</ol>
<ul>
<li>每个窗口内的像素或patch是模型分析的基础单元，可以使用不同的注意力机制来捕捉图像的<strong>局部特征</strong>。在Transformer中，每个窗口的特征会被编码后用于后续的自注意力计算。</li>
</ul></li>
<li><ol start="4" type="1">
<li><strong>减少全局依赖，提升局部感知能力</strong></li>
</ol>
<ul>
<li>图像分块可以<strong>减少单次计算中需要考虑的上下文范围</strong>，使模型能够在不同的层次专注于局部和全局特征的结合，提高特征学习的层次化表达能力。</li>
</ul></li>
<li>代码实现 <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">window_partition</span>(<span class="params">x: torch.Tensor, window_size: <span class="built_in">int</span></span>) -&gt; <span class="type">Tuple</span>[torch.Tensor, <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]]:</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Partition into non-overlapping windows with padding if needed.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        x (tensor): input tokens with [B, H, W, C].</span></span><br><span class="line"><span class="string">        window_size (int): window size.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        windows: windows after partition with [B * num_windows, window_size, window_size, C].</span></span><br><span class="line"><span class="string">        (Hp, Wp): padded height and width before partition</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    B, H, W, C = x.shape</span><br><span class="line"></span><br><span class="line">    pad_h = (window_size - H % window_size) % window_size</span><br><span class="line">    pad_w = (window_size - W % window_size) % window_size</span><br><span class="line">    <span class="keyword">if</span> pad_h &gt; <span class="number">0</span> <span class="keyword">or</span> pad_w &gt; <span class="number">0</span>:</span><br><span class="line">        x = F.pad(x, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, pad_w, <span class="number">0</span>, pad_h))</span><br><span class="line">    Hp, Wp = H + pad_h, W + pad_w</span><br><span class="line"></span><br><span class="line">    x = x.view(B, Hp // window_size, window_size, Wp // window_size, window_size, C)</span><br><span class="line">    windows = x.permute(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>).contiguous().view(-<span class="number">1</span>, window_size, window_size, C)</span><br><span class="line">    <span class="keyword">return</span> windows, (Hp, Wp)</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h4 id="neck">Neck</h4>
<p><strong>Neck</strong>主要由<strong>nn.Conv2d</strong>和<strong>nn.LayerNorm</strong>组成，主要作用是把<strong>Blocks</strong>提取的嵌入特征扩展映射到指定维度作为输出。<strong>SAM</strong>模型分别用了两层<strong>nn.Conv2d</strong>和<strong>nn.LayerNorm</strong>，用于提升模型的泛化能力。第一层<strong>nn.Conv2d</strong>的kernel_size为1,stride为1,可视为等效全链接层。第二层<strong>nn.Conv2d</strong>的kernel_size为3,stride为1,padding为1，可视为卷积层，将邻域特征做了融合处理，进一步提升了<strong>Neck</strong>模块的特征融合与表达能力。</p>
<h3 id="promptencoder">PromptEncoder</h3>
<p>该模块的作用是将prompt生成编码，用于分割解码器的输入。prompt支持三种类型：</p>
<ul>
<li><ol type="1">
<li>point</li>
</ol>
<ul>
<li>提供一个点坐标的list，每个点提供一个label，0表示负点（分割结果中不包含本点），1表示正点（分割结果中包含本点）。</li>
</ul></li>
<li><ol start="2" type="1">
<li>box</li>
</ol>
<ul>
<li>提供一个box的list，每个box有左上角坐标和右下角坐标。</li>
</ul></li>
<li><ol start="3" type="1">
<li>mask</li>
</ol>
<ul>
<li>提供一个图像模板。</li>
</ul></li>
</ul>
<p>首先，定义一个随机的不可训练的PositionalEmbedding，维度为（2, embed_dim）,用于表示不同二维图像空间的位置编码，一半维度用<span class="math inline">\(sin\)</span>函数处理，另外一般维度用<span class="math inline">\(cos\)</span>函数处理。 其次，定义4个可训练的PointEmbedding，分别是正向点、负向点，box的左上角点和box的右下角点。</p>
<p>对于每一个point，首先利用point的(x,y)坐标与PositionalEmbedding相乘，得到(1, embed_dim)的向量，然后根据point label情况与对应的PointEmbedding相加，得到(1, embed_dim)的向量，作为该point的prompt编码。</p>
<p>对于每一个box，拆成左上角和右下角两个point，采用point的处理方式，得到(2, embed_dim)的向量。</p>
<p>对于每一个mask，使用三个卷积层进行操作，提取mask编码。</p>
<p>值的注意的是，point和box的编码是稀疏编码，仅有位置信息。而mask得到的是稠密编码，还有mask对应物体的语义信息。</p>
<ul>
<li>sequence
<pre class="mermaid">sequenceDiagram
  Alice-&gt;&gt;John: Hello John, how are you?
  John--&gt;&gt;Alice: Great!
  Alice-)John: See you later!</pre></li>
<li>mindmap
<pre class="mermaid">mindmap
Root
  A
    B
    C</pre></li>
<li>流程图
<pre class="mermaid">graph TD;
  A[输入图像] --&gt; B[ViT提取Embedding特征];
  B --&gt; C[Prompt Tuning];
  C --&gt; D[语义分割];
  C --&gt; E[实例分割];
  C --&gt; F[全景分割];
  C --&gt; G[抠图];
  C --&gt; H[图像编辑];
  D --&gt; I[输出分割结果];
  E --&gt; I;
  F --&gt; I;
  G --&gt; I;
  H --&gt; I;
  I --&gt; J[结束];</pre></li>
<li>甘特图
<pre class="mermaid">gantt
  title A Gantt Diagram
  dateFormat YYYY-MM-DD
  section Section
      A task          :a1, 2014-01-01, 30d
      Another task    :after a1, 20d
  section Another
      Task in Another :2014-01-12, 12d
      another task    :24d</pre></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Deep Learning</category>
        <category>Pytorch</category>
        <category>Vision Transformer</category>
        <category>Segment Anything</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Tutorials</tag>
        <tag>Pytorch</tag>
        <tag>Vision Transformer</tag>
        <tag>Segment Anything</tag>
      </tags>
  </entry>
  <entry>
    <title>Basic Usage of Hexo</title>
    <url>/2019/11/30/Basic-Usage-of-Hexo/</url>
    <content><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h2 id="writing">Writing</h2>
<p>Basically, <a href="https://hexo.io/">Hexo</a> supports <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a> and it can automatically compile Markdown to static webpage.</p>
<h3 id="insert-images">Insert Images</h3>
There are multiple ways that can insert images in Markdown, such as using absolute path, relative path, or url path. In Hexo, we can simply put the images we want to inert in <strong>source/images</strong> and insert it using the following command. <figure class="highlight arcade"><table><tbody><tr><td class="code"><pre><span class="line">![descriptions](<span class="regexp">/images/im</span>age_example.jpg)</span><br></pre></td></tr></tbody></table></figure> This method is easy to use. However, if we have huge amounts of images in our blog, it would be difficult to efficiently manage them. Luckily, Hexo provides a more organized way to many images on a post-per-post basis. We first turn on this convenient approach by setting the <strong>post_assert_folder</strong> setting in **_config.yml** to true. <figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">post_assert_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure> With asset folder management enabled, Hexo will create a folder every time you make a new post with the **hexo new [layout]
<title>
&lt;p&gt;** command. This asset folder will have the same name as the markdown file associated with the post. Place all assets related to your post into the associated folder, and you will be able to reference them using a relative path, making for an easier and more convenient workflow. Then we can insert images using the following command. &lt;figure class="highlight scss"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;!&lt;span class="selector-attr"&gt;[descriptions]&lt;/span&gt;(image.jpg)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; More info: &lt;a href="https://hexo.io/docs/asset-folders.html"&gt;Assert Folders&lt;/a&gt; ### File download links Similar with inserting images, we can put files we want to share in the same fold and share it using the following markdown command. &lt;figure class="highlight applescript"&gt;&lt;table&gt;&lt;tr&gt;&lt;td class="gutter"&gt;&lt;pre&gt;&lt;span class="line"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="line"&gt;[Download &lt;span class="built_in"&gt;file&lt;/span&gt;](&lt;span class="built_in"&gt;file&lt;/span&gt;.example)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</title></body></html>]]></content>
      <categories>
        <category>Tutorials</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
